
health_monitoring_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08008de8  08008de8  00018de8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009284  08009284  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009284  08009284  00019284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800928c  0800928c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800928c  0800928c  0001928c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009290  08009290  00019290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  200001e0  08009470  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08009470  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b1ba  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003138  00000000  00000000  0003b3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029446  00000000  00000000  00040b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018eb2  00000000  00000000  00069f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7f4d  00000000  00000000  00082e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ad8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006348  00000000  00000000  0017ade0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dcc 	.word	0x08008dcc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08008dcc 	.word	0x08008dcc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f001 fa17 	bl	80022e4 <null_ptr_check>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d133      	bne.n	8000f2a <bme280_init+0x8a>
    {
        while (try_count)
 8000ec2:	e028      	b.n	8000f16 <bme280_init+0x76>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000ec4:	f107 010d 	add.w	r1, r7, #13
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	20d0      	movs	r0, #208	; 0xd0
 8000ece:	f000 f832 	bl	8000f36 <bme280_get_regs>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d114      	bne.n	8000f08 <bme280_init+0x68>
 8000ede:	7b7b      	ldrb	r3, [r7, #13]
 8000ee0:	2b60      	cmp	r3, #96	; 0x60
 8000ee2:	d111      	bne.n	8000f08 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000ee4:	7b7a      	ldrb	r2, [r7, #13]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 f978 	bl	80011e0 <bme280_soft_reset>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d110      	bne.n	8000f1e <bme280_init+0x7e>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f001 f867 	bl	8001fd0 <get_calib_data>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000f06:	e00a      	b.n	8000f1e <bme280_init+0x7e>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	4798      	blx	r3
            --try_count;
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1d3      	bne.n	8000ec4 <bme280_init+0x24>
 8000f1c:	e000      	b.n	8000f20 <bme280_init+0x80>
                break;
 8000f1e:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <bme280_init+0x8a>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000f26:	23fe      	movs	r3, #254	; 0xfe
 8000f28:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000f36:	b590      	push	{r4, r7, lr}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	4613      	mov	r3, r2
 8000f46:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 f9cb 	bl	80022e4 <null_ptr_check>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d117      	bne.n	8000f8a <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d003      	beq.n	8000f6a <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f68:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685c      	ldr	r4, [r3, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7858      	ldrb	r0, [r3, #1]
 8000f72:	89bb      	ldrh	r3, [r7, #12]
 8000f74:	7bf9      	ldrb	r1, [r7, #15]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	47a0      	blx	r4
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8000f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8000f86:	23fc      	movs	r3, #252	; 0xfc
 8000f88:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}

08000f96 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000f96:	b590      	push	{r4, r7, lr}
 8000f98:	b08d      	sub	sp, #52	; 0x34
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d901      	bls.n	8000fb0 <bme280_set_regs+0x1a>
    {
        len = 10;
 8000fac:	230a      	movs	r3, #10
 8000fae:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fb0:	6838      	ldr	r0, [r7, #0]
 8000fb2:	f001 f997 	bl	80022e4 <null_ptr_check>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000fbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d156      	bne.n	8001072 <bme280_set_regs+0xdc>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d053      	beq.n	8001072 <bme280_set_regs+0xdc>
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d050      	beq.n	8001072 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d049      	beq.n	800106a <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	789b      	ldrb	r3, [r3, #2]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d01a      	beq.n	800101a <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000fea:	e011      	b.n	8001010 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ff0:	68fa      	ldr	r2, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000ffa:	68f9      	ldr	r1, [r7, #12]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001006:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800100a:	3301      	adds	r3, #1
 800100c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001010:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3e8      	bcc.n	8000fec <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d90d      	bls.n	800103c <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f107 0114 	add.w	r1, r7, #20
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f001 f816 	bl	800205a <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	b29b      	uxth	r3, r3
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	b29b      	uxth	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800103a:	e001      	b.n	8001040 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689c      	ldr	r4, [r3, #8]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	7858      	ldrb	r0, [r3, #1]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	7819      	ldrb	r1, [r3, #0]
 800104c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800104e:	f107 0214 	add.w	r2, r7, #20
 8001052:	47a0      	blx	r4
 8001054:	4603      	mov	r3, r0
 8001056:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 800105a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00b      	beq.n	800107a <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8001062:	23fc      	movs	r3, #252	; 0xfc
 8001064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001068:	e007      	b.n	800107a <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800106a:	23fd      	movs	r3, #253	; 0xfd
 800106c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001070:	e003      	b.n	800107a <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001072:	23ff      	movs	r3, #255	; 0xff
 8001074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001078:	e000      	b.n	800107c <bme280_set_regs+0xe6>
        if (len != 0)
 800107a:	bf00      	nop
    }

    return rslt;
 800107c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001080:	4618      	mov	r0, r3
 8001082:	3734      	adds	r7, #52	; 0x34
 8001084:	46bd      	mov	sp, r7
 8001086:	bd90      	pop	{r4, r7, pc}

08001088 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f001 f925 	bl	80022e4 <null_ptr_check>
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d13f      	bne.n	8001126 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 80010a6:	f107 030e 	add.w	r3, r7, #14
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f874 	bl	800119a <bme280_get_sensor_mode>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d107      	bne.n	80010ce <bme280_set_sensor_settings+0x46>
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80010c4:	6838      	ldr	r0, [r7, #0]
 80010c6:	f000 fb74 	bl	80017b2 <put_device_to_sleep>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d127      	bne.n	8001126 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4619      	mov	r1, r3
 80010da:	2007      	movs	r0, #7
 80010dc:	f001 f8e6 	bl	80022ac <are_settings_changed>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d009      	beq.n	80010fa <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	683a      	ldr	r2, [r7, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f9b0 	bl	8001456 <set_osr_settings>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d111      	bne.n	8001126 <bme280_set_sensor_settings+0x9e>
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4619      	mov	r1, r3
 8001106:	2018      	movs	r0, #24
 8001108:	f001 f8d0 	bl	80022ac <are_settings_changed>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d009      	beq.n	8001126 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa37 	bl	8001590 <set_filter_standby_settings>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800113e:	6838      	ldr	r0, [r7, #0]
 8001140:	f001 f8d0 	bl	80022e4 <null_ptr_check>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8001148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d11e      	bne.n	800118e <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8001150:	f107 030e 	add.w	r3, r7, #14
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f81f 	bl	800119a <bme280_get_sensor_mode>
 800115c:	4603      	mov	r3, r0
 800115e:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d107      	bne.n	8001178 <bme280_set_sensor_mode+0x46>
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d004      	beq.n	8001178 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 800116e:	6838      	ldr	r0, [r7, #0]
 8001170:	f000 fb1f 	bl	80017b2 <put_device_to_sleep>
 8001174:	4603      	mov	r3, r0
 8001176:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8001178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	6839      	ldr	r1, [r7, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fae1 	bl	800174c <write_power_mode>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011a4:	6838      	ldr	r0, [r7, #0]
 80011a6:	f001 f89d 	bl	80022e4 <null_ptr_check>
 80011aa:	4603      	mov	r3, r0
 80011ac:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10e      	bne.n	80011d4 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2201      	movs	r2, #1
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	20f4      	movs	r0, #244	; 0xf4
 80011be:	f7ff feba 	bl	8000f36 <bme280_get_regs>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 80011e8:	23e0      	movs	r3, #224	; 0xe0
 80011ea:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 80011f0:	2305      	movs	r3, #5
 80011f2:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 80011f4:	23b6      	movs	r3, #182	; 0xb6
 80011f6:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f001 f873 	bl	80022e4 <null_ptr_check>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d12f      	bne.n	800126a <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800120a:	f107 010b 	add.w	r1, r7, #11
 800120e:	f107 000d 	add.w	r0, r7, #13
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f7ff febe 	bl	8000f96 <bme280_set_regs>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	2002      	movs	r0, #2
 800122c:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 800122e:	f107 010c 	add.w	r1, r7, #12
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	20f3      	movs	r0, #243	; 0xf3
 8001238:	f7ff fe7d 	bl	8000f36 <bme280_get_regs>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d109      	bne.n	800125c <bme280_soft_reset+0x7c>
 8001248:	7bbb      	ldrb	r3, [r7, #14]
 800124a:	1e5a      	subs	r2, r3, #1
 800124c:	73ba      	strb	r2, [r7, #14]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <bme280_soft_reset+0x7c>
 8001252:	7b3b      	ldrb	r3, [r7, #12]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e4      	bne.n	8001226 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 800125c:	7b3b      	ldrb	r3, [r7, #12]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8001266:	23fa      	movs	r3, #250	; 0xfa
 8001268:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b08a      	sub	sp, #40	; 0x28
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f001 f823 	bl	80022e4 <null_ptr_check>
 800129e:	4603      	mov	r3, r0
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 80012a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d124      	bne.n	80012f6 <bme280_get_sensor_data+0x80>
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d021      	beq.n	80012f6 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80012b2:	f107 011c 	add.w	r1, r7, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2208      	movs	r2, #8
 80012ba:	20f7      	movs	r0, #247	; 0xf7
 80012bc:	f7ff fe3b 	bl	8000f36 <bme280_get_regs>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80012c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d116      	bne.n	80012fc <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80012ce:	f107 0210 	add.w	r2, r7, #16
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f815 	bl	8001308 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3310      	adds	r3, #16
 80012e2:	f107 0110 	add.w	r1, r7, #16
 80012e6:	7bf8      	ldrb	r0, [r7, #15]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	f000 f853 	bl	8001394 <bme280_compensate_data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80012f4:	e002      	b.n	80012fc <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80012f6:	23ff      	movs	r3, #255	; 0xff
 80012f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80012fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001300:	4618      	mov	r0, r3
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001308:	b480      	push	{r7}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	031b      	lsls	r3, r3, #12
 8001318:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3301      	adds	r3, #1
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3302      	adds	r3, #2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	091b      	lsrs	r3, r3, #4
 800132c:	b2db      	uxtb	r3, r3
 800132e:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	431a      	orrs	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	431a      	orrs	r2, r3
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3303      	adds	r3, #3
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	031b      	lsls	r3, r3, #12
 8001346:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3304      	adds	r3, #4
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3305      	adds	r3, #5
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	b2db      	uxtb	r3, r3
 800135c:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	431a      	orrs	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	431a      	orrs	r2, r3
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3306      	adds	r3, #6
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3307      	adds	r3, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	431a      	orrs	r2, r3
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	609a      	str	r2, [r3, #8]
}
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4603      	mov	r3, r0
 80013a2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d04b      	beq.n	8001446 <bme280_compensate_data+0xb2>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d048      	beq.n	8001446 <bme280_compensate_data+0xb2>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d045      	beq.n	8001446 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	68b8      	ldr	r0, [r7, #8]
 80013f2:	f000 fa2b 	bl	800184c <compensate_temperature>
 80013f6:	eeb0 7a40 	vmov.f32	s14, s0
 80013fa:	eef0 7a60 	vmov.f32	s15, s1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d00a      	beq.n	8001424 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800140e:	6839      	ldr	r1, [r7, #0]
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f000 faed 	bl	80019f0 <compensate_pressure>
 8001416:	eeb0 7a40 	vmov.f32	s14, s0
 800141a:	eef0 7a60 	vmov.f32	s15, s1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00d      	beq.n	800144a <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	68b8      	ldr	r0, [r7, #8]
 8001432:	f000 fcad 	bl	8001d90 <compensate_humidity>
 8001436:	eeb0 7a40 	vmov.f32	s14, s0
 800143a:	eef0 7a60 	vmov.f32	s15, s1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 8001444:	e001      	b.n	800144a <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001446:	23ff      	movs	r3, #255	; 0xff
 8001448:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800144a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001464:	2301      	movs	r3, #1
 8001466:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f000 f815 	bl	80014a4 <set_osr_humidity_settings>
 800147a:	4603      	mov	r3, r0
 800147c:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f842 	bl	8001518 <set_osr_press_temp_settings>
 8001494:	4603      	mov	r3, r0
 8001496:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001498:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014ae:	23f2      	movs	r3, #242	; 0xf2
 80014b0:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80014be:	f107 010e 	add.w	r1, r7, #14
 80014c2:	f107 000c 	add.w	r0, r7, #12
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f7ff fd64 	bl	8000f96 <bme280_set_regs>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80014da:	23f4      	movs	r3, #244	; 0xf4
 80014dc:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80014de:	7b38      	ldrb	r0, [r7, #12]
 80014e0:	f107 010d 	add.w	r1, r7, #13
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f7ff fd25 	bl	8000f36 <bme280_get_regs>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 80014f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d109      	bne.n	800150c <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80014f8:	f107 010d 	add.w	r1, r7, #13
 80014fc:	f107 000c 	add.w	r0, r7, #12
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	2201      	movs	r2, #1
 8001504:	f7ff fd47 	bl	8000f96 <bme280_set_regs>
 8001508:	4603      	mov	r3, r0
 800150a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800150c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001526:	23f4      	movs	r3, #244	; 0xf4
 8001528:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800152a:	7db8      	ldrb	r0, [r7, #22]
 800152c:	f107 0115 	add.w	r1, r7, #21
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f7ff fcff 	bl	8000f36 <bme280_get_regs>
 8001538:	4603      	mov	r3, r0
 800153a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800153c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d11f      	bne.n	8001584 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 800154e:	f107 0315 	add.w	r3, r7, #21
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f88e 	bl	8001676 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001564:	f107 0315 	add.w	r3, r7, #21
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f8a0 	bl	80016b0 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001570:	f107 0115 	add.w	r1, r7, #21
 8001574:	f107 0016 	add.w	r0, r7, #22
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f7ff fd0b 	bl	8000f96 <bme280_set_regs>
 8001580:	4603      	mov	r3, r0
 8001582:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001584:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800159e:	23f5      	movs	r3, #245	; 0xf5
 80015a0:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015a2:	7db8      	ldrb	r0, [r7, #22]
 80015a4:	f107 0115 	add.w	r1, r7, #21
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f7ff fcc3 	bl	8000f36 <bme280_get_regs>
 80015b0:	4603      	mov	r3, r0
 80015b2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80015b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11f      	bne.n	80015fc <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 80015c6:	f107 0315 	add.w	r3, r7, #21
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f81b 	bl	8001608 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 80015dc:	f107 0315 	add.w	r3, r7, #21
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 f82d 	bl	8001642 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015e8:	f107 0115 	add.w	r1, r7, #21
 80015ec:	f107 0016 	add.w	r0, r7, #22
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f7ff fccf 	bl	8000f96 <bme280_set_regs>
 80015f8:	4603      	mov	r3, r0
 80015fa:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	f023 031c 	bic.w	r3, r3, #28
 800161c:	b25a      	sxtb	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	78db      	ldrb	r3, [r3, #3]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	b25b      	sxtb	r3, r3
 8001626:	f003 031c 	and.w	r3, r3, #28
 800162a:	b25b      	sxtb	r3, r3
 800162c:	4313      	orrs	r3, r2
 800162e:	b25b      	sxtb	r3, r3
 8001630:	b2da      	uxtb	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	701a      	strb	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	b25a      	sxtb	r2, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	791b      	ldrb	r3, [r3, #4]
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	b25b      	sxtb	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b25b      	sxtb	r3, r3
 8001664:	b2da      	uxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	701a      	strb	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
 800167e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b25b      	sxtb	r3, r3
 8001686:	f023 031c 	bic.w	r3, r3, #28
 800168a:	b25a      	sxtb	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	b25b      	sxtb	r3, r3
 8001694:	f003 031c 	and.w	r3, r3, #28
 8001698:	b25b      	sxtb	r3, r3
 800169a:	4313      	orrs	r3, r2
 800169c:	b25b      	sxtb	r3, r3
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	701a      	strb	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	b25a      	sxtb	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	785b      	ldrb	r3, [r3, #1]
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	701a      	strb	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3302      	adds	r3, #2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	109b      	asrs	r3, r3, #2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	b2da      	uxtb	r2, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3302      	adds	r3, #2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	095b      	lsrs	r3, r3, #5
 8001718:	b2da      	uxtb	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3303      	adds	r3, #3
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	109b      	asrs	r3, r3, #2
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	b2da      	uxtb	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3303      	adds	r3, #3
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	095b      	lsrs	r3, r3, #5
 800173a:	b2da      	uxtb	r2, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	711a      	strb	r2, [r3, #4]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001758:	23f4      	movs	r3, #244	; 0xf4
 800175a:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 800175c:	7bb8      	ldrb	r0, [r7, #14]
 800175e:	f107 010d 	add.w	r1, r7, #13
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	2201      	movs	r2, #1
 8001766:	f7ff fbe6 	bl	8000f36 <bme280_get_regs>
 800176a:	4603      	mov	r3, r0
 800176c:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d117      	bne.n	80017a6 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001776:	7b7b      	ldrb	r3, [r7, #13]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	b25a      	sxtb	r2, r3
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	4313      	orrs	r3, r2
 800178c:	b25b      	sxtb	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001792:	f107 010d 	add.w	r1, r7, #13
 8001796:	f107 000e 	add.w	r0, r7, #14
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	f7ff fbfa 	bl	8000f96 <bme280_set_regs>
 80017a2:	4603      	mov	r3, r0
 80017a4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80017ba:	f107 0110 	add.w	r1, r7, #16
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	20f2      	movs	r0, #242	; 0xf2
 80017c4:	f7ff fbb7 	bl	8000f36 <bme280_get_regs>
 80017c8:	4603      	mov	r3, r0
 80017ca:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80017cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d118      	bne.n	8001806 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff80 	bl	80016e4 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fcfb 	bl	80011e0 <bme280_soft_reset>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 80017ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f808 	bl	8001812 <reload_device_settings>
 8001802:	4603      	mov	r3, r0
 8001804:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	201f      	movs	r0, #31
 8001822:	f7ff fe18 	bl	8001456 <set_osr_settings>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	201f      	movs	r0, #31
 8001838:	f7ff feaa 	bl	8001590 <set_filter_standby_settings>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001840:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 800184c:	b5b0      	push	{r4, r5, r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b5f      	ldr	r3, [pc, #380]	; (80019d8 <compensate_temperature+0x18c>)
 800185c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <compensate_temperature+0x190>)
 8001866:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe48 	bl	8000504 <__aeabi_ui2d>
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <compensate_temperature+0x194>)
 800187a:	f7fe ffe7 	bl	800084c <__aeabi_ddiv>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4614      	mov	r4, r2
 8001884:	461d      	mov	r5, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe3a 	bl	8000504 <__aeabi_ui2d>
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <compensate_temperature+0x198>)
 8001896:	f7fe ffd9 	bl	800084c <__aeabi_ddiv>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fcf1 	bl	8000288 <__aeabi_dsub>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_T2);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe35 	bl	8000524 <__aeabi_i2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018c2:	f7fe fe99 	bl	80005f8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fe16 	bl	8000504 <__aeabi_ui2d>
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80018e0:	f7fe ffb4 	bl	800084c <__aeabi_ddiv>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fe07 	bl	8000504 <__aeabi_ui2d>
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <compensate_temperature+0x19c>)
 80018fc:	f7fe ffa6 	bl	800084c <__aeabi_ddiv>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4620      	mov	r0, r4
 8001906:	4629      	mov	r1, r5
 8001908:	f7fe fcbe 	bl	8000288 <__aeabi_dsub>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800191c:	f7fe fe6c 	bl	80005f8 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4614      	mov	r4, r2
 8001926:	461d      	mov	r5, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fdf8 	bl	8000524 <__aeabi_i2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fe5c 	bl	80005f8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800194c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001950:	f7fe fc9c 	bl	800028c <__adddf3>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fc 	bl	8000b58 <__aeabi_d2iz>
 8001960:	4602      	mov	r2, r0
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800196a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800196e:	f7fe fc8d 	bl	800028c <__adddf3>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <compensate_temperature+0x1a0>)
 8001980:	f7fe ff64 	bl	800084c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 800198c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001990:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001994:	f7ff f8a2 	bl	8000adc <__aeabi_dcmplt>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 800199e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019a6:	e00c      	b.n	80019c2 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 80019a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019b0:	f7ff f8b2 	bl	8000b18 <__aeabi_dcmpgt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 80019ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 80019c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
}
 80019ca:	eeb0 0a47 	vmov.f32	s0, s14
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	3730      	adds	r7, #48	; 0x30
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bdb0      	pop	{r4, r5, r7, pc}
 80019d8:	c0440000 	.word	0xc0440000
 80019dc:	40554000 	.word	0x40554000
 80019e0:	40d00000 	.word	0x40d00000
 80019e4:	40900000 	.word	0x40900000
 80019e8:	40c00000 	.word	0x40c00000
 80019ec:	40b40000 	.word	0x40b40000

080019f0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b08e      	sub	sp, #56	; 0x38
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80019fa:	a3d9      	add	r3, pc, #868	; (adr r3, 8001d60 <compensate_pressure+0x370>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8001a04:	a3d8      	add	r3, pc, #864	; (adr r3, 8001d68 <compensate_pressure+0x378>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fd86 	bl	8000524 <__aeabi_i2d>
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a20:	f7fe ff14 	bl	800084c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4bc1      	ldr	r3, [pc, #772]	; (8001d38 <compensate_pressure+0x348>)
 8001a32:	f7fe fc29 	bl	8000288 <__aeabi_dsub>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a46:	f7fe fdd7 	bl	80005f8 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4614      	mov	r4, r2
 8001a50:	461d      	mov	r5, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd63 	bl	8000524 <__aeabi_i2d>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4620      	mov	r0, r4
 8001a64:	4629      	mov	r1, r5
 8001a66:	f7fe fdc7 	bl	80005f8 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4bb1      	ldr	r3, [pc, #708]	; (8001d3c <compensate_pressure+0x34c>)
 8001a78:	f7fe fee8 	bl	800084c <__aeabi_ddiv>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd4a 	bl	8000524 <__aeabi_i2d>
 8001a90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a94:	f7fe fdb0 	bl	80005f8 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f7fe fbf2 	bl	800028c <__adddf3>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ab0:	f7fe fbec 	bl	800028c <__adddf3>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4b9f      	ldr	r3, [pc, #636]	; (8001d40 <compensate_pressure+0x350>)
 8001ac2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ac6:	f7fe fec1 	bl	800084c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4614      	mov	r4, r2
 8001ad0:	461d      	mov	r5, r3
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd23 	bl	8000524 <__aeabi_i2d>
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	4b98      	ldr	r3, [pc, #608]	; (8001d44 <compensate_pressure+0x354>)
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe fbcc 	bl	800028c <__adddf3>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7fe fd0e 	bl	8000524 <__aeabi_i2d>
 8001b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0c:	f7fe fd74 	bl	80005f8 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b1c:	f7fe fd6c 	bl	80005f8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b86      	ldr	r3, [pc, #536]	; (8001d48 <compensate_pressure+0x358>)
 8001b2e:	f7fe fe8d 	bl	800084c <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcef 	bl	8000524 <__aeabi_i2d>
 8001b46:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b4a:	f7fe fd55 	bl	80005f8 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b5a:	f7fe fb97 	bl	800028c <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	4b77      	ldr	r3, [pc, #476]	; (8001d48 <compensate_pressure+0x358>)
 8001b6c:	f7fe fe6e 	bl	800084c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <compensate_pressure+0x34c>)
 8001b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b82:	f7fe fe63 	bl	800084c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4b6e      	ldr	r3, [pc, #440]	; (8001d4c <compensate_pressure+0x35c>)
 8001b94:	f7fe fb7a 	bl	800028c <__adddf3>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	88db      	ldrh	r3, [r3, #6]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fcad 	bl	8000504 <__aeabi_ui2d>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fd21 	bl	80005f8 <__aeabi_dmul>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bca:	f7fe ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f040 80cd 	bne.w	8001d70 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc92 	bl	8000504 <__aeabi_ui2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	f04f 0000 	mov.w	r0, #0
 8001be8:	4959      	ldr	r1, [pc, #356]	; (8001d50 <compensate_pressure+0x360>)
 8001bea:	f7fe fb4d 	bl	8000288 <__aeabi_dsub>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <compensate_pressure+0x364>)
 8001bfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c00:	f7fe fe24 	bl	800084c <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c0c:	f7fe fb3c 	bl	8000288 <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	a345      	add	r3, pc, #276	; (adr r3, 8001d30 <compensate_pressure+0x340>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fceb 	bl	80005f8 <__aeabi_dmul>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c2e:	f7fe fe0d 	bl	800084c <__aeabi_ddiv>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc6f 	bl	8000524 <__aeabi_i2d>
 8001c46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c4a:	f7fe fcd5 	bl	80005f8 <__aeabi_dmul>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c5a:	f7fe fccd 	bl	80005f8 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <compensate_pressure+0x368>)
 8001c6c:	f7fe fdee 	bl	800084c <__aeabi_ddiv>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc50 	bl	8000524 <__aeabi_i2d>
 8001c84:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c88:	f7fe fcb6 	bl	80005f8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <compensate_pressure+0x34c>)
 8001c9a:	f7fe fdd7 	bl	800084c <__aeabi_ddiv>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001ca6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001caa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cae:	f7fe faed 	bl	800028c <__adddf3>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4614      	mov	r4, r2
 8001cb8:	461d      	mov	r5, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fc2f 	bl	8000524 <__aeabi_i2d>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	4629      	mov	r1, r5
 8001cce:	f7fe fadd 	bl	800028c <__adddf3>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <compensate_pressure+0x36c>)
 8001ce0:	f7fe fdb4 	bl	800084c <__aeabi_ddiv>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cec:	f7fe face 	bl	800028c <__adddf3>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 8001cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cfc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d00:	f7fe feec 	bl	8000adc <__aeabi_dcmplt>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d004      	beq.n	8001d14 <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8001d0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d0e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d12:	e031      	b.n	8001d78 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 8001d14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d1c:	f7fe fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d028      	beq.n	8001d78 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 8001d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d2a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d2e:	e023      	b.n	8001d78 <compensate_pressure+0x388>
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40b86a00 	.word	0x40b86a00
 8001d38:	40ef4000 	.word	0x40ef4000
 8001d3c:	40e00000 	.word	0x40e00000
 8001d40:	40100000 	.word	0x40100000
 8001d44:	40f00000 	.word	0x40f00000
 8001d48:	41200000 	.word	0x41200000
 8001d4c:	3ff00000 	.word	0x3ff00000
 8001d50:	41300000 	.word	0x41300000
 8001d54:	40b00000 	.word	0x40b00000
 8001d58:	41e00000 	.word	0x41e00000
 8001d5c:	40300000 	.word	0x40300000
 8001d60:	00000000 	.word	0x00000000
 8001d64:	40dd4c00 	.word	0x40dd4c00
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8001d78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d7c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d80:	eeb0 0a47 	vmov.f32	s0, s14
 8001d84:	eef0 0a67 	vmov.f32	s1, s15
 8001d88:	3738      	adds	r7, #56	; 0x38
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d8e:	bf00      	nop

08001d90 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b094      	sub	sp, #80	; 0x50
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	4b81      	ldr	r3, [pc, #516]	; (8001fb0 <compensate_humidity+0x220>)
 8001dac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbb5 	bl	8000524 <__aeabi_i2d>
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <compensate_humidity+0x224>)
 8001dc0:	f7fe fa62 	bl	8000288 <__aeabi_dsub>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fba6 	bl	8000524 <__aeabi_i2d>
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <compensate_humidity+0x228>)
 8001dde:	f7fe fc0b 	bl	80005f8 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4614      	mov	r4, r2
 8001de8:	461d      	mov	r5, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fb97 	bl	8000524 <__aeabi_i2d>
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b70      	ldr	r3, [pc, #448]	; (8001fbc <compensate_humidity+0x22c>)
 8001dfc:	f7fe fd26 	bl	800084c <__aeabi_ddiv>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e0c:	f7fe fbf4 	bl	80005f8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fa38 	bl	800028c <__adddf3>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb6b 	bl	8000504 <__aeabi_ui2d>
 8001e2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e32:	f7fe fa29 	bl	8000288 <__aeabi_dsub>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <compensate_humidity+0x230>)
 8001e50:	f7fe fcfc 	bl	800084c <__aeabi_ddiv>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	7f1b      	ldrb	r3, [r3, #28]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fb4f 	bl	8000504 <__aeabi_ui2d>
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <compensate_humidity+0x234>)
 8001e6c:	f7fe fcee 	bl	800084c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e7c:	f7fe fbbc 	bl	80005f8 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	4610      	mov	r0, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <compensate_humidity+0x238>)
 8001e8e:	f7fe f9fd 	bl	800028c <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb3f 	bl	8000524 <__aeabi_i2d>
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <compensate_humidity+0x234>)
 8001eac:	f7fe fcce 	bl	800084c <__aeabi_ddiv>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b3a      	ldr	r3, [pc, #232]	; (8001fc8 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8001eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ef2:	f7fe fb81 	bl	80005f8 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4614      	mov	r4, r2
 8001efc:	461d      	mov	r5, r3
 8001efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f06:	f7fe fb77 	bl	80005f8 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4620      	mov	r0, r4
 8001f10:	4629      	mov	r1, r5
 8001f12:	f7fe fb71 	bl	80005f8 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	7e1b      	ldrb	r3, [r3, #24]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe faee 	bl	8000504 <__aeabi_ui2d>
 8001f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f2c:	f7fe fb64 	bl	80005f8 <__aeabi_dmul>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <compensate_humidity+0x23c>)
 8001f3e:	f7fe fc85 	bl	800084c <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	f04f 0000 	mov.w	r0, #0
 8001f4a:	491f      	ldr	r1, [pc, #124]	; (8001fc8 <compensate_humidity+0x238>)
 8001f4c:	f7fe f99c 	bl	8000288 <__aeabi_dsub>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f58:	f7fe fb4e 	bl	80005f8 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if (humidity > humidity_max)
 8001f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f68:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f6c:	f7fe fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d004      	beq.n	8001f80 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8001f76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f7a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001f7e:	e00c      	b.n	8001f9a <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8001f80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f84:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f88:	f7fe fda8 	bl	8000adc <__aeabi_dcmplt>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8001f92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f96:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 8001f9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f9e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001fa2:	eeb0 0a47 	vmov.f32	s0, s14
 8001fa6:	eef0 0a67 	vmov.f32	s1, s15
 8001faa:	3750      	adds	r7, #80	; 0x50
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb0:	40590000 	.word	0x40590000
 8001fb4:	40f2c000 	.word	0x40f2c000
 8001fb8:	40500000 	.word	0x40500000
 8001fbc:	40d00000 	.word	0x40d00000
 8001fc0:	40f00000 	.word	0x40f00000
 8001fc4:	41900000 	.word	0x41900000
 8001fc8:	3ff00000 	.word	0x3ff00000
 8001fcc:	41200000 	.word	0x41200000

08001fd0 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8001fd8:	2388      	movs	r3, #136	; 0x88
 8001fda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001ff4:	f107 010c 	add.w	r1, r7, #12
 8001ff8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	221a      	movs	r2, #26
 8002000:	f7fe ff99 	bl	8000f36 <bme280_get_regs>
 8002004:	4603      	mov	r3, r0
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 800200a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11d      	bne.n	800204e <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f84a 	bl	80020b2 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800201e:	23e1      	movs	r3, #225	; 0xe1
 8002020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002024:	f107 010c 	add.w	r1, r7, #12
 8002028:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2207      	movs	r2, #7
 8002030:	f7fe ff81 	bl	8000f36 <bme280_get_regs>
 8002034:	4603      	mov	r3, r0
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 800203a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4618      	mov	r0, r3
 800204a:	f000 f8e1 	bl	8002210 <parse_humidity_calib_data>
        }
    }

    return rslt;
 800204e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8002052:	4618      	mov	r0, r3
 8002054:	3728      	adds	r7, #40	; 0x28
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 800205a:	b480      	push	{r7}
 800205c:	b087      	sub	sp, #28
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8002068:	2301      	movs	r3, #1
 800206a:	75fb      	strb	r3, [r7, #23]
 800206c:	e016      	b.n	800209c <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	441a      	add	r2, r3
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	3b01      	subs	r3, #1
 800207a:	68b9      	ldr	r1, [r7, #8]
 800207c:	440b      	add	r3, r1
 800207e:	7812      	ldrb	r2, [r2, #0]
 8002080:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002082:	7dfb      	ldrb	r3, [r7, #23]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4619      	mov	r1, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	440b      	add	r3, r1
 8002092:	7812      	ldrb	r2, [r2, #0]
 8002094:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	3301      	adds	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
 800209c:	7dfa      	ldrb	r2, [r7, #23]
 800209e:	78fb      	ldrb	r3, [r7, #3]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d3e4      	bcc.n	800206e <interleave_reg_addr+0x14>
    }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	3310      	adds	r3, #16
 80020c0:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b21b      	sxth	r3, r3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3303      	adds	r3, #3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3302      	adds	r3, #2
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b21a      	sxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3305      	adds	r3, #5
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	021b      	lsls	r3, r3, #8
 80020fe:	b21a      	sxth	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3304      	adds	r3, #4
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b21b      	sxth	r3, r3
 8002108:	4313      	orrs	r3, r2
 800210a:	b21a      	sxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3307      	adds	r3, #7
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b21a      	sxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3306      	adds	r3, #6
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3309      	adds	r3, #9
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3308      	adds	r3, #8
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	330b      	adds	r3, #11
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	330a      	adds	r3, #10
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	330d      	adds	r3, #13
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	330c      	adds	r3, #12
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	330f      	adds	r3, #15
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b21a      	sxth	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	330e      	adds	r3, #14
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b21b      	sxth	r3, r3
 800218c:	4313      	orrs	r3, r2
 800218e:	b21a      	sxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3311      	adds	r3, #17
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
 800219c:	b21a      	sxth	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3310      	adds	r3, #16
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3313      	adds	r3, #19
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3312      	adds	r3, #18
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3315      	adds	r3, #21
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3314      	adds	r3, #20
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21a      	sxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3317      	adds	r3, #23
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3316      	adds	r3, #22
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e5a      	ldrb	r2, [r3, #25]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	3310      	adds	r3, #16
 800221e:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3301      	adds	r3, #1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	b21a      	sxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b21b      	sxth	r3, r3
 8002230:	4313      	orrs	r3, r2
 8002232:	b21a      	sxth	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	789a      	ldrb	r2, [r3, #2]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3303      	adds	r3, #3
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	b25b      	sxtb	r3, r3
 8002248:	b29b      	uxth	r3, r3
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	b29b      	uxth	r3, r3
 800224e:	827b      	strh	r3, [r7, #18]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3304      	adds	r3, #4
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b21b      	sxth	r3, r3
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	823b      	strh	r3, [r7, #16]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 800225e:	8a7a      	ldrh	r2, [r7, #18]
 8002260:	8a3b      	ldrh	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	b21a      	sxth	r2, r3
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3305      	adds	r3, #5
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b25b      	sxtb	r3, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	b29b      	uxth	r3, r3
 8002278:	81fb      	strh	r3, [r7, #14]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	b2db      	uxtb	r3, r3
 8002284:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002286:	89fa      	ldrh	r2, [r7, #14]
 8002288:	89bb      	ldrh	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	b21a      	sxth	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3306      	adds	r3, #6
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b25a      	sxtb	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	460a      	mov	r2, r1
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	4613      	mov	r3, r2
 80022ba:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	79bb      	ldrb	r3, [r7, #6]
 80022c4:	4013      	ands	r3, r2
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	e001      	b.n	80022d6 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <null_ptr_check+0x26>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <null_ptr_check+0x26>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <null_ptr_check+0x26>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800230a:	23ff      	movs	r3, #255	; 0xff
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e001      	b.n	8002314 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002314:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <I2C_Read>:
 * If success function returns 0.
 *
 * @param
 */
int8_t I2C_Read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af04      	add	r7, sp, #16
 800232a:	603a      	str	r2, [r7, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	460b      	mov	r3, r1
 8002334:	71bb      	strb	r3, [r7, #6]
 8002336:	4613      	mov	r3, r2
 8002338:	80bb      	strh	r3, [r7, #4]
	int8_t status = BME280_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, length, 100);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	b299      	uxth	r1, r3
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	b29a      	uxth	r2, r3
 8002346:	2364      	movs	r3, #100	; 0x64
 8002348:	9302      	str	r3, [sp, #8]
 800234a:	88bb      	ldrh	r3, [r7, #4]
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2301      	movs	r3, #1
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <I2C_Read+0x44>)
 8002356:	f001 f935 	bl	80035c4 <HAL_I2C_Mem_Read>
	return status;
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000264 	.word	0x20000264

0800236c <I2C_Write>:

int8_t I2C_Write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af04      	add	r7, sp, #16
 8002372:	603a      	str	r2, [r7, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	460b      	mov	r3, r1
 800237c:	71bb      	strb	r3, [r7, #6]
 800237e:	4613      	mov	r3, r2
 8002380:	80bb      	strh	r3, [r7, #4]
	int8_t status = BME280_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, length, 100);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	b299      	uxth	r1, r3
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	b29a      	uxth	r2, r3
 800238e:	2364      	movs	r3, #100	; 0x64
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	88bb      	ldrh	r3, [r7, #4]
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2301      	movs	r3, #1
 800239c:	4804      	ldr	r0, [pc, #16]	; (80023b0 <I2C_Write+0x44>)
 800239e:	f000 fffd 	bl	800339c <HAL_I2C_Mem_Write>
	return status;
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000264 	.word	0x20000264

080023b4 <BME280_Init>:

int8_t BME280_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
	int8_t status = BME280_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	71fb      	strb	r3, [r7, #7]
	uint8_t dev_settings;

	bme_dev.dev_id = (BME280_I2C_ADDR_PRIM<<1);
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <BME280_Init+0xb4>)
 80023c0:	22ec      	movs	r2, #236	; 0xec
 80023c2:	705a      	strb	r2, [r3, #1]
	bme_dev.intf = BME280_I2C_INTF;
 80023c4:	4b28      	ldr	r3, [pc, #160]	; (8002468 <BME280_Init+0xb4>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	709a      	strb	r2, [r3, #2]
	bme_dev.read = I2C_Read;
 80023ca:	4b27      	ldr	r3, [pc, #156]	; (8002468 <BME280_Init+0xb4>)
 80023cc:	4a27      	ldr	r2, [pc, #156]	; (800246c <BME280_Init+0xb8>)
 80023ce:	605a      	str	r2, [r3, #4]
	bme_dev.write = I2C_Write;
 80023d0:	4b25      	ldr	r3, [pc, #148]	; (8002468 <BME280_Init+0xb4>)
 80023d2:	4a27      	ldr	r2, [pc, #156]	; (8002470 <BME280_Init+0xbc>)
 80023d4:	609a      	str	r2, [r3, #8]
	bme_dev.delay_ms = DELAY_ms;
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <BME280_Init+0xb4>)
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <BME280_Init+0xc0>)
 80023da:	60da      	str	r2, [r3, #12]

	status = bme280_init(&bme_dev);
 80023dc:	4822      	ldr	r0, [pc, #136]	; (8002468 <BME280_Init+0xb4>)
 80023de:	f7fe fd5f 	bl	8000ea0 <bme280_init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]

	if(status == BME280_OK)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d136      	bne.n	800245c <BME280_Init+0xa8>
	{

		/* Recommended mode of operation: Indoor navigation */
		bme_dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <BME280_Init+0xb4>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		bme_dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <BME280_Init+0xb4>)
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		bme_dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <BME280_Init+0xb4>)
 8002400:	2202      	movs	r2, #2
 8002402:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		bme_dev.settings.filter = BME280_FILTER_COEFF_16;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <BME280_Init+0xb4>)
 8002408:	2204      	movs	r2, #4
 800240a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		bme_dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <BME280_Init+0xb4>)
 8002410:	2201      	movs	r2, #1
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		dev_settings = BME280_OSR_PRESS_SEL;
 8002416:	2301      	movs	r3, #1
 8002418:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_OSR_TEMP_SEL;
 800241a:	79bb      	ldrb	r3, [r7, #6]
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_OSR_HUM_SEL;
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_STANDBY_SEL;
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	f043 0310 	orr.w	r3, r3, #16
 8002430:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_FILTER_SEL;
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	71bb      	strb	r3, [r7, #6]

		status = bme280_set_sensor_settings(dev_settings, &bme_dev);
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	490a      	ldr	r1, [pc, #40]	; (8002468 <BME280_Init+0xb4>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fe22 	bl	8001088 <bme280_set_sensor_settings>
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]

		if(status == BME280_OK)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <BME280_Init+0xa8>
		{
			status = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme_dev);
 8002450:	4905      	ldr	r1, [pc, #20]	; (8002468 <BME280_Init+0xb4>)
 8002452:	2003      	movs	r0, #3
 8002454:	f7fe fe6d 	bl	8001132 <bme280_set_sensor_mode>
 8002458:	4603      	mov	r3, r0
 800245a:	71fb      	strb	r3, [r7, #7]
		}
	}

	return status;
 800245c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200001fc 	.word	0x200001fc
 800246c:	08002325 	.word	0x08002325
 8002470:	0800236d 	.word	0x0800236d
 8002474:	080027bd 	.word	0x080027bd

08002478 <BME280_Read_Data>:

int8_t BME280_Read_Data(struct bme280_data *received_data)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	int8_t status = BME280_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

	status = bme280_get_sensor_data(BME280_ALL, received_data, &bme_dev);
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <BME280_Read_Data+0x30>)
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	2007      	movs	r0, #7
 800248a:	f7fe fef4 	bl	8001276 <bme280_get_sensor_data>
 800248e:	4603      	mov	r3, r0
 8002490:	73fb      	strb	r3, [r7, #15]
	bme_dev.delay_ms(100);
 8002492:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <BME280_Read_Data+0x30>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	2064      	movs	r0, #100	; 0x64
 8002498:	4798      	blx	r3

	return status;
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200001fc 	.word	0x200001fc

080024ac <BME280_Print_Data>:

void BME280_Print_Data(struct bme280_data *bme_data)
{
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af04      	add	r7, sp, #16
 80024b2:	6078      	str	r0, [r7, #4]
	printf("Temperature, Pressure, Humidity\r\n");
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <BME280_Print_Data+0x3c>)
 80024b6:	f004 fc1b 	bl	8006cf0 <puts>
#ifdef BME280_FLOAT_ENABLE
	printf("%0.2f, %0.2f, %0.2f\r\n", bme_data->temperature, bme_data->pressure, bme_data->humidity);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80024cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80024d0:	e9cd 2300 	strd	r2, r3, [sp]
 80024d4:	4622      	mov	r2, r4
 80024d6:	462b      	mov	r3, r5
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <BME280_Print_Data+0x40>)
 80024da:	f004 fb83 	bl	8006be4 <iprintf>
#else
	printf("%d, %u, %u\r\n", bme_data->temperature, bme_data->pressure, bme_data->humidity);
#endif
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdb0      	pop	{r4, r5, r7, pc}
 80024e6:	bf00      	nop
 80024e8:	08008de8 	.word	0x08008de8
 80024ec:	08008e0c 	.word	0x08008e0c

080024f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_GPIO_Init+0x44>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <MX_GPIO_Init+0x44>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_GPIO_Init+0x44>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_GPIO_Init+0x44>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <MX_GPIO_Init+0x44>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_GPIO_Init+0x44>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	683b      	ldr	r3, [r7, #0]

}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000

08002538 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <MX_I2C1_Init+0x74>)
 800253e:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <MX_I2C1_Init+0x78>)
 8002540:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8002542:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <MX_I2C1_Init+0x74>)
 8002544:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <MX_I2C1_Init+0x7c>)
 8002546:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002548:	4b18      	ldr	r3, [pc, #96]	; (80025ac <MX_I2C1_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <MX_I2C1_Init+0x74>)
 8002550:	2201      	movs	r2, #1
 8002552:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <MX_I2C1_Init+0x74>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800255a:	4b14      	ldr	r3, [pc, #80]	; (80025ac <MX_I2C1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002560:	4b12      	ldr	r3, [pc, #72]	; (80025ac <MX_I2C1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <MX_I2C1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <MX_I2C1_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002572:	480e      	ldr	r0, [pc, #56]	; (80025ac <MX_I2C1_Init+0x74>)
 8002574:	f000 fe82 	bl	800327c <HAL_I2C_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800257e:	f000 f8fe 	bl	800277e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002582:	2100      	movs	r1, #0
 8002584:	4809      	ldr	r0, [pc, #36]	; (80025ac <MX_I2C1_Init+0x74>)
 8002586:	f001 fbdd 	bl	8003d44 <HAL_I2CEx_ConfigAnalogFilter>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002590:	f000 f8f5 	bl	800277e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002594:	2100      	movs	r1, #0
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <MX_I2C1_Init+0x74>)
 8002598:	f001 fc1f 	bl	8003dda <HAL_I2CEx_ConfigDigitalFilter>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025a2:	f000 f8ec 	bl	800277e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000264 	.word	0x20000264
 80025b0:	40005400 	.word	0x40005400
 80025b4:	10909cec 	.word	0x10909cec

080025b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b0ac      	sub	sp, #176	; 0xb0
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2288      	movs	r2, #136	; 0x88
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fe91 	bl	8006300 <memset>
  if(i2cHandle->Instance==I2C1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <HAL_I2C_MspInit+0xb0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d13b      	bne.n	8002660 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025e8:	2340      	movs	r3, #64	; 0x40
 80025ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4618      	mov	r0, r3
 80025f6:	f002 fa9f 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002600:	f000 f8bd 	bl	800277e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_I2C_MspInit+0xb4>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	4a18      	ldr	r2, [pc, #96]	; (800266c <HAL_I2C_MspInit+0xb4>)
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_I2C_MspInit+0xb4>)
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800261c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002624:	2312      	movs	r3, #18
 8002626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002636:	2304      	movs	r3, #4
 8002638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002640:	4619      	mov	r1, r3
 8002642:	480b      	ldr	r0, [pc, #44]	; (8002670 <HAL_I2C_MspInit+0xb8>)
 8002644:	f000 fc70 	bl	8002f28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_I2C_MspInit+0xb4>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <HAL_I2C_MspInit+0xb4>)
 800264e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002652:	6593      	str	r3, [r2, #88]	; 0x58
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_I2C_MspInit+0xb4>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002660:	bf00      	nop
 8002662:	37b0      	adds	r7, #176	; 0xb0
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40005400 	.word	0x40005400
 800266c:	40021000 	.word	0x40021000
 8002670:	48000400 	.word	0x48000400

08002674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002678:	f000 fafb 	bl	8002c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800267c:	f000 f82e 	bl	80026dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002680:	f7ff ff36 	bl	80024f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002684:	f7ff ff58 	bl	8002538 <MX_I2C1_Init>
  MX_TIM6_Init();
 8002688:	f000 f9d6 	bl	8002a38 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 800268c:	f000 fa3c 	bl	8002b08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 8002690:	480e      	ldr	r0, [pc, #56]	; (80026cc <main+0x58>)
 8002692:	f002 ff65 	bl	8005560 <HAL_TIM_Base_Start>
  if(BME280_Init() != BME280_OK)
 8002696:	f7ff fe8d 	bl	80023b4 <BME280_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <main+0x32>
  {
	  printf("Blad inicjalizacji BME280!\n");
 80026a0:	480b      	ldr	r0, [pc, #44]	; (80026d0 <main+0x5c>)
 80026a2:	f004 fb25 	bl	8006cf0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(BME280_Read_Data(&bme_received_data) != BME280_OK)
 80026a6:	480b      	ldr	r0, [pc, #44]	; (80026d4 <main+0x60>)
 80026a8:	f7ff fee6 	bl	8002478 <BME280_Read_Data>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <main+0x46>
	{
		printf("Blad odczytu BME280!\n");
 80026b2:	4809      	ldr	r0, [pc, #36]	; (80026d8 <main+0x64>)
 80026b4:	f004 fb1c 	bl	8006cf0 <puts>
 80026b8:	e002      	b.n	80026c0 <main+0x4c>
	}
	else
	{
		BME280_Print_Data(&bme_received_data);
 80026ba:	4806      	ldr	r0, [pc, #24]	; (80026d4 <main+0x60>)
 80026bc:	f7ff fef6 	bl	80024ac <BME280_Print_Data>
	}

	DELAY_ms(1000);
 80026c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c4:	f000 f87a 	bl	80027bc <DELAY_ms>
	if(BME280_Read_Data(&bme_received_data) != BME280_OK)
 80026c8:	e7ed      	b.n	80026a6 <main+0x32>
 80026ca:	bf00      	nop
 80026cc:	200002b8 	.word	0x200002b8
 80026d0:	08008e24 	.word	0x08008e24
 80026d4:	20000240 	.word	0x20000240
 80026d8:	08008e40 	.word	0x08008e40

080026dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b096      	sub	sp, #88	; 0x58
 80026e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	2244      	movs	r2, #68	; 0x44
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f003 fe08 	bl	8006300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f0:	463b      	mov	r3, r7
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80026fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002702:	f001 fbc5 	bl	8003e90 <HAL_PWREx_ControlVoltageScaling>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800270c:	f000 f837 	bl	800277e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002710:	2302      	movs	r3, #2
 8002712:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002718:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800271a:	2310      	movs	r3, #16
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800271e:	2302      	movs	r3, #2
 8002720:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002722:	2302      	movs	r3, #2
 8002724:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800272a:	230a      	movs	r3, #10
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800272e:	2307      	movs	r3, #7
 8002730:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002732:	2302      	movs	r3, #2
 8002734:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002736:	2302      	movs	r3, #2
 8002738:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4618      	mov	r0, r3
 8002740:	f001 fbfc 	bl	8003f3c <HAL_RCC_OscConfig>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800274a:	f000 f818 	bl	800277e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274e:	230f      	movs	r3, #15
 8002750:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002752:	2303      	movs	r3, #3
 8002754:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002762:	463b      	mov	r3, r7
 8002764:	2104      	movs	r1, #4
 8002766:	4618      	mov	r0, r3
 8002768:	f001 ffc2 	bl	80046f0 <HAL_RCC_ClockConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002772:	f000 f804 	bl	800277e <Error_Handler>
  }
}
 8002776:	bf00      	nop
 8002778:	3758      	adds	r7, #88	; 0x58
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002782:	b672      	cpsid	i
}
 8002784:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002786:	e7fe      	b.n	8002786 <Error_Handler+0x8>

08002788 <DELAY_us>:

#include "my_delay.h"
#include "tim.h"

void DELAY_us(uint16_t us)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <DELAY_us+0x30>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 800279a:	bf00      	nop
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <DELAY_us+0x30>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d3f9      	bcc.n	800279c <DELAY_us+0x14>
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200002b8 	.word	0x200002b8

080027bc <DELAY_ms>:

void DELAY_ms(uint16_t ms)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	81fb      	strh	r3, [r7, #14]

	while (counter < ms)
 80027ca:	e006      	b.n	80027da <DELAY_ms+0x1e>
	{
		DELAY_us(1000);
 80027cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027d0:	f7ff ffda 	bl	8002788 <DELAY_us>
		counter++;
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	3301      	adds	r3, #1
 80027d8:	81fb      	strh	r3, [r7, #14]
	while (counter < ms)
 80027da:	89fa      	ldrh	r2, [r7, #14]
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3f4      	bcc.n	80027cc <DELAY_ms+0x10>
	}
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_MspInit+0x44>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <HAL_MspInit+0x44>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6613      	str	r3, [r2, #96]	; 0x60
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_MspInit+0x44>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_MspInit+0x44>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_MspInit+0x44>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_MspInit+0x44>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <NMI_Handler+0x4>

0800283a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <HardFault_Handler+0x4>

08002840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <MemManage_Handler+0x4>

08002846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284a:	e7fe      	b.n	800284a <BusFault_Handler+0x4>

0800284c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <UsageFault_Handler+0x4>

08002852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002880:	f000 fa4c 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}

08002888 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
	return 1;
 800288c:	2301      	movs	r3, #1
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <_kill>:

int _kill(int pid, int sig)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028a2:	f003 fd03 	bl	80062ac <__errno>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2216      	movs	r2, #22
 80028aa:	601a      	str	r2, [r3, #0]
	return -1;
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_exit>:

void _exit (int status)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028c0:	f04f 31ff 	mov.w	r1, #4294967295
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ffe7 	bl	8002898 <_kill>
	while (1) {}		/* Make sure we hang here */
 80028ca:	e7fe      	b.n	80028ca <_exit+0x12>

080028cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e00a      	b.n	80028f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028de:	f3af 8000 	nop.w
 80028e2:	4601      	mov	r1, r0
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	60ba      	str	r2, [r7, #8]
 80028ea:	b2ca      	uxtb	r2, r1
 80028ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf0      	blt.n	80028de <_read+0x12>
	}

return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	e009      	b.n	800292c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	60ba      	str	r2, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f8df 	bl	8002ae4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	dbf1      	blt.n	8002918 <_write+0x12>
	}
	return len;
 8002934:	687b      	ldr	r3, [r7, #4]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <_close>:

int _close(int file)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
	return -1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800294a:	4618      	mov	r0, r3
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
 800295e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002966:	605a      	str	r2, [r3, #4]
	return 0;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <_isatty>:

int _isatty(int file)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
	return 1;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
	return 0;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <_sbrk+0x5c>)
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <_sbrk+0x60>)
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <_sbrk+0x64>)
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <_sbrk+0x68>)
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <_sbrk+0x64>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d207      	bcs.n	80029e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029d8:	f003 fc68 	bl	80062ac <__errno>
 80029dc:	4603      	mov	r3, r0
 80029de:	220c      	movs	r2, #12
 80029e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	e009      	b.n	80029fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <_sbrk+0x64>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <_sbrk+0x64>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	4a05      	ldr	r2, [pc, #20]	; (8002a0c <_sbrk+0x64>)
 80029f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20018000 	.word	0x20018000
 8002a08:	00000400 	.word	0x00000400
 8002a0c:	20000258 	.word	0x20000258
 8002a10:	200003a0 	.word	0x200003a0

08002a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <SystemInit+0x20>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	4a05      	ldr	r2, [pc, #20]	; (8002a34 <SystemInit+0x20>)
 8002a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002a48:	4b14      	ldr	r3, [pc, #80]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <MX_TIM6_Init+0x68>)
 8002a4c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a50:	224f      	movs	r2, #79	; 0x4f
 8002a52:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002a60:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a62:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a68:	480c      	ldr	r0, [pc, #48]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a6a:	f002 fd21 	bl	80054b0 <HAL_TIM_Base_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002a74:	f7ff fe83 	bl	800277e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_TIM6_Init+0x64>)
 8002a86:	f002 fe6d 	bl	8005764 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002a90:	f7ff fe75 	bl	800277e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200002b8 	.word	0x200002b8
 8002aa0:	40001000 	.word	0x40001000

08002aa4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <HAL_TIM_Base_MspInit+0x38>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d10b      	bne.n	8002ace <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8002abc:	f043 0310 	orr.w	r3, r3, #16
 8002ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac2:	4b07      	ldr	r3, [pc, #28]	; (8002ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40001000 	.word	0x40001000
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 8002aec:	1d39      	adds	r1, r7, #4
 8002aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af2:	2201      	movs	r2, #1
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <__io_putchar+0x20>)
 8002af6:	f002 ff0b 	bl	8005910 <HAL_UART_Transmit>
	return ch;
 8002afa:	687b      	ldr	r3, [r7, #4]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000304 	.word	0x20000304

08002b08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b0c:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <MX_USART2_UART_Init+0x5c>)
 8002b10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1a:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b20:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b26:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b2e:	220c      	movs	r2, #12
 8002b30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b38:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_USART2_UART_Init+0x58>)
 8002b4c:	f002 fe92 	bl	8005874 <HAL_UART_Init>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b56:	f7ff fe12 	bl	800277e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000304 	.word	0x20000304
 8002b64:	40004400 	.word	0x40004400

08002b68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b0ac      	sub	sp, #176	; 0xb0
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2288      	movs	r2, #136	; 0x88
 8002b86:	2100      	movs	r1, #0
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fbb9 	bl	8006300 <memset>
  if(uartHandle->Instance==USART2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <HAL_UART_MspInit+0xb0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d13b      	bne.n	8002c10 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 ffc7 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bb0:	f7ff fde5 	bl	800277e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_UART_MspInit+0xb4>)
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <HAL_UART_MspInit+0xb4>)
 8002bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_UART_MspInit+0xb4>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc8:	613b      	str	r3, [r7, #16]
 8002bca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bcc:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_UART_MspInit+0xb4>)
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <HAL_UART_MspInit+0xb4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_UART_MspInit+0xb4>)
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002be4:	230c      	movs	r3, #12
 8002be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bea:	2302      	movs	r3, #2
 8002bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c06:	4619      	mov	r1, r3
 8002c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0c:	f000 f98c 	bl	8002f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c10:	bf00      	nop
 8002c12:	37b0      	adds	r7, #176	; 0xb0
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40004400 	.word	0x40004400
 8002c1c:	40021000 	.word	0x40021000

08002c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c24:	f7ff fef6 	bl	8002a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c2a:	490d      	ldr	r1, [pc, #52]	; (8002c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <LoopForever+0xe>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c40:	4c0a      	ldr	r4, [pc, #40]	; (8002c6c <LoopForever+0x16>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c4e:	f003 fb33 	bl	80062b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c52:	f7ff fd0f 	bl	8002674 <main>

08002c56 <LoopForever>:

LoopForever:
    b LoopForever
 8002c56:	e7fe      	b.n	8002c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c64:	08009294 	.word	0x08009294
  ldr r2, =_sbss
 8002c68:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c6c:	2000039c 	.word	0x2000039c

08002c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c70:	e7fe      	b.n	8002c70 <ADC1_2_IRQHandler>

08002c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c7c:	2003      	movs	r0, #3
 8002c7e:	f000 f91f 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c82:	200f      	movs	r0, #15
 8002c84:	f000 f80e 	bl	8002ca4 <HAL_InitTick>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	71fb      	strb	r3, [r7, #7]
 8002c92:	e001      	b.n	8002c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c94:	f7ff fdaa 	bl	80027ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c98:	79fb      	ldrb	r3, [r7, #7]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002cb0:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <HAL_InitTick+0x6c>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <HAL_InitTick+0x70>)
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_InitTick+0x6c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f91d 	bl	8002f0e <HAL_SYSTICK_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10f      	bne.n	8002cfa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d809      	bhi.n	8002cf4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f000 f8f5 	bl	8002ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_InitTick+0x74>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e007      	b.n	8002d04 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e004      	b.n	8002d04 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	e001      	b.n	8002d04 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20000008 	.word	0x20000008
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	20000388 	.word	0x20000388

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000388 	.word	0x20000388

08002d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <__NVIC_SetPriorityGrouping+0x44>)
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	60d3      	str	r3, [r2, #12]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da8:	4b04      	ldr	r3, [pc, #16]	; (8002dbc <__NVIC_GetPriorityGrouping+0x18>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	f003 0307 	and.w	r3, r3, #7
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	e000ed00 	.word	0xe000ed00

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff47 	bl	8002d5c <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee8:	f7ff ff5c 	bl	8002da4 <__NVIC_GetPriorityGrouping>
 8002eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	6978      	ldr	r0, [r7, #20]
 8002ef4:	f7ff ff8e 	bl	8002e14 <NVIC_EncodePriority>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efe:	4611      	mov	r1, r2
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff5d 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f06:	bf00      	nop
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffb0 	bl	8002e7c <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f32:	2300      	movs	r3, #0
 8002f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f36:	e17f      	b.n	8003238 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	fa01 f303 	lsl.w	r3, r1, r3
 8002f44:	4013      	ands	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8171 	beq.w	8003232 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d005      	beq.n	8002f68 <HAL_GPIO_Init+0x40>
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d130      	bne.n	8002fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	2203      	movs	r2, #3
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4013      	ands	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	091b      	lsrs	r3, r3, #4
 8002fb4:	f003 0201 	and.w	r2, r3, #1
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d118      	bne.n	8003008 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	08db      	lsrs	r3, r3, #3
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d017      	beq.n	8003044 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	2203      	movs	r2, #3
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43db      	mvns	r3, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d123      	bne.n	8003098 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	08da      	lsrs	r2, r3, #3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3208      	adds	r2, #8
 8003058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	220f      	movs	r2, #15
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	6939      	ldr	r1, [r7, #16]
 8003094:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0203 	and.w	r2, r3, #3
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80ac 	beq.w	8003232 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <HAL_GPIO_Init+0x330>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	4a5e      	ldr	r2, [pc, #376]	; (8003258 <HAL_GPIO_Init+0x330>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6613      	str	r3, [r2, #96]	; 0x60
 80030e6:	4b5c      	ldr	r3, [pc, #368]	; (8003258 <HAL_GPIO_Init+0x330>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030f2:	4a5a      	ldr	r2, [pc, #360]	; (800325c <HAL_GPIO_Init+0x334>)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800311c:	d025      	beq.n	800316a <HAL_GPIO_Init+0x242>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4f      	ldr	r2, [pc, #316]	; (8003260 <HAL_GPIO_Init+0x338>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d01f      	beq.n	8003166 <HAL_GPIO_Init+0x23e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4e      	ldr	r2, [pc, #312]	; (8003264 <HAL_GPIO_Init+0x33c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d019      	beq.n	8003162 <HAL_GPIO_Init+0x23a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4d      	ldr	r2, [pc, #308]	; (8003268 <HAL_GPIO_Init+0x340>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_GPIO_Init+0x236>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_GPIO_Init+0x344>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00d      	beq.n	800315a <HAL_GPIO_Init+0x232>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4b      	ldr	r2, [pc, #300]	; (8003270 <HAL_GPIO_Init+0x348>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <HAL_GPIO_Init+0x22e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4a      	ldr	r2, [pc, #296]	; (8003274 <HAL_GPIO_Init+0x34c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d101      	bne.n	8003152 <HAL_GPIO_Init+0x22a>
 800314e:	2306      	movs	r3, #6
 8003150:	e00c      	b.n	800316c <HAL_GPIO_Init+0x244>
 8003152:	2307      	movs	r3, #7
 8003154:	e00a      	b.n	800316c <HAL_GPIO_Init+0x244>
 8003156:	2305      	movs	r3, #5
 8003158:	e008      	b.n	800316c <HAL_GPIO_Init+0x244>
 800315a:	2304      	movs	r3, #4
 800315c:	e006      	b.n	800316c <HAL_GPIO_Init+0x244>
 800315e:	2303      	movs	r3, #3
 8003160:	e004      	b.n	800316c <HAL_GPIO_Init+0x244>
 8003162:	2302      	movs	r3, #2
 8003164:	e002      	b.n	800316c <HAL_GPIO_Init+0x244>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_GPIO_Init+0x244>
 800316a:	2300      	movs	r3, #0
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	f002 0203 	and.w	r2, r2, #3
 8003172:	0092      	lsls	r2, r2, #2
 8003174:	4093      	lsls	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800317c:	4937      	ldr	r1, [pc, #220]	; (800325c <HAL_GPIO_Init+0x334>)
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	3302      	adds	r3, #2
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800318a:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <HAL_GPIO_Init+0x350>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ae:	4a32      	ldr	r2, [pc, #200]	; (8003278 <HAL_GPIO_Init+0x350>)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_GPIO_Init+0x350>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_GPIO_Init+0x350>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031de:	4b26      	ldr	r3, [pc, #152]	; (8003278 <HAL_GPIO_Init+0x350>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003202:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_GPIO_Init+0x350>)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_GPIO_Init+0x350>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_GPIO_Init+0x350>)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	3301      	adds	r3, #1
 8003236:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	f47f ae78 	bne.w	8002f38 <HAL_GPIO_Init+0x10>
  }
}
 8003248:	bf00      	nop
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000
 8003260:	48000400 	.word	0x48000400
 8003264:	48000800 	.word	0x48000800
 8003268:	48000c00 	.word	0x48000c00
 800326c:	48001000 	.word	0x48001000
 8003270:	48001400 	.word	0x48001400
 8003274:	48001800 	.word	0x48001800
 8003278:	40010400 	.word	0x40010400

0800327c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e081      	b.n	8003392 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff f988 	bl	80025b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	; 0x24
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d107      	bne.n	80032f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	e006      	b.n	8003304 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003302:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d104      	bne.n	8003316 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69d9      	ldr	r1, [r3, #28]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	f040 80f9 	bne.w	80035b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x34>
 80033ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0ed      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Mem_Write+0x4e>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e0e6      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033f2:	f7ff fca7 	bl	8002d44 <HAL_GetTick>
 80033f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	2319      	movs	r3, #25
 80033fe:	2201      	movs	r2, #1
 8003400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fac3 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d1      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800343c:	88f8      	ldrh	r0, [r7, #6]
 800343e:	893a      	ldrh	r2, [r7, #8]
 8003440:	8979      	ldrh	r1, [r7, #10]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	9301      	str	r3, [sp, #4]
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	4603      	mov	r3, r0
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f9d3 	bl	80037f8 <I2C_RequestMemoryWrite>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0a9      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2bff      	cmp	r3, #255	; 0xff
 800346c:	d90e      	bls.n	800348c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	22ff      	movs	r2, #255	; 0xff
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003478:	b2da      	uxtb	r2, r3
 800347a:	8979      	ldrh	r1, [r7, #10]
 800347c:	2300      	movs	r3, #0
 800347e:	9300      	str	r3, [sp, #0]
 8003480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fc2b 	bl	8003ce0 <I2C_TransferConfig>
 800348a:	e00f      	b.n	80034ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349a:	b2da      	uxtb	r2, r3
 800349c:	8979      	ldrh	r1, [r7, #10]
 800349e:	2300      	movs	r3, #0
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 fc1a 	bl	8003ce0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 faad 	bl	8003a10 <I2C_WaitOnTXISFlagUntilTimeout>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e07b      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d034      	beq.n	8003564 <HAL_I2C_Mem_Write+0x1c8>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d130      	bne.n	8003564 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	2200      	movs	r2, #0
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fa3f 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e04d      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	2bff      	cmp	r3, #255	; 0xff
 8003524:	d90e      	bls.n	8003544 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	22ff      	movs	r2, #255	; 0xff
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003530:	b2da      	uxtb	r2, r3
 8003532:	8979      	ldrh	r1, [r7, #10]
 8003534:	2300      	movs	r3, #0
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fbcf 	bl	8003ce0 <I2C_TransferConfig>
 8003542:	e00f      	b.n	8003564 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	b2da      	uxtb	r2, r3
 8003554:	8979      	ldrh	r1, [r7, #10]
 8003556:	2300      	movs	r3, #0
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fbbe 	bl	8003ce0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d19e      	bne.n	80034ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fa8c 	bl	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e01a      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2220      	movs	r2, #32
 8003588:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6859      	ldr	r1, [r3, #4]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <HAL_I2C_Mem_Write+0x224>)
 8003596:	400b      	ands	r3, r1
 8003598:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
  }
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	fe00e800 	.word	0xfe00e800

080035c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	461a      	mov	r2, r3
 80035d2:	4603      	mov	r3, r0
 80035d4:	817b      	strh	r3, [r7, #10]
 80035d6:	460b      	mov	r3, r1
 80035d8:	813b      	strh	r3, [r7, #8]
 80035da:	4613      	mov	r3, r2
 80035dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	f040 80fd 	bne.w	80037e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_I2C_Mem_Read+0x34>
 80035f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d105      	bne.n	8003604 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0f1      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Mem_Read+0x4e>
 800360e:	2302      	movs	r3, #2
 8003610:	e0ea      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800361a:	f7ff fb93 	bl	8002d44 <HAL_GetTick>
 800361e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	2319      	movs	r3, #25
 8003626:	2201      	movs	r2, #1
 8003628:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 f9af 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0d5      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2222      	movs	r2, #34	; 0x22
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003664:	88f8      	ldrh	r0, [r7, #6]
 8003666:	893a      	ldrh	r2, [r7, #8]
 8003668:	8979      	ldrh	r1, [r7, #10]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4603      	mov	r3, r0
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f913 	bl	80038a0 <I2C_RequestMemoryRead>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0ad      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29b      	uxth	r3, r3
 8003692:	2bff      	cmp	r3, #255	; 0xff
 8003694:	d90e      	bls.n	80036b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	8979      	ldrh	r1, [r7, #10]
 80036a4:	4b52      	ldr	r3, [pc, #328]	; (80037f0 <HAL_I2C_Mem_Read+0x22c>)
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fb17 	bl	8003ce0 <I2C_TransferConfig>
 80036b2:	e00f      	b.n	80036d4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	8979      	ldrh	r1, [r7, #10]
 80036c6:	4b4a      	ldr	r3, [pc, #296]	; (80037f0 <HAL_I2C_Mem_Read+0x22c>)
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fb06 	bl	8003ce0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	2200      	movs	r2, #0
 80036dc:	2104      	movs	r1, #4
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f956 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07c      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d034      	beq.n	8003794 <HAL_I2C_Mem_Read+0x1d0>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b00      	cmp	r3, #0
 8003730:	d130      	bne.n	8003794 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	2200      	movs	r2, #0
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f927 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e04d      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	2bff      	cmp	r3, #255	; 0xff
 8003754:	d90e      	bls.n	8003774 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	22ff      	movs	r2, #255	; 0xff
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	b2da      	uxtb	r2, r3
 8003762:	8979      	ldrh	r1, [r7, #10]
 8003764:	2300      	movs	r3, #0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fab7 	bl	8003ce0 <I2C_TransferConfig>
 8003772:	e00f      	b.n	8003794 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	b2da      	uxtb	r2, r3
 8003784:	8979      	ldrh	r1, [r7, #10]
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 faa6 	bl	8003ce0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d19a      	bne.n	80036d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f974 	bl	8003a90 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e01a      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2220      	movs	r2, #32
 80037b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6859      	ldr	r1, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_I2C_Mem_Read+0x230>)
 80037c6:	400b      	ands	r3, r1
 80037c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e000      	b.n	80037e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037e6:	2302      	movs	r3, #2
  }
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	80002400 	.word	0x80002400
 80037f4:	fe00e800 	.word	0xfe00e800

080037f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	4608      	mov	r0, r1
 8003802:	4611      	mov	r1, r2
 8003804:	461a      	mov	r2, r3
 8003806:	4603      	mov	r3, r0
 8003808:	817b      	strh	r3, [r7, #10]
 800380a:	460b      	mov	r3, r1
 800380c:	813b      	strh	r3, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	b2da      	uxtb	r2, r3
 8003816:	8979      	ldrh	r1, [r7, #10]
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <I2C_RequestMemoryWrite+0xa4>)
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa5d 	bl	8003ce0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	69b9      	ldr	r1, [r7, #24]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8f0 	bl	8003a10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e02c      	b.n	8003894 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
 800384a:	e015      	b.n	8003878 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	b29b      	uxth	r3, r3
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385a:	69fa      	ldr	r2, [r7, #28]
 800385c:	69b9      	ldr	r1, [r7, #24]
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f8d6 	bl	8003a10 <I2C_WaitOnTXISFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e012      	b.n	8003894 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800386e:	893b      	ldrh	r3, [r7, #8]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f884 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	80002000 	.word	0x80002000

080038a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	817b      	strh	r3, [r7, #10]
 80038b2:	460b      	mov	r3, r1
 80038b4:	813b      	strh	r3, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <I2C_RequestMemoryRead+0xa4>)
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fa0a 	bl	8003ce0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f89d 	bl	8003a10 <I2C_WaitOnTXISFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e02c      	b.n	800393a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038e6:	893b      	ldrh	r3, [r7, #8]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
 80038f0:	e015      	b.n	800391e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038f2:	893b      	ldrh	r3, [r7, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f883 	bl	8003a10 <I2C_WaitOnTXISFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e012      	b.n	800393a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003914:	893b      	ldrh	r3, [r7, #8]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 f831 	bl	8003990 <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	80002000 	.word	0x80002000

08003948 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d103      	bne.n	8003966 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2200      	movs	r2, #0
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d007      	beq.n	8003984 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	619a      	str	r2, [r3, #24]
  }
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039a0:	e022      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d01e      	beq.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039aa:	f7ff f9cb 	bl	8002d44 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d302      	bcc.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e00f      	b.n	8003a08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699a      	ldr	r2, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4013      	ands	r3, r2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	461a      	mov	r2, r3
 8003a00:	79fb      	ldrb	r3, [r7, #7]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d0cd      	beq.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a1c:	e02c      	b.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f870 	bl	8003b08 <I2C_IsErrorOccurred>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e02a      	b.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d01e      	beq.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7ff f983 	bl	8002d44 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e007      	b.n	8003a88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d1cb      	bne.n	8003a1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a9c:	e028      	b.n	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f830 	bl	8003b08 <I2C_IsErrorOccurred>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e026      	b.n	8003b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab2:	f7ff f947 	bl	8002d44 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d302      	bcc.n	8003ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d113      	bne.n	8003af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f043 0220 	orr.w	r2, r3, #32
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e007      	b.n	8003b00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b20      	cmp	r3, #32
 8003afc:	d1cf      	bne.n	8003a9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d075      	beq.n	8003c20 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b3c:	e056      	b.n	8003bec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d052      	beq.n	8003bec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7ff f8fd 	bl	8002d44 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <I2C_IsErrorOccurred+0x54>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d147      	bne.n	8003bec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7e:	d12e      	bne.n	8003bde <I2C_IsErrorOccurred+0xd6>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b86:	d02a      	beq.n	8003bde <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	2b20      	cmp	r3, #32
 8003b8c:	d027      	beq.n	8003bde <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003b9e:	f7ff f8d1 	bl	8002d44 <HAL_GetTick>
 8003ba2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba4:	e01b      	b.n	8003bde <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ba6:	f7ff f8cd 	bl	8002d44 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b19      	cmp	r3, #25
 8003bb2:	d914      	bls.n	8003bde <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d1dc      	bne.n	8003ba6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0320 	and.w	r3, r3, #32
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d003      	beq.n	8003c02 <I2C_IsErrorOccurred+0xfa>
 8003bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d09d      	beq.n	8003b3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00b      	beq.n	8003c6c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00b      	beq.n	8003c8e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01c      	beq.n	8003cd0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff fe56 	bl	8003948 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6859      	ldr	r1, [r3, #4]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <I2C_IsErrorOccurred+0x1d4>)
 8003ca8:	400b      	ands	r3, r1
 8003caa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3728      	adds	r7, #40	; 0x28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	fe00e800 	.word	0xfe00e800

08003ce0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	817b      	strh	r3, [r7, #10]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf2:	897b      	ldrh	r3, [r7, #10]
 8003cf4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cf8:	7a7b      	ldrb	r3, [r7, #9]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	0d5b      	lsrs	r3, r3, #21
 8003d1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d1e:	4b08      	ldr	r3, [pc, #32]	; (8003d40 <I2C_TransferConfig+0x60>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	43db      	mvns	r3, r3
 8003d24:	ea02 0103 	and.w	r1, r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d32:	bf00      	nop
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	03ff63ff 	.word	0x03ff63ff

08003d44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d138      	bne.n	8003dcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e032      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2224      	movs	r2, #36	; 0x24
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0201 	bic.w	r2, r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d139      	bne.n	8003e64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e033      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2224      	movs	r2, #36	; 0x24
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0201 	bic.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	e000      	b.n	8003e66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9e:	d130      	bne.n	8003f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea0:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eac:	d038      	beq.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2232      	movs	r2, #50	; 0x32
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0c9b      	lsrs	r3, r3, #18
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ed4:	e002      	b.n	8003edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee8:	d102      	bne.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f2      	bne.n	8003ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d110      	bne.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e00f      	b.n	8003f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f02:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0e:	d007      	beq.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f18:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40007000 	.word	0x40007000
 8003f34:	20000000 	.word	0x20000000
 8003f38:	431bde83 	.word	0x431bde83

08003f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e3c6      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f4e:	4ba1      	ldr	r3, [pc, #644]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f58:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80e4 	beq.w	8004138 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_RCC_OscConfig+0x4a>
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	f040 808b 	bne.w	8004094 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	f040 8087 	bne.w	8004094 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f86:	4b93      	ldr	r3, [pc, #588]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_RCC_OscConfig+0x62>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e39e      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	4b8c      	ldr	r3, [pc, #560]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d004      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x7c>
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCC_OscConfig+0x88>
 8003fb8:	4b86      	ldr	r3, [pc, #536]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fbe:	091b      	lsrs	r3, r3, #4
 8003fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d223      	bcs.n	8004010 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 fd53 	bl	8004a78 <RCC_SetFlashLatencyFromMSIRange>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e37f      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fdc:	4b7d      	ldr	r3, [pc, #500]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a7c      	ldr	r2, [pc, #496]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003fe2:	f043 0308 	orr.w	r3, r3, #8
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4b7a      	ldr	r3, [pc, #488]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4977      	ldr	r1, [pc, #476]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ffa:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	4972      	ldr	r1, [pc, #456]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800400a:	4313      	orrs	r3, r2
 800400c:	604b      	str	r3, [r1, #4]
 800400e:	e025      	b.n	800405c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004010:	4b70      	ldr	r3, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6f      	ldr	r2, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004016:	f043 0308 	orr.w	r3, r3, #8
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b6d      	ldr	r3, [pc, #436]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	496a      	ldr	r1, [pc, #424]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402e:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4965      	ldr	r1, [pc, #404]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fd13 	bl	8004a78 <RCC_SetFlashLatencyFromMSIRange>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e33f      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800405c:	f000 fc48 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b5c      	ldr	r3, [pc, #368]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 030f 	and.w	r3, r3, #15
 800406c:	495a      	ldr	r1, [pc, #360]	; (80041d8 <HAL_RCC_OscConfig+0x29c>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
 8004078:	4a58      	ldr	r2, [pc, #352]	; (80041dc <HAL_RCC_OscConfig+0x2a0>)
 800407a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800407c:	4b58      	ldr	r3, [pc, #352]	; (80041e0 <HAL_RCC_OscConfig+0x2a4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fe0f 	bl	8002ca4 <HAL_InitTick>
 8004086:	4603      	mov	r3, r0
 8004088:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d052      	beq.n	8004136 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	e323      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d032      	beq.n	8004102 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800409c:	4b4d      	ldr	r3, [pc, #308]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a4c      	ldr	r2, [pc, #304]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040a8:	f7fe fe4c 	bl	8002d44 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040b0:	f7fe fe48 	bl	8002d44 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e30c      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040c2:	4b44      	ldr	r3, [pc, #272]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b3e      	ldr	r3, [pc, #248]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	493b      	ldr	r1, [pc, #236]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ec:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	4936      	ldr	r1, [pc, #216]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	604b      	str	r3, [r1, #4]
 8004100:	e01a      	b.n	8004138 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004102:	4b34      	ldr	r3, [pc, #208]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a33      	ldr	r2, [pc, #204]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800410e:	f7fe fe19 	bl	8002d44 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004114:	e008      	b.n	8004128 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004116:	f7fe fe15 	bl	8002d44 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e2d9      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004128:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCC_OscConfig+0x1da>
 8004134:	e000      	b.n	8004138 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004136:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d074      	beq.n	800422e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d005      	beq.n	8004156 <HAL_RCC_OscConfig+0x21a>
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	d10e      	bne.n	800416e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d10b      	bne.n	800416e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004156:	4b1f      	ldr	r3, [pc, #124]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d064      	beq.n	800422c <HAL_RCC_OscConfig+0x2f0>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d160      	bne.n	800422c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e2b6      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004176:	d106      	bne.n	8004186 <HAL_RCC_OscConfig+0x24a>
 8004178:	4b16      	ldr	r3, [pc, #88]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800417e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004182:	6013      	str	r3, [r2, #0]
 8004184:	e01d      	b.n	80041c2 <HAL_RCC_OscConfig+0x286>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800418e:	d10c      	bne.n	80041aa <HAL_RCC_OscConfig+0x26e>
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0f      	ldr	r2, [pc, #60]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 8004196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	4b0d      	ldr	r3, [pc, #52]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0c      	ldr	r2, [pc, #48]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80041a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e00b      	b.n	80041c2 <HAL_RCC_OscConfig+0x286>
 80041aa:	4b0a      	ldr	r3, [pc, #40]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <HAL_RCC_OscConfig+0x298>)
 80041bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01c      	beq.n	8004204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fe fdbb 	bl	8002d44 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041d0:	e011      	b.n	80041f6 <HAL_RCC_OscConfig+0x2ba>
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	08008e58 	.word	0x08008e58
 80041dc:	20000000 	.word	0x20000000
 80041e0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fe fdae 	bl	8002d44 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e272      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4baf      	ldr	r3, [pc, #700]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2a8>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fe fd9e 	bl	8002d44 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7fe fd9a 	bl	8002d44 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e25e      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421e:	4ba5      	ldr	r3, [pc, #660]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0x2d0>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d060      	beq.n	80042fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b04      	cmp	r3, #4
 800423e:	d005      	beq.n	800424c <HAL_RCC_OscConfig+0x310>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b0c      	cmp	r3, #12
 8004244:	d119      	bne.n	800427a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d116      	bne.n	800427a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	4b99      	ldr	r3, [pc, #612]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <HAL_RCC_OscConfig+0x328>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e23b      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b93      	ldr	r3, [pc, #588]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	4990      	ldr	r1, [pc, #576]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004274:	4313      	orrs	r3, r2
 8004276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004278:	e040      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d023      	beq.n	80042ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004282:	4b8c      	ldr	r3, [pc, #560]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a8b      	ldr	r2, [pc, #556]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7fe fd59 	bl	8002d44 <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004296:	f7fe fd55 	bl	8002d44 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e219      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a8:	4b82      	ldr	r3, [pc, #520]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	497c      	ldr	r1, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
 80042c8:	e018      	b.n	80042fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b7a      	ldr	r3, [pc, #488]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80042d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fe fd35 	bl	8002d44 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042de:	f7fe fd31 	bl	8002d44 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e1f5      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042f0:	4b70      	ldr	r3, [pc, #448]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0308 	and.w	r3, r3, #8
 8004304:	2b00      	cmp	r3, #0
 8004306:	d03c      	beq.n	8004382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01c      	beq.n	800434a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004310:	4b68      	ldr	r3, [pc, #416]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	4a67      	ldr	r2, [pc, #412]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004320:	f7fe fd10 	bl	8002d44 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004328:	f7fe fd0c 	bl	8002d44 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1d0      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800433a:	4b5e      	ldr	r3, [pc, #376]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ef      	beq.n	8004328 <HAL_RCC_OscConfig+0x3ec>
 8004348:	e01b      	b.n	8004382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800434a:	4b5a      	ldr	r3, [pc, #360]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	4a58      	ldr	r2, [pc, #352]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435a:	f7fe fcf3 	bl	8002d44 <HAL_GetTick>
 800435e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004360:	e008      	b.n	8004374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004362:	f7fe fcef 	bl	8002d44 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d901      	bls.n	8004374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e1b3      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004374:	4b4f      	ldr	r3, [pc, #316]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1ef      	bne.n	8004362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80a6 	beq.w	80044dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004390:	2300      	movs	r3, #0
 8004392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004394:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10d      	bne.n	80043bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043a0:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	4a43      	ldr	r2, [pc, #268]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6593      	str	r3, [r2, #88]	; 0x58
 80043ac:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 80043ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043bc:	4b3e      	ldr	r3, [pc, #248]	; (80044b8 <HAL_RCC_OscConfig+0x57c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d118      	bne.n	80043fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c8:	4b3b      	ldr	r3, [pc, #236]	; (80044b8 <HAL_RCC_OscConfig+0x57c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a3a      	ldr	r2, [pc, #232]	; (80044b8 <HAL_RCC_OscConfig+0x57c>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d4:	f7fe fcb6 	bl	8002d44 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043dc:	f7fe fcb2 	bl	8002d44 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e176      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCC_OscConfig+0x57c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d108      	bne.n	8004414 <HAL_RCC_OscConfig+0x4d8>
 8004402:	4b2c      	ldr	r3, [pc, #176]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004408:	4a2a      	ldr	r2, [pc, #168]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 800440a:	f043 0301 	orr.w	r3, r3, #1
 800440e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004412:	e024      	b.n	800445e <HAL_RCC_OscConfig+0x522>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b05      	cmp	r3, #5
 800441a:	d110      	bne.n	800443e <HAL_RCC_OscConfig+0x502>
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004424:	f043 0304 	orr.w	r3, r3, #4
 8004428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800442c:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004434:	f043 0301 	orr.w	r3, r3, #1
 8004438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800443c:	e00f      	b.n	800445e <HAL_RCC_OscConfig+0x522>
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004454:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004456:	f023 0304 	bic.w	r3, r3, #4
 800445a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe fc6d 	bl	8002d44 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fe fc69 	bl	8002d44 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e12b      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004484:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_OscConfig+0x578>)
 8004486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ed      	beq.n	800446e <HAL_RCC_OscConfig+0x532>
 8004492:	e01a      	b.n	80044ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fe fc56 	bl	8002d44 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800449a:	e00f      	b.n	80044bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fe fc52 	bl	8002d44 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d906      	bls.n	80044bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e114      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044bc:	4b89      	ldr	r3, [pc, #548]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e8      	bne.n	800449c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d105      	bne.n	80044dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044d0:	4b84      	ldr	r3, [pc, #528]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80044d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d4:	4a83      	ldr	r2, [pc, #524]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80044d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80fa 	beq.w	80046da <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	f040 80d0 	bne.w	8004690 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044f0:	4b7c      	ldr	r3, [pc, #496]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f003 0203 	and.w	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d130      	bne.n	8004566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	3b01      	subs	r3, #1
 8004510:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004512:	429a      	cmp	r2, r3
 8004514:	d127      	bne.n	8004566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004520:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11f      	bne.n	8004566 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004530:	2a07      	cmp	r2, #7
 8004532:	bf14      	ite	ne
 8004534:	2201      	movne	r2, #1
 8004536:	2200      	moveq	r2, #0
 8004538:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800453a:	4293      	cmp	r3, r2
 800453c:	d113      	bne.n	8004566 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	3b01      	subs	r3, #1
 800454c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d109      	bne.n	8004566 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d06e      	beq.n	8004644 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b0c      	cmp	r3, #12
 800456a:	d069      	beq.n	8004640 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800456c:	4b5d      	ldr	r3, [pc, #372]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004578:	4b5a      	ldr	r3, [pc, #360]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0a9      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004588:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004594:	f7fe fbd6 	bl	8002d44 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800459c:	f7fe fbd2 	bl	8002d44 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e096      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ae:	4b4d      	ldr	r3, [pc, #308]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ba:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_RCC_OscConfig+0x7ac>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045ca:	3a01      	subs	r2, #1
 80045cc:	0112      	lsls	r2, r2, #4
 80045ce:	4311      	orrs	r1, r2
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045d4:	0212      	lsls	r2, r2, #8
 80045d6:	4311      	orrs	r1, r2
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80045dc:	0852      	lsrs	r2, r2, #1
 80045de:	3a01      	subs	r2, #1
 80045e0:	0552      	lsls	r2, r2, #21
 80045e2:	4311      	orrs	r1, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045e8:	0852      	lsrs	r2, r2, #1
 80045ea:	3a01      	subs	r2, #1
 80045ec:	0652      	lsls	r2, r2, #25
 80045ee:	4311      	orrs	r1, r2
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045f4:	0912      	lsrs	r2, r2, #4
 80045f6:	0452      	lsls	r2, r2, #17
 80045f8:	430a      	orrs	r2, r1
 80045fa:	493a      	ldr	r1, [pc, #232]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004600:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800460c:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a34      	ldr	r2, [pc, #208]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004616:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004618:	f7fe fb94 	bl	8002d44 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7fe fb90 	bl	8002d44 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e054      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800463e:	e04c      	b.n	80046da <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e04b      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004644:	4b27      	ldr	r3, [pc, #156]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d144      	bne.n	80046da <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004650:	4b24      	ldr	r3, [pc, #144]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800465a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800465c:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004666:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004668:	f7fe fb6c 	bl	8002d44 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004670:	f7fe fb68 	bl	8002d44 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e02c      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004682:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x734>
 800468e:	e024      	b.n	80046da <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	2b0c      	cmp	r3, #12
 8004694:	d01f      	beq.n	80046d6 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 800469c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a2:	f7fe fb4f 	bl	8002d44 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fe fb4b 	bl	8002d44 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e00f      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80046c8:	4b06      	ldr	r3, [pc, #24]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	4905      	ldr	r1, [pc, #20]	; (80046e4 <HAL_RCC_OscConfig+0x7a8>)
 80046ce:	4b07      	ldr	r3, [pc, #28]	; (80046ec <HAL_RCC_OscConfig+0x7b0>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	60cb      	str	r3, [r1, #12]
 80046d4:	e001      	b.n	80046da <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3720      	adds	r7, #32
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40021000 	.word	0x40021000
 80046e8:	f99d808c 	.word	0xf99d808c
 80046ec:	feeefffc 	.word	0xfeeefffc

080046f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0e7      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004704:	4b75      	ldr	r3, [pc, #468]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d910      	bls.n	8004734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b72      	ldr	r3, [pc, #456]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f023 0207 	bic.w	r2, r3, #7
 800471a:	4970      	ldr	r1, [pc, #448]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004722:	4b6e      	ldr	r3, [pc, #440]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cf      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d010      	beq.n	8004762 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474c:	429a      	cmp	r2, r3
 800474e:	d908      	bls.n	8004762 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4960      	ldr	r1, [pc, #384]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 800475e:	4313      	orrs	r3, r2
 8004760:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d04c      	beq.n	8004808 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b03      	cmp	r3, #3
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	4b5a      	ldr	r3, [pc, #360]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d121      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e0a6      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800478e:	4b54      	ldr	r3, [pc, #336]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d115      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e09a      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d107      	bne.n	80047b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047a6:	4b4e      	ldr	r3, [pc, #312]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d109      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e08e      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047b6:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e086      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047c6:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f023 0203 	bic.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	4943      	ldr	r1, [pc, #268]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fe fab4 	bl	8002d44 <HAL_GetTick>
 80047dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e0:	f7fe fab0 	bl	8002d44 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e06e      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	4b3a      	ldr	r3, [pc, #232]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 020c 	and.w	r2, r3, #12
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	429a      	cmp	r2, r3
 8004806:	d1eb      	bne.n	80047e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004820:	429a      	cmp	r2, r3
 8004822:	d208      	bcs.n	8004836 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	492b      	ldr	r1, [pc, #172]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004836:	4b29      	ldr	r3, [pc, #164]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d210      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 0207 	bic.w	r2, r3, #7
 800484c:	4923      	ldr	r1, [pc, #140]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004854:	4b21      	ldr	r3, [pc, #132]	; (80048dc <HAL_RCC_ClockConfig+0x1ec>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e036      	b.n	80048d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d008      	beq.n	8004884 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004872:	4b1b      	ldr	r3, [pc, #108]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	4918      	ldr	r1, [pc, #96]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004890:	4b13      	ldr	r3, [pc, #76]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	00db      	lsls	r3, r3, #3
 800489e:	4910      	ldr	r1, [pc, #64]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048a4:	f000 f824 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	091b      	lsrs	r3, r3, #4
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	490b      	ldr	r1, [pc, #44]	; (80048e4 <HAL_RCC_ClockConfig+0x1f4>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1f8>)
 80048c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_ClockConfig+0x1fc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7fe f9eb 	bl	8002ca4 <HAL_InitTick>
 80048ce:	4603      	mov	r3, r0
 80048d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80048d2:	7afb      	ldrb	r3, [r7, #11]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40022000 	.word	0x40022000
 80048e0:	40021000 	.word	0x40021000
 80048e4:	08008e58 	.word	0x08008e58
 80048e8:	20000000 	.word	0x20000000
 80048ec:	20000004 	.word	0x20000004

080048f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	2300      	movs	r3, #0
 80048fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fe:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 030c 	and.w	r3, r3, #12
 8004906:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004908:	4b3b      	ldr	r3, [pc, #236]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x34>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d121      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d11e      	bne.n	8004962 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004924:	4b34      	ldr	r3, [pc, #208]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b00      	cmp	r3, #0
 800492e:	d107      	bne.n	8004940 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004930:	4b31      	ldr	r3, [pc, #196]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004936:	0a1b      	lsrs	r3, r3, #8
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	e005      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004940:	4b2d      	ldr	r3, [pc, #180]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800494c:	4a2b      	ldr	r2, [pc, #172]	; (80049fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004954:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10d      	bne.n	8004978 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004960:	e00a      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b04      	cmp	r3, #4
 8004966:	d102      	bne.n	800496e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x110>)
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	e004      	b.n	8004978 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d101      	bne.n	8004978 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004974:	4b23      	ldr	r3, [pc, #140]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x114>)
 8004976:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d134      	bne.n	80049e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d003      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0xa6>
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d003      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0xac>
 8004994:	e005      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004996:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x110>)
 8004998:	617b      	str	r3, [r7, #20]
      break;
 800499a:	e005      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x114>)
 800499e:	617b      	str	r3, [r7, #20]
      break;
 80049a0:	e002      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	617b      	str	r3, [r7, #20]
      break;
 80049a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a8:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	3301      	adds	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	fb02 f203 	mul.w	r2, r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049ce:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	0e5b      	lsrs	r3, r3, #25
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	3301      	adds	r3, #1
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80049e8:	69bb      	ldr	r3, [r7, #24]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40021000 	.word	0x40021000
 80049fc:	08008e70 	.word	0x08008e70
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	007a1200 	.word	0x007a1200

08004a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000000 	.word	0x20000000

08004a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a24:	f7ff fff0 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4904      	ldr	r1, [pc, #16]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	08008e68 	.word	0x08008e68

08004a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a50:	f7ff ffda 	bl	8004a08 <HAL_RCC_GetHCLKFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0adb      	lsrs	r3, r3, #11
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4904      	ldr	r1, [pc, #16]	; (8004a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	08008e68 	.word	0x08008e68

08004a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a84:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a90:	f7ff f9f0 	bl	8003e74 <HAL_PWREx_GetVoltageRange>
 8004a94:	6178      	str	r0, [r7, #20]
 8004a96:	e014      	b.n	8004ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a98:	4b25      	ldr	r3, [pc, #148]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa4:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ab0:	f7ff f9e0 	bl	8003e74 <HAL_PWREx_GetVoltageRange>
 8004ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac8:	d10b      	bne.n	8004ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d919      	bls.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ad4:	d902      	bls.n	8004adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e013      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004adc:	2301      	movs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e010      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d902      	bls.n	8004aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ae8:	2303      	movs	r3, #3
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e00a      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d102      	bne.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004af4:	2302      	movs	r3, #2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e004      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b70      	cmp	r3, #112	; 0x70
 8004afe:	d101      	bne.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 0207 	bic.w	r2, r3, #7
 8004b0c:	4909      	ldr	r1, [pc, #36]	; (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40022000 	.word	0x40022000

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b40:	2300      	movs	r3, #0
 8004b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b44:	2300      	movs	r3, #0
 8004b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d041      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b5c:	d02a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b62:	d824      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b68:	d008      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b6e:	d81e      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b78:	d010      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b7a:	e018      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b7c:	4b86      	ldr	r3, [pc, #536]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b88:	e015      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fabb 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b9a:	e00c      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3320      	adds	r3, #32
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fba6 	bl	80052f4 <RCCEx_PLLSAI2_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bac:	e003      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bbc:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bca:	4973      	ldr	r1, [pc, #460]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bd2:	e001      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d041      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bec:	d02a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bf2:	d824      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf8:	d008      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bfe:	d81e      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d010      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c0a:	e018      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c0c:	4b62      	ldr	r3, [pc, #392]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a61      	ldr	r2, [pc, #388]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c18:	e015      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa73 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c2a:	e00c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3320      	adds	r3, #32
 8004c30:	2100      	movs	r1, #0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb5e 	bl	80052f4 <RCCEx_PLLSAI2_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	74fb      	strb	r3, [r7, #19]
      break;
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c4c:	4b52      	ldr	r3, [pc, #328]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c5a:	494f      	ldr	r1, [pc, #316]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c62:	e001      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80a0 	beq.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	4a40      	ldr	r2, [pc, #256]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cb8:	f7fe f844 	bl	8002d44 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc0:	f7fe f840 	bl	8002d44 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ef      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d15c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ce6:	4b2c      	ldr	r3, [pc, #176]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d019      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d04:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d30:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fd ffff 	bl	8002d44 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d48:	e00b      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fd fffb 	bl	8002d44 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d902      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d60:	e006      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ec      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	4904      	ldr	r1, [pc, #16]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d8e:	e009      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	74bb      	strb	r3, [r7, #18]
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da4:	7c7b      	ldrb	r3, [r7, #17]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004daa:	4b9e      	ldr	r3, [pc, #632]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	4a9d      	ldr	r2, [pc, #628]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc2:	4b98      	ldr	r3, [pc, #608]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f023 0203 	bic.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	4994      	ldr	r1, [pc, #592]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de4:	4b8f      	ldr	r3, [pc, #572]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f023 020c 	bic.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	498c      	ldr	r1, [pc, #560]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e06:	4b87      	ldr	r3, [pc, #540]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	4983      	ldr	r1, [pc, #524]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e28:	4b7e      	ldr	r3, [pc, #504]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	497b      	ldr	r1, [pc, #492]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e4a:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	4972      	ldr	r1, [pc, #456]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e6c:	4b6d      	ldr	r3, [pc, #436]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7a:	496a      	ldr	r1, [pc, #424]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8e:	4b65      	ldr	r3, [pc, #404]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	4961      	ldr	r1, [pc, #388]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eb0:	4b5c      	ldr	r3, [pc, #368]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	4959      	ldr	r1, [pc, #356]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ed2:	4b54      	ldr	r3, [pc, #336]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	4950      	ldr	r1, [pc, #320]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	4948      	ldr	r1, [pc, #288]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f16:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	493f      	ldr	r1, [pc, #252]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d028      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f46:	4937      	ldr	r1, [pc, #220]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f56:	d106      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f58:	4b32      	ldr	r3, [pc, #200]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a31      	ldr	r2, [pc, #196]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f62:	60d3      	str	r3, [r2, #12]
 8004f64:	e011      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	2101      	movs	r1, #1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f8c8 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d028      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f96:	4b23      	ldr	r3, [pc, #140]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	491f      	ldr	r1, [pc, #124]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc0:	60d3      	str	r3, [r2, #12]
 8004fc2:	e011      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f899 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02b      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	4908      	ldr	r1, [pc, #32]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a02      	ldr	r2, [pc, #8]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501e:	60d3      	str	r3, [r2, #12]
 8005020:	e014      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005030:	d10c      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	2101      	movs	r1, #1
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f867 	bl	800510c <RCCEx_PLLSAI1_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02f      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005066:	4928      	ldr	r1, [pc, #160]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d10d      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2102      	movs	r1, #2
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f844 	bl	800510c <RCCEx_PLLSAI1_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	74bb      	strb	r3, [r7, #18]
 8005092:	e011      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3320      	adds	r3, #32
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f925 	bl	80052f4 <RCCEx_PLLSAI2_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050c4:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d2:	490d      	ldr	r1, [pc, #52]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000

0800510c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511a:	4b75      	ldr	r3, [pc, #468]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005126:	4b72      	ldr	r3, [pc, #456]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10d      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
       ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800513e:	4b6c      	ldr	r3, [pc, #432]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
       ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d047      	beq.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d018      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x86>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d825      	bhi.n	80051b0 <RCCEx_PLLSAI1_Config+0xa4>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d002      	beq.n	800516e <RCCEx_PLLSAI1_Config+0x62>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d009      	beq.n	8005180 <RCCEx_PLLSAI1_Config+0x74>
 800516c:	e020      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800516e:	4b60      	ldr	r3, [pc, #384]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11d      	bne.n	80051b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517e:	e01a      	b.n	80051b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005180:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005190:	e013      	b.n	80051ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005192:	4b57      	ldr	r3, [pc, #348]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800519e:	4b54      	ldr	r3, [pc, #336]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ae:	e006      	b.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e004      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051be:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	430b      	orrs	r3, r1
 80051dc:	4944      	ldr	r1, [pc, #272]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d17d      	bne.n	80052e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051e8:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a40      	ldr	r2, [pc, #256]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fd fda6 	bl	8002d44 <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051fa:	e009      	b.n	8005210 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051fc:	f7fd fda2 	bl	8002d44 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	73fb      	strb	r3, [r7, #15]
        break;
 800520e:	e005      	b.n	800521c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005210:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d160      	bne.n	80052e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d111      	bne.n	800524c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005228:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68d2      	ldr	r2, [r2, #12]
 800523e:	0912      	lsrs	r2, r2, #4
 8005240:	0452      	lsls	r2, r2, #17
 8005242:	430a      	orrs	r2, r1
 8005244:	492a      	ldr	r1, [pc, #168]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
 800524a:	e027      	b.n	800529c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d112      	bne.n	8005278 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800525a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6892      	ldr	r2, [r2, #8]
 8005262:	0211      	lsls	r1, r2, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6912      	ldr	r2, [r2, #16]
 8005268:	0852      	lsrs	r2, r2, #1
 800526a:	3a01      	subs	r2, #1
 800526c:	0552      	lsls	r2, r2, #21
 800526e:	430a      	orrs	r2, r1
 8005270:	491f      	ldr	r1, [pc, #124]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005272:	4313      	orrs	r3, r2
 8005274:	610b      	str	r3, [r1, #16]
 8005276:	e011      	b.n	800529c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005280:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6892      	ldr	r2, [r2, #8]
 8005288:	0211      	lsls	r1, r2, #8
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6952      	ldr	r2, [r2, #20]
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	3a01      	subs	r2, #1
 8005292:	0652      	lsls	r2, r2, #25
 8005294:	430a      	orrs	r2, r1
 8005296:	4916      	ldr	r1, [pc, #88]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800529c:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fd fd4c 	bl	8002d44 <HAL_GetTick>
 80052ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ae:	e009      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b0:	f7fd fd48 	bl	8002d44 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d902      	bls.n	80052c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	73fb      	strb	r3, [r7, #15]
          break;
 80052c2:	e005      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ef      	beq.n	80052b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4904      	ldr	r1, [pc, #16]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000

080052f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005302:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d018      	beq.n	8005340 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800530e:	4b67      	ldr	r3, [pc, #412]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0203 	and.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d10d      	bne.n	800533a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
       ||
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005326:	4b61      	ldr	r3, [pc, #388]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
       ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d047      	beq.n	80053ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
 800533e:	e044      	b.n	80053ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d018      	beq.n	800537a <RCCEx_PLLSAI2_Config+0x86>
 8005348:	2b03      	cmp	r3, #3
 800534a:	d825      	bhi.n	8005398 <RCCEx_PLLSAI2_Config+0xa4>
 800534c:	2b01      	cmp	r3, #1
 800534e:	d002      	beq.n	8005356 <RCCEx_PLLSAI2_Config+0x62>
 8005350:	2b02      	cmp	r3, #2
 8005352:	d009      	beq.n	8005368 <RCCEx_PLLSAI2_Config+0x74>
 8005354:	e020      	b.n	8005398 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005356:	4b55      	ldr	r3, [pc, #340]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d11d      	bne.n	800539e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005366:	e01a      	b.n	800539e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005368:	4b50      	ldr	r3, [pc, #320]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005370:	2b00      	cmp	r3, #0
 8005372:	d116      	bne.n	80053a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005378:	e013      	b.n	80053a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800537a:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005386:	4b49      	ldr	r3, [pc, #292]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005396:	e006      	b.n	80053a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e004      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ae:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	3b01      	subs	r3, #1
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	430b      	orrs	r3, r1
 80053c4:	4939      	ldr	r1, [pc, #228]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d167      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fd fcb2 	bl	8002d44 <HAL_GetTick>
 80053e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053e2:	e009      	b.n	80053f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053e4:	f7fd fcae 	bl	8002d44 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d902      	bls.n	80053f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	73fb      	strb	r3, [r7, #15]
        break;
 80053f6:	e005      	b.n	8005404 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053f8:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ef      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d14a      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d111      	bne.n	8005434 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6892      	ldr	r2, [r2, #8]
 8005420:	0211      	lsls	r1, r2, #8
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68d2      	ldr	r2, [r2, #12]
 8005426:	0912      	lsrs	r2, r2, #4
 8005428:	0452      	lsls	r2, r2, #17
 800542a:	430a      	orrs	r2, r1
 800542c:	491f      	ldr	r1, [pc, #124]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	614b      	str	r3, [r1, #20]
 8005432:	e011      	b.n	8005458 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6912      	ldr	r2, [r2, #16]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	3a01      	subs	r2, #1
 800544e:	0652      	lsls	r2, r2, #25
 8005450:	430a      	orrs	r2, r1
 8005452:	4916      	ldr	r1, [pc, #88]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005462:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fd fc6e 	bl	8002d44 <HAL_GetTick>
 8005468:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800546a:	e009      	b.n	8005480 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800546c:	f7fd fc6a 	bl	8002d44 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d902      	bls.n	8005480 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	73fb      	strb	r3, [r7, #15]
          break;
 800547e:	e005      	b.n	800548c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ef      	beq.n	800546c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4904      	ldr	r1, [pc, #16]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000

080054b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e049      	b.n	8005556 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fd fae4 	bl	8002aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3304      	adds	r3, #4
 80054ec:	4619      	mov	r1, r3
 80054ee:	4610      	mov	r0, r2
 80054f0:	f000 f89e 	bl	8005630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d001      	beq.n	8005578 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e047      	b.n	8005608 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a23      	ldr	r2, [pc, #140]	; (8005614 <HAL_TIM_Base_Start+0xb4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_TIM_Base_Start+0x66>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005592:	d018      	beq.n	80055c6 <HAL_TIM_Base_Start+0x66>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a1f      	ldr	r2, [pc, #124]	; (8005618 <HAL_TIM_Base_Start+0xb8>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_TIM_Base_Start+0x66>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a1e      	ldr	r2, [pc, #120]	; (800561c <HAL_TIM_Base_Start+0xbc>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_TIM_Base_Start+0x66>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1c      	ldr	r2, [pc, #112]	; (8005620 <HAL_TIM_Base_Start+0xc0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_TIM_Base_Start+0x66>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <HAL_TIM_Base_Start+0xc4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_TIM_Base_Start+0x66>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a19      	ldr	r2, [pc, #100]	; (8005628 <HAL_TIM_Base_Start+0xc8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d115      	bne.n	80055f2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <HAL_TIM_Base_Start+0xcc>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b06      	cmp	r3, #6
 80055d6:	d015      	beq.n	8005604 <HAL_TIM_Base_Start+0xa4>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055de:	d011      	beq.n	8005604 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f042 0201 	orr.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f0:	e008      	b.n	8005604 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0201 	orr.w	r2, r2, #1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e000      	b.n	8005606 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005604:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	00010007 	.word	0x00010007

08005630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a40      	ldr	r2, [pc, #256]	; (8005744 <TIM_Base_SetConfig+0x114>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564e:	d00f      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a3d      	ldr	r2, [pc, #244]	; (8005748 <TIM_Base_SetConfig+0x118>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3c      	ldr	r2, [pc, #240]	; (800574c <TIM_Base_SetConfig+0x11c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3b      	ldr	r2, [pc, #236]	; (8005750 <TIM_Base_SetConfig+0x120>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3a      	ldr	r2, [pc, #232]	; (8005754 <TIM_Base_SetConfig+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d108      	bne.n	8005682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2f      	ldr	r2, [pc, #188]	; (8005744 <TIM_Base_SetConfig+0x114>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01f      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d01b      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <TIM_Base_SetConfig+0x118>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d017      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2b      	ldr	r2, [pc, #172]	; (800574c <TIM_Base_SetConfig+0x11c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d013      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2a      	ldr	r2, [pc, #168]	; (8005750 <TIM_Base_SetConfig+0x120>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d00f      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a29      	ldr	r2, [pc, #164]	; (8005754 <TIM_Base_SetConfig+0x124>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a28      	ldr	r2, [pc, #160]	; (8005758 <TIM_Base_SetConfig+0x128>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a27      	ldr	r2, [pc, #156]	; (800575c <TIM_Base_SetConfig+0x12c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0x9a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a26      	ldr	r2, [pc, #152]	; (8005760 <TIM_Base_SetConfig+0x130>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <TIM_Base_SetConfig+0x114>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d00f      	beq.n	8005728 <TIM_Base_SetConfig+0xf8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a12      	ldr	r2, [pc, #72]	; (8005754 <TIM_Base_SetConfig+0x124>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00b      	beq.n	8005728 <TIM_Base_SetConfig+0xf8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a11      	ldr	r2, [pc, #68]	; (8005758 <TIM_Base_SetConfig+0x128>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d007      	beq.n	8005728 <TIM_Base_SetConfig+0xf8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a10      	ldr	r2, [pc, #64]	; (800575c <TIM_Base_SetConfig+0x12c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_Base_SetConfig+0xf8>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a0f      	ldr	r2, [pc, #60]	; (8005760 <TIM_Base_SetConfig+0x130>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d103      	bne.n	8005730 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691a      	ldr	r2, [r3, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	615a      	str	r2, [r3, #20]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40013400 	.word	0x40013400
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800

08005764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005778:	2302      	movs	r3, #2
 800577a:	e068      	b.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2e      	ldr	r2, [pc, #184]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2d      	ldr	r2, [pc, #180]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d108      	bne.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a1e      	ldr	r2, [pc, #120]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01d      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ee:	d018      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a18      	ldr	r2, [pc, #96]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a13      	ldr	r2, [pc, #76]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a14      	ldr	r2, [pc, #80]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10c      	bne.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4313      	orrs	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40013400 	.word	0x40013400
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40014000 	.word	0x40014000

08005874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e040      	b.n	8005908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fd f966 	bl	8002b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2224      	movs	r2, #36	; 0x24
 80058a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0201 	bic.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f8c0 	bl	8005a38 <UART_SetConfig>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d101      	bne.n	80058c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e022      	b.n	8005908 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fb3e 	bl	8005f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0201 	orr.w	r2, r2, #1
 80058fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fbc5 	bl	8006090 <UART_CheckIdleState>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	; 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	4613      	mov	r3, r2
 800591e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005924:	2b20      	cmp	r3, #32
 8005926:	f040 8082 	bne.w	8005a2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_UART_Transmit+0x26>
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e07a      	b.n	8005a30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_UART_Transmit+0x38>
 8005944:	2302      	movs	r3, #2
 8005946:	e073      	b.n	8005a30 <HAL_UART_Transmit+0x120>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2221      	movs	r2, #33	; 0x21
 800595c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800595e:	f7fd f9f1 	bl	8002d44 <HAL_GetTick>
 8005962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	88fa      	ldrh	r2, [r7, #6]
 8005968:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800597c:	d108      	bne.n	8005990 <HAL_UART_Transmit+0x80>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d104      	bne.n	8005990 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005986:	2300      	movs	r3, #0
 8005988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e003      	b.n	8005998 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80059a0:	e02d      	b.n	80059fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2200      	movs	r2, #0
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fbb8 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d001      	beq.n	80059bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e039      	b.n	8005a30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10b      	bne.n	80059da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ce:	b292      	uxth	r2, r2
 80059d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	3302      	adds	r3, #2
 80059d6:	61bb      	str	r3, [r7, #24]
 80059d8:	e008      	b.n	80059ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	781a      	ldrb	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	b292      	uxth	r2, r2
 80059e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	3301      	adds	r3, #1
 80059ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1cb      	bne.n	80059a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2200      	movs	r2, #0
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fb84 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e005      	b.n	8005a30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e000      	b.n	8005a30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a2e:	2302      	movs	r3, #2
  }
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a38:	b5b0      	push	{r4, r5, r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	4bad      	ldr	r3, [pc, #692]	; (8005d18 <UART_SetConfig+0x2e0>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	69f9      	ldr	r1, [r7, #28]
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4aa2      	ldr	r2, [pc, #648]	; (8005d1c <UART_SetConfig+0x2e4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a99      	ldr	r2, [pc, #612]	; (8005d20 <UART_SetConfig+0x2e8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d121      	bne.n	8005b02 <UART_SetConfig+0xca>
 8005abe:	4b99      	ldr	r3, [pc, #612]	; (8005d24 <UART_SetConfig+0x2ec>)
 8005ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d817      	bhi.n	8005afc <UART_SetConfig+0xc4>
 8005acc:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <UART_SetConfig+0x9c>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005af1 	.word	0x08005af1
 8005adc:	08005aeb 	.word	0x08005aeb
 8005ae0:	08005af7 	.word	0x08005af7
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	e0e7      	b.n	8005cba <UART_SetConfig+0x282>
 8005aea:	2302      	movs	r3, #2
 8005aec:	76fb      	strb	r3, [r7, #27]
 8005aee:	e0e4      	b.n	8005cba <UART_SetConfig+0x282>
 8005af0:	2304      	movs	r3, #4
 8005af2:	76fb      	strb	r3, [r7, #27]
 8005af4:	e0e1      	b.n	8005cba <UART_SetConfig+0x282>
 8005af6:	2308      	movs	r3, #8
 8005af8:	76fb      	strb	r3, [r7, #27]
 8005afa:	e0de      	b.n	8005cba <UART_SetConfig+0x282>
 8005afc:	2310      	movs	r3, #16
 8005afe:	76fb      	strb	r3, [r7, #27]
 8005b00:	e0db      	b.n	8005cba <UART_SetConfig+0x282>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a88      	ldr	r2, [pc, #544]	; (8005d28 <UART_SetConfig+0x2f0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d132      	bne.n	8005b72 <UART_SetConfig+0x13a>
 8005b0c:	4b85      	ldr	r3, [pc, #532]	; (8005d24 <UART_SetConfig+0x2ec>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f003 030c 	and.w	r3, r3, #12
 8005b16:	2b0c      	cmp	r3, #12
 8005b18:	d828      	bhi.n	8005b6c <UART_SetConfig+0x134>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0xe8>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b55 	.word	0x08005b55
 8005b24:	08005b6d 	.word	0x08005b6d
 8005b28:	08005b6d 	.word	0x08005b6d
 8005b2c:	08005b6d 	.word	0x08005b6d
 8005b30:	08005b61 	.word	0x08005b61
 8005b34:	08005b6d 	.word	0x08005b6d
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005b6d 	.word	0x08005b6d
 8005b40:	08005b5b 	.word	0x08005b5b
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b6d 	.word	0x08005b6d
 8005b4c:	08005b6d 	.word	0x08005b6d
 8005b50:	08005b67 	.word	0x08005b67
 8005b54:	2300      	movs	r3, #0
 8005b56:	76fb      	strb	r3, [r7, #27]
 8005b58:	e0af      	b.n	8005cba <UART_SetConfig+0x282>
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	76fb      	strb	r3, [r7, #27]
 8005b5e:	e0ac      	b.n	8005cba <UART_SetConfig+0x282>
 8005b60:	2304      	movs	r3, #4
 8005b62:	76fb      	strb	r3, [r7, #27]
 8005b64:	e0a9      	b.n	8005cba <UART_SetConfig+0x282>
 8005b66:	2308      	movs	r3, #8
 8005b68:	76fb      	strb	r3, [r7, #27]
 8005b6a:	e0a6      	b.n	8005cba <UART_SetConfig+0x282>
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	76fb      	strb	r3, [r7, #27]
 8005b70:	e0a3      	b.n	8005cba <UART_SetConfig+0x282>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a6d      	ldr	r2, [pc, #436]	; (8005d2c <UART_SetConfig+0x2f4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d120      	bne.n	8005bbe <UART_SetConfig+0x186>
 8005b7c:	4b69      	ldr	r3, [pc, #420]	; (8005d24 <UART_SetConfig+0x2ec>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b86:	2b30      	cmp	r3, #48	; 0x30
 8005b88:	d013      	beq.n	8005bb2 <UART_SetConfig+0x17a>
 8005b8a:	2b30      	cmp	r3, #48	; 0x30
 8005b8c:	d814      	bhi.n	8005bb8 <UART_SetConfig+0x180>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d009      	beq.n	8005ba6 <UART_SetConfig+0x16e>
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d810      	bhi.n	8005bb8 <UART_SetConfig+0x180>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <UART_SetConfig+0x168>
 8005b9a:	2b10      	cmp	r3, #16
 8005b9c:	d006      	beq.n	8005bac <UART_SetConfig+0x174>
 8005b9e:	e00b      	b.n	8005bb8 <UART_SetConfig+0x180>
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	76fb      	strb	r3, [r7, #27]
 8005ba4:	e089      	b.n	8005cba <UART_SetConfig+0x282>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	76fb      	strb	r3, [r7, #27]
 8005baa:	e086      	b.n	8005cba <UART_SetConfig+0x282>
 8005bac:	2304      	movs	r3, #4
 8005bae:	76fb      	strb	r3, [r7, #27]
 8005bb0:	e083      	b.n	8005cba <UART_SetConfig+0x282>
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	76fb      	strb	r3, [r7, #27]
 8005bb6:	e080      	b.n	8005cba <UART_SetConfig+0x282>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	76fb      	strb	r3, [r7, #27]
 8005bbc:	e07d      	b.n	8005cba <UART_SetConfig+0x282>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a5b      	ldr	r2, [pc, #364]	; (8005d30 <UART_SetConfig+0x2f8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d120      	bne.n	8005c0a <UART_SetConfig+0x1d2>
 8005bc8:	4b56      	ldr	r3, [pc, #344]	; (8005d24 <UART_SetConfig+0x2ec>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8005bd4:	d013      	beq.n	8005bfe <UART_SetConfig+0x1c6>
 8005bd6:	2bc0      	cmp	r3, #192	; 0xc0
 8005bd8:	d814      	bhi.n	8005c04 <UART_SetConfig+0x1cc>
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d009      	beq.n	8005bf2 <UART_SetConfig+0x1ba>
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d810      	bhi.n	8005c04 <UART_SetConfig+0x1cc>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <UART_SetConfig+0x1b4>
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d006      	beq.n	8005bf8 <UART_SetConfig+0x1c0>
 8005bea:	e00b      	b.n	8005c04 <UART_SetConfig+0x1cc>
 8005bec:	2300      	movs	r3, #0
 8005bee:	76fb      	strb	r3, [r7, #27]
 8005bf0:	e063      	b.n	8005cba <UART_SetConfig+0x282>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	76fb      	strb	r3, [r7, #27]
 8005bf6:	e060      	b.n	8005cba <UART_SetConfig+0x282>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	76fb      	strb	r3, [r7, #27]
 8005bfc:	e05d      	b.n	8005cba <UART_SetConfig+0x282>
 8005bfe:	2308      	movs	r3, #8
 8005c00:	76fb      	strb	r3, [r7, #27]
 8005c02:	e05a      	b.n	8005cba <UART_SetConfig+0x282>
 8005c04:	2310      	movs	r3, #16
 8005c06:	76fb      	strb	r3, [r7, #27]
 8005c08:	e057      	b.n	8005cba <UART_SetConfig+0x282>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a49      	ldr	r2, [pc, #292]	; (8005d34 <UART_SetConfig+0x2fc>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d125      	bne.n	8005c60 <UART_SetConfig+0x228>
 8005c14:	4b43      	ldr	r3, [pc, #268]	; (8005d24 <UART_SetConfig+0x2ec>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c22:	d017      	beq.n	8005c54 <UART_SetConfig+0x21c>
 8005c24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c28:	d817      	bhi.n	8005c5a <UART_SetConfig+0x222>
 8005c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c2e:	d00b      	beq.n	8005c48 <UART_SetConfig+0x210>
 8005c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c34:	d811      	bhi.n	8005c5a <UART_SetConfig+0x222>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <UART_SetConfig+0x20a>
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d006      	beq.n	8005c4e <UART_SetConfig+0x216>
 8005c40:	e00b      	b.n	8005c5a <UART_SetConfig+0x222>
 8005c42:	2300      	movs	r3, #0
 8005c44:	76fb      	strb	r3, [r7, #27]
 8005c46:	e038      	b.n	8005cba <UART_SetConfig+0x282>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	76fb      	strb	r3, [r7, #27]
 8005c4c:	e035      	b.n	8005cba <UART_SetConfig+0x282>
 8005c4e:	2304      	movs	r3, #4
 8005c50:	76fb      	strb	r3, [r7, #27]
 8005c52:	e032      	b.n	8005cba <UART_SetConfig+0x282>
 8005c54:	2308      	movs	r3, #8
 8005c56:	76fb      	strb	r3, [r7, #27]
 8005c58:	e02f      	b.n	8005cba <UART_SetConfig+0x282>
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	76fb      	strb	r3, [r7, #27]
 8005c5e:	e02c      	b.n	8005cba <UART_SetConfig+0x282>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2d      	ldr	r2, [pc, #180]	; (8005d1c <UART_SetConfig+0x2e4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d125      	bne.n	8005cb6 <UART_SetConfig+0x27e>
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	; (8005d24 <UART_SetConfig+0x2ec>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c78:	d017      	beq.n	8005caa <UART_SetConfig+0x272>
 8005c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c7e:	d817      	bhi.n	8005cb0 <UART_SetConfig+0x278>
 8005c80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c84:	d00b      	beq.n	8005c9e <UART_SetConfig+0x266>
 8005c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c8a:	d811      	bhi.n	8005cb0 <UART_SetConfig+0x278>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <UART_SetConfig+0x260>
 8005c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c94:	d006      	beq.n	8005ca4 <UART_SetConfig+0x26c>
 8005c96:	e00b      	b.n	8005cb0 <UART_SetConfig+0x278>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	76fb      	strb	r3, [r7, #27]
 8005c9c:	e00d      	b.n	8005cba <UART_SetConfig+0x282>
 8005c9e:	2302      	movs	r3, #2
 8005ca0:	76fb      	strb	r3, [r7, #27]
 8005ca2:	e00a      	b.n	8005cba <UART_SetConfig+0x282>
 8005ca4:	2304      	movs	r3, #4
 8005ca6:	76fb      	strb	r3, [r7, #27]
 8005ca8:	e007      	b.n	8005cba <UART_SetConfig+0x282>
 8005caa:	2308      	movs	r3, #8
 8005cac:	76fb      	strb	r3, [r7, #27]
 8005cae:	e004      	b.n	8005cba <UART_SetConfig+0x282>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	76fb      	strb	r3, [r7, #27]
 8005cb4:	e001      	b.n	8005cba <UART_SetConfig+0x282>
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <UART_SetConfig+0x2e4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	f040 8087 	bne.w	8005dd4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cc6:	7efb      	ldrb	r3, [r7, #27]
 8005cc8:	2b08      	cmp	r3, #8
 8005cca:	d837      	bhi.n	8005d3c <UART_SetConfig+0x304>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <UART_SetConfig+0x29c>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005cf9 	.word	0x08005cf9
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d3d 	.word	0x08005d3d
 8005ce4:	08005d07 	.word	0x08005d07
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005d3d 	.word	0x08005d3d
 8005cf0:	08005d3d 	.word	0x08005d3d
 8005cf4:	08005d0f 	.word	0x08005d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf8:	f7fe fe92 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8005cfc:	6178      	str	r0, [r7, #20]
        break;
 8005cfe:	e022      	b.n	8005d46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d00:	4b0d      	ldr	r3, [pc, #52]	; (8005d38 <UART_SetConfig+0x300>)
 8005d02:	617b      	str	r3, [r7, #20]
        break;
 8005d04:	e01f      	b.n	8005d46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d06:	f7fe fdf3 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8005d0a:	6178      	str	r0, [r7, #20]
        break;
 8005d0c:	e01b      	b.n	8005d46 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d12:	617b      	str	r3, [r7, #20]
        break;
 8005d14:	e017      	b.n	8005d46 <UART_SetConfig+0x30e>
 8005d16:	bf00      	nop
 8005d18:	efff69f3 	.word	0xefff69f3
 8005d1c:	40008000 	.word	0x40008000
 8005d20:	40013800 	.word	0x40013800
 8005d24:	40021000 	.word	0x40021000
 8005d28:	40004400 	.word	0x40004400
 8005d2c:	40004800 	.word	0x40004800
 8005d30:	40004c00 	.word	0x40004c00
 8005d34:	40005000 	.word	0x40005000
 8005d38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	76bb      	strb	r3, [r7, #26]
        break;
 8005d44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 80f1 	beq.w	8005f30 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d305      	bcc.n	8005d6a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d902      	bls.n	8005d70 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	76bb      	strb	r3, [r7, #26]
 8005d6e:	e0df      	b.n	8005f30 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f04f 0100 	mov.w	r1, #0
 8005d78:	f04f 0200 	mov.w	r2, #0
 8005d7c:	f04f 0300 	mov.w	r3, #0
 8005d80:	020b      	lsls	r3, r1, #8
 8005d82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d86:	0202      	lsls	r2, r0, #8
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	6849      	ldr	r1, [r1, #4]
 8005d8c:	0849      	lsrs	r1, r1, #1
 8005d8e:	4608      	mov	r0, r1
 8005d90:	f04f 0100 	mov.w	r1, #0
 8005d94:	1814      	adds	r4, r2, r0
 8005d96:	eb43 0501 	adc.w	r5, r3, r1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	4620      	mov	r0, r4
 8005da6:	4629      	mov	r1, r5
 8005da8:	f7fa fefe 	bl	8000ba8 <__aeabi_uldivmod>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4613      	mov	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dba:	d308      	bcc.n	8005dce <UART_SetConfig+0x396>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dc2:	d204      	bcs.n	8005dce <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	e0b0      	b.n	8005f30 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	76bb      	strb	r3, [r7, #26]
 8005dd2:	e0ad      	b.n	8005f30 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ddc:	d15b      	bne.n	8005e96 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005dde:	7efb      	ldrb	r3, [r7, #27]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d828      	bhi.n	8005e36 <UART_SetConfig+0x3fe>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x3b4>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e27 	.word	0x08005e27
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e37 	.word	0x08005e37
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7fe fe06 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8005e14:	6178      	str	r0, [r7, #20]
        break;
 8005e16:	e013      	b.n	8005e40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fe fe18 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 8005e1c:	6178      	str	r0, [r7, #20]
        break;
 8005e1e:	e00f      	b.n	8005e40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b49      	ldr	r3, [pc, #292]	; (8005f48 <UART_SetConfig+0x510>)
 8005e22:	617b      	str	r3, [r7, #20]
        break;
 8005e24:	e00c      	b.n	8005e40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fe fd63 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8005e2a:	6178      	str	r0, [r7, #20]
        break;
 8005e2c:	e008      	b.n	8005e40 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e32:	617b      	str	r3, [r7, #20]
        break;
 8005e34:	e004      	b.n	8005e40 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	76bb      	strb	r3, [r7, #26]
        break;
 8005e3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d074      	beq.n	8005f30 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005a      	lsls	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	441a      	add	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	d916      	bls.n	8005e90 <UART_SetConfig+0x458>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d212      	bcs.n	8005e90 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	f023 030f 	bic.w	r3, r3, #15
 8005e72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	085b      	lsrs	r3, r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	89fb      	ldrh	r3, [r7, #14]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	89fa      	ldrh	r2, [r7, #14]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	e04f      	b.n	8005f30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	76bb      	strb	r3, [r7, #26]
 8005e94:	e04c      	b.n	8005f30 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e96:	7efb      	ldrb	r3, [r7, #27]
 8005e98:	2b08      	cmp	r3, #8
 8005e9a:	d828      	bhi.n	8005eee <UART_SetConfig+0x4b6>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x46c>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005edf 	.word	0x08005edf
 8005eb8:	08005eef 	.word	0x08005eef
 8005ebc:	08005eef 	.word	0x08005eef
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fe fdaa 	bl	8004a20 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	6178      	str	r0, [r7, #20]
        break;
 8005ece:	e013      	b.n	8005ef8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ed0:	f7fe fdbc 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 8005ed4:	6178      	str	r0, [r7, #20]
        break;
 8005ed6:	e00f      	b.n	8005ef8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <UART_SetConfig+0x510>)
 8005eda:	617b      	str	r3, [r7, #20]
        break;
 8005edc:	e00c      	b.n	8005ef8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fe fd07 	bl	80048f0 <HAL_RCC_GetSysClockFreq>
 8005ee2:	6178      	str	r0, [r7, #20]
        break;
 8005ee4:	e008      	b.n	8005ef8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	617b      	str	r3, [r7, #20]
        break;
 8005eec:	e004      	b.n	8005ef8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	76bb      	strb	r3, [r7, #26]
        break;
 8005ef6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d018      	beq.n	8005f30 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	085a      	lsrs	r2, r3, #1
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	441a      	add	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f10:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b0f      	cmp	r3, #15
 8005f16:	d909      	bls.n	8005f2c <UART_SetConfig+0x4f4>
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f1e:	d205      	bcs.n	8005f2c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60da      	str	r2, [r3, #12]
 8005f2a:	e001      	b.n	8005f30 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f3c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3720      	adds	r7, #32
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bdb0      	pop	{r4, r5, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	00f42400 	.word	0x00f42400

08005f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	f003 0302 	and.w	r3, r3, #2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d01a      	beq.n	8006062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604a:	d10a      	bne.n	8006062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	605a      	str	r2, [r3, #4]
  }
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af02      	add	r7, sp, #8
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a0:	f7fc fe50 	bl	8002d44 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d10e      	bne.n	80060d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f82d 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e023      	b.n	800611a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b04      	cmp	r3, #4
 80060de:	d10e      	bne.n	80060fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f817 	bl	8006122 <UART_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e00d      	b.n	800611a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b09c      	sub	sp, #112	; 0x70
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006132:	e0a5      	b.n	8006280 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613a:	f000 80a1 	beq.w	8006280 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800613e:	f7fc fe01 	bl	8002d44 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <UART_WaitOnFlagUntilTimeout+0x32>
 800614e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006150:	2b00      	cmp	r3, #0
 8006152:	d13e      	bne.n	80061d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006168:	667b      	str	r3, [r7, #100]	; 0x64
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006174:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e6      	bne.n	8006154 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	3308      	adds	r3, #8
 800618c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	663b      	str	r3, [r7, #96]	; 0x60
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	3308      	adds	r3, #8
 80061a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80061a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80061ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ae:	e841 2300 	strex	r3, r2, [r1]
 80061b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80061b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e5      	bne.n	8006186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e067      	b.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d04f      	beq.n	8006280 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ee:	d147      	bne.n	8006280 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800620e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800621e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	e853 3f00 	ldrex	r3, [r3]
 800623a:	613b      	str	r3, [r7, #16]
   return(result);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 0301 	bic.w	r3, r3, #1
 8006242:	66bb      	str	r3, [r7, #104]	; 0x68
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	3308      	adds	r3, #8
 800624a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800624c:	623a      	str	r2, [r7, #32]
 800624e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006250:	69f9      	ldr	r1, [r7, #28]
 8006252:	6a3a      	ldr	r2, [r7, #32]
 8006254:	e841 2300 	strex	r3, r2, [r1]
 8006258:	61bb      	str	r3, [r7, #24]
   return(result);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1e5      	bne.n	800622c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2220      	movs	r2, #32
 8006264:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2220      	movs	r2, #32
 800626a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e010      	b.n	80062a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	bf0c      	ite	eq
 8006290:	2301      	moveq	r3, #1
 8006292:	2300      	movne	r3, #0
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	79fb      	ldrb	r3, [r7, #7]
 800629a:	429a      	cmp	r2, r3
 800629c:	f43f af4a 	beq.w	8006134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3770      	adds	r7, #112	; 0x70
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <__errno>:
 80062ac:	4b01      	ldr	r3, [pc, #4]	; (80062b4 <__errno+0x8>)
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2000000c 	.word	0x2000000c

080062b8 <__libc_init_array>:
 80062b8:	b570      	push	{r4, r5, r6, lr}
 80062ba:	4d0d      	ldr	r5, [pc, #52]	; (80062f0 <__libc_init_array+0x38>)
 80062bc:	4c0d      	ldr	r4, [pc, #52]	; (80062f4 <__libc_init_array+0x3c>)
 80062be:	1b64      	subs	r4, r4, r5
 80062c0:	10a4      	asrs	r4, r4, #2
 80062c2:	2600      	movs	r6, #0
 80062c4:	42a6      	cmp	r6, r4
 80062c6:	d109      	bne.n	80062dc <__libc_init_array+0x24>
 80062c8:	4d0b      	ldr	r5, [pc, #44]	; (80062f8 <__libc_init_array+0x40>)
 80062ca:	4c0c      	ldr	r4, [pc, #48]	; (80062fc <__libc_init_array+0x44>)
 80062cc:	f002 fd7e 	bl	8008dcc <_init>
 80062d0:	1b64      	subs	r4, r4, r5
 80062d2:	10a4      	asrs	r4, r4, #2
 80062d4:	2600      	movs	r6, #0
 80062d6:	42a6      	cmp	r6, r4
 80062d8:	d105      	bne.n	80062e6 <__libc_init_array+0x2e>
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e0:	4798      	blx	r3
 80062e2:	3601      	adds	r6, #1
 80062e4:	e7ee      	b.n	80062c4 <__libc_init_array+0xc>
 80062e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ea:	4798      	blx	r3
 80062ec:	3601      	adds	r6, #1
 80062ee:	e7f2      	b.n	80062d6 <__libc_init_array+0x1e>
 80062f0:	0800928c 	.word	0x0800928c
 80062f4:	0800928c 	.word	0x0800928c
 80062f8:	0800928c 	.word	0x0800928c
 80062fc:	08009290 	.word	0x08009290

08006300 <memset>:
 8006300:	4402      	add	r2, r0
 8006302:	4603      	mov	r3, r0
 8006304:	4293      	cmp	r3, r2
 8006306:	d100      	bne.n	800630a <memset+0xa>
 8006308:	4770      	bx	lr
 800630a:	f803 1b01 	strb.w	r1, [r3], #1
 800630e:	e7f9      	b.n	8006304 <memset+0x4>

08006310 <__cvt>:
 8006310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006314:	ec55 4b10 	vmov	r4, r5, d0
 8006318:	2d00      	cmp	r5, #0
 800631a:	460e      	mov	r6, r1
 800631c:	4619      	mov	r1, r3
 800631e:	462b      	mov	r3, r5
 8006320:	bfbb      	ittet	lt
 8006322:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006326:	461d      	movlt	r5, r3
 8006328:	2300      	movge	r3, #0
 800632a:	232d      	movlt	r3, #45	; 0x2d
 800632c:	700b      	strb	r3, [r1, #0]
 800632e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006330:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006334:	4691      	mov	r9, r2
 8006336:	f023 0820 	bic.w	r8, r3, #32
 800633a:	bfbc      	itt	lt
 800633c:	4622      	movlt	r2, r4
 800633e:	4614      	movlt	r4, r2
 8006340:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006344:	d005      	beq.n	8006352 <__cvt+0x42>
 8006346:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800634a:	d100      	bne.n	800634e <__cvt+0x3e>
 800634c:	3601      	adds	r6, #1
 800634e:	2102      	movs	r1, #2
 8006350:	e000      	b.n	8006354 <__cvt+0x44>
 8006352:	2103      	movs	r1, #3
 8006354:	ab03      	add	r3, sp, #12
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	ab02      	add	r3, sp, #8
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	ec45 4b10 	vmov	d0, r4, r5
 8006360:	4653      	mov	r3, sl
 8006362:	4632      	mov	r2, r6
 8006364:	f000 fe18 	bl	8006f98 <_dtoa_r>
 8006368:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800636c:	4607      	mov	r7, r0
 800636e:	d102      	bne.n	8006376 <__cvt+0x66>
 8006370:	f019 0f01 	tst.w	r9, #1
 8006374:	d022      	beq.n	80063bc <__cvt+0xac>
 8006376:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800637a:	eb07 0906 	add.w	r9, r7, r6
 800637e:	d110      	bne.n	80063a2 <__cvt+0x92>
 8006380:	783b      	ldrb	r3, [r7, #0]
 8006382:	2b30      	cmp	r3, #48	; 0x30
 8006384:	d10a      	bne.n	800639c <__cvt+0x8c>
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7fa fb9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006392:	b918      	cbnz	r0, 800639c <__cvt+0x8c>
 8006394:	f1c6 0601 	rsb	r6, r6, #1
 8006398:	f8ca 6000 	str.w	r6, [sl]
 800639c:	f8da 3000 	ldr.w	r3, [sl]
 80063a0:	4499      	add	r9, r3
 80063a2:	2200      	movs	r2, #0
 80063a4:	2300      	movs	r3, #0
 80063a6:	4620      	mov	r0, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7fa fb8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ae:	b108      	cbz	r0, 80063b4 <__cvt+0xa4>
 80063b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80063b4:	2230      	movs	r2, #48	; 0x30
 80063b6:	9b03      	ldr	r3, [sp, #12]
 80063b8:	454b      	cmp	r3, r9
 80063ba:	d307      	bcc.n	80063cc <__cvt+0xbc>
 80063bc:	9b03      	ldr	r3, [sp, #12]
 80063be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063c0:	1bdb      	subs	r3, r3, r7
 80063c2:	4638      	mov	r0, r7
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	b004      	add	sp, #16
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	9103      	str	r1, [sp, #12]
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	e7f0      	b.n	80063b6 <__cvt+0xa6>

080063d4 <__exponent>:
 80063d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063d6:	4603      	mov	r3, r0
 80063d8:	2900      	cmp	r1, #0
 80063da:	bfb8      	it	lt
 80063dc:	4249      	neglt	r1, r1
 80063de:	f803 2b02 	strb.w	r2, [r3], #2
 80063e2:	bfb4      	ite	lt
 80063e4:	222d      	movlt	r2, #45	; 0x2d
 80063e6:	222b      	movge	r2, #43	; 0x2b
 80063e8:	2909      	cmp	r1, #9
 80063ea:	7042      	strb	r2, [r0, #1]
 80063ec:	dd2a      	ble.n	8006444 <__exponent+0x70>
 80063ee:	f10d 0407 	add.w	r4, sp, #7
 80063f2:	46a4      	mov	ip, r4
 80063f4:	270a      	movs	r7, #10
 80063f6:	46a6      	mov	lr, r4
 80063f8:	460a      	mov	r2, r1
 80063fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80063fe:	fb07 1516 	mls	r5, r7, r6, r1
 8006402:	3530      	adds	r5, #48	; 0x30
 8006404:	2a63      	cmp	r2, #99	; 0x63
 8006406:	f104 34ff 	add.w	r4, r4, #4294967295
 800640a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800640e:	4631      	mov	r1, r6
 8006410:	dcf1      	bgt.n	80063f6 <__exponent+0x22>
 8006412:	3130      	adds	r1, #48	; 0x30
 8006414:	f1ae 0502 	sub.w	r5, lr, #2
 8006418:	f804 1c01 	strb.w	r1, [r4, #-1]
 800641c:	1c44      	adds	r4, r0, #1
 800641e:	4629      	mov	r1, r5
 8006420:	4561      	cmp	r1, ip
 8006422:	d30a      	bcc.n	800643a <__exponent+0x66>
 8006424:	f10d 0209 	add.w	r2, sp, #9
 8006428:	eba2 020e 	sub.w	r2, r2, lr
 800642c:	4565      	cmp	r5, ip
 800642e:	bf88      	it	hi
 8006430:	2200      	movhi	r2, #0
 8006432:	4413      	add	r3, r2
 8006434:	1a18      	subs	r0, r3, r0
 8006436:	b003      	add	sp, #12
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800643e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006442:	e7ed      	b.n	8006420 <__exponent+0x4c>
 8006444:	2330      	movs	r3, #48	; 0x30
 8006446:	3130      	adds	r1, #48	; 0x30
 8006448:	7083      	strb	r3, [r0, #2]
 800644a:	70c1      	strb	r1, [r0, #3]
 800644c:	1d03      	adds	r3, r0, #4
 800644e:	e7f1      	b.n	8006434 <__exponent+0x60>

08006450 <_printf_float>:
 8006450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006454:	ed2d 8b02 	vpush	{d8}
 8006458:	b08d      	sub	sp, #52	; 0x34
 800645a:	460c      	mov	r4, r1
 800645c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006460:	4616      	mov	r6, r2
 8006462:	461f      	mov	r7, r3
 8006464:	4605      	mov	r5, r0
 8006466:	f001 fd3b 	bl	8007ee0 <_localeconv_r>
 800646a:	f8d0 a000 	ldr.w	sl, [r0]
 800646e:	4650      	mov	r0, sl
 8006470:	f7f9 feae 	bl	80001d0 <strlen>
 8006474:	2300      	movs	r3, #0
 8006476:	930a      	str	r3, [sp, #40]	; 0x28
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	9305      	str	r3, [sp, #20]
 800647c:	f8d8 3000 	ldr.w	r3, [r8]
 8006480:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006484:	3307      	adds	r3, #7
 8006486:	f023 0307 	bic.w	r3, r3, #7
 800648a:	f103 0208 	add.w	r2, r3, #8
 800648e:	f8c8 2000 	str.w	r2, [r8]
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800649a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800649e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064a2:	9307      	str	r3, [sp, #28]
 80064a4:	f8cd 8018 	str.w	r8, [sp, #24]
 80064a8:	ee08 0a10 	vmov	s16, r0
 80064ac:	4b9f      	ldr	r3, [pc, #636]	; (800672c <_printf_float+0x2dc>)
 80064ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	f7fa fb39 	bl	8000b2c <__aeabi_dcmpun>
 80064ba:	bb88      	cbnz	r0, 8006520 <_printf_float+0xd0>
 80064bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064c0:	4b9a      	ldr	r3, [pc, #616]	; (800672c <_printf_float+0x2dc>)
 80064c2:	f04f 32ff 	mov.w	r2, #4294967295
 80064c6:	f7fa fb13 	bl	8000af0 <__aeabi_dcmple>
 80064ca:	bb48      	cbnz	r0, 8006520 <_printf_float+0xd0>
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	f7fa fb02 	bl	8000adc <__aeabi_dcmplt>
 80064d8:	b110      	cbz	r0, 80064e0 <_printf_float+0x90>
 80064da:	232d      	movs	r3, #45	; 0x2d
 80064dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064e0:	4b93      	ldr	r3, [pc, #588]	; (8006730 <_printf_float+0x2e0>)
 80064e2:	4894      	ldr	r0, [pc, #592]	; (8006734 <_printf_float+0x2e4>)
 80064e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80064e8:	bf94      	ite	ls
 80064ea:	4698      	movls	r8, r3
 80064ec:	4680      	movhi	r8, r0
 80064ee:	2303      	movs	r3, #3
 80064f0:	6123      	str	r3, [r4, #16]
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	f023 0204 	bic.w	r2, r3, #4
 80064f8:	6022      	str	r2, [r4, #0]
 80064fa:	f04f 0900 	mov.w	r9, #0
 80064fe:	9700      	str	r7, [sp, #0]
 8006500:	4633      	mov	r3, r6
 8006502:	aa0b      	add	r2, sp, #44	; 0x2c
 8006504:	4621      	mov	r1, r4
 8006506:	4628      	mov	r0, r5
 8006508:	f000 f9d8 	bl	80068bc <_printf_common>
 800650c:	3001      	adds	r0, #1
 800650e:	f040 8090 	bne.w	8006632 <_printf_float+0x1e2>
 8006512:	f04f 30ff 	mov.w	r0, #4294967295
 8006516:	b00d      	add	sp, #52	; 0x34
 8006518:	ecbd 8b02 	vpop	{d8}
 800651c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006520:	4642      	mov	r2, r8
 8006522:	464b      	mov	r3, r9
 8006524:	4640      	mov	r0, r8
 8006526:	4649      	mov	r1, r9
 8006528:	f7fa fb00 	bl	8000b2c <__aeabi_dcmpun>
 800652c:	b140      	cbz	r0, 8006540 <_printf_float+0xf0>
 800652e:	464b      	mov	r3, r9
 8006530:	2b00      	cmp	r3, #0
 8006532:	bfbc      	itt	lt
 8006534:	232d      	movlt	r3, #45	; 0x2d
 8006536:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800653a:	487f      	ldr	r0, [pc, #508]	; (8006738 <_printf_float+0x2e8>)
 800653c:	4b7f      	ldr	r3, [pc, #508]	; (800673c <_printf_float+0x2ec>)
 800653e:	e7d1      	b.n	80064e4 <_printf_float+0x94>
 8006540:	6863      	ldr	r3, [r4, #4]
 8006542:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006546:	9206      	str	r2, [sp, #24]
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	d13f      	bne.n	80065cc <_printf_float+0x17c>
 800654c:	2306      	movs	r3, #6
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	9b05      	ldr	r3, [sp, #20]
 8006552:	6861      	ldr	r1, [r4, #4]
 8006554:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006558:	2300      	movs	r3, #0
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	ab0a      	add	r3, sp, #40	; 0x28
 800655e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006562:	ab09      	add	r3, sp, #36	; 0x24
 8006564:	ec49 8b10 	vmov	d0, r8, r9
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	6022      	str	r2, [r4, #0]
 800656c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff fecd 	bl	8006310 <__cvt>
 8006576:	9b06      	ldr	r3, [sp, #24]
 8006578:	9909      	ldr	r1, [sp, #36]	; 0x24
 800657a:	2b47      	cmp	r3, #71	; 0x47
 800657c:	4680      	mov	r8, r0
 800657e:	d108      	bne.n	8006592 <_printf_float+0x142>
 8006580:	1cc8      	adds	r0, r1, #3
 8006582:	db02      	blt.n	800658a <_printf_float+0x13a>
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	4299      	cmp	r1, r3
 8006588:	dd41      	ble.n	800660e <_printf_float+0x1be>
 800658a:	f1ab 0b02 	sub.w	fp, fp, #2
 800658e:	fa5f fb8b 	uxtb.w	fp, fp
 8006592:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006596:	d820      	bhi.n	80065da <_printf_float+0x18a>
 8006598:	3901      	subs	r1, #1
 800659a:	465a      	mov	r2, fp
 800659c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065a0:	9109      	str	r1, [sp, #36]	; 0x24
 80065a2:	f7ff ff17 	bl	80063d4 <__exponent>
 80065a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065a8:	1813      	adds	r3, r2, r0
 80065aa:	2a01      	cmp	r2, #1
 80065ac:	4681      	mov	r9, r0
 80065ae:	6123      	str	r3, [r4, #16]
 80065b0:	dc02      	bgt.n	80065b8 <_printf_float+0x168>
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	07d2      	lsls	r2, r2, #31
 80065b6:	d501      	bpl.n	80065bc <_printf_float+0x16c>
 80065b8:	3301      	adds	r3, #1
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d09c      	beq.n	80064fe <_printf_float+0xae>
 80065c4:	232d      	movs	r3, #45	; 0x2d
 80065c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ca:	e798      	b.n	80064fe <_printf_float+0xae>
 80065cc:	9a06      	ldr	r2, [sp, #24]
 80065ce:	2a47      	cmp	r2, #71	; 0x47
 80065d0:	d1be      	bne.n	8006550 <_printf_float+0x100>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1bc      	bne.n	8006550 <_printf_float+0x100>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e7b9      	b.n	800654e <_printf_float+0xfe>
 80065da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80065de:	d118      	bne.n	8006612 <_printf_float+0x1c2>
 80065e0:	2900      	cmp	r1, #0
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	dd0b      	ble.n	80065fe <_printf_float+0x1ae>
 80065e6:	6121      	str	r1, [r4, #16]
 80065e8:	b913      	cbnz	r3, 80065f0 <_printf_float+0x1a0>
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	07d0      	lsls	r0, r2, #31
 80065ee:	d502      	bpl.n	80065f6 <_printf_float+0x1a6>
 80065f0:	3301      	adds	r3, #1
 80065f2:	440b      	add	r3, r1
 80065f4:	6123      	str	r3, [r4, #16]
 80065f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80065f8:	f04f 0900 	mov.w	r9, #0
 80065fc:	e7de      	b.n	80065bc <_printf_float+0x16c>
 80065fe:	b913      	cbnz	r3, 8006606 <_printf_float+0x1b6>
 8006600:	6822      	ldr	r2, [r4, #0]
 8006602:	07d2      	lsls	r2, r2, #31
 8006604:	d501      	bpl.n	800660a <_printf_float+0x1ba>
 8006606:	3302      	adds	r3, #2
 8006608:	e7f4      	b.n	80065f4 <_printf_float+0x1a4>
 800660a:	2301      	movs	r3, #1
 800660c:	e7f2      	b.n	80065f4 <_printf_float+0x1a4>
 800660e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006614:	4299      	cmp	r1, r3
 8006616:	db05      	blt.n	8006624 <_printf_float+0x1d4>
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	6121      	str	r1, [r4, #16]
 800661c:	07d8      	lsls	r0, r3, #31
 800661e:	d5ea      	bpl.n	80065f6 <_printf_float+0x1a6>
 8006620:	1c4b      	adds	r3, r1, #1
 8006622:	e7e7      	b.n	80065f4 <_printf_float+0x1a4>
 8006624:	2900      	cmp	r1, #0
 8006626:	bfd4      	ite	le
 8006628:	f1c1 0202 	rsble	r2, r1, #2
 800662c:	2201      	movgt	r2, #1
 800662e:	4413      	add	r3, r2
 8006630:	e7e0      	b.n	80065f4 <_printf_float+0x1a4>
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	055a      	lsls	r2, r3, #21
 8006636:	d407      	bmi.n	8006648 <_printf_float+0x1f8>
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	4642      	mov	r2, r8
 800663c:	4631      	mov	r1, r6
 800663e:	4628      	mov	r0, r5
 8006640:	47b8      	blx	r7
 8006642:	3001      	adds	r0, #1
 8006644:	d12c      	bne.n	80066a0 <_printf_float+0x250>
 8006646:	e764      	b.n	8006512 <_printf_float+0xc2>
 8006648:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800664c:	f240 80e0 	bls.w	8006810 <_printf_float+0x3c0>
 8006650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006654:	2200      	movs	r2, #0
 8006656:	2300      	movs	r3, #0
 8006658:	f7fa fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800665c:	2800      	cmp	r0, #0
 800665e:	d034      	beq.n	80066ca <_printf_float+0x27a>
 8006660:	4a37      	ldr	r2, [pc, #220]	; (8006740 <_printf_float+0x2f0>)
 8006662:	2301      	movs	r3, #1
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	f43f af51 	beq.w	8006512 <_printf_float+0xc2>
 8006670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006674:	429a      	cmp	r2, r3
 8006676:	db02      	blt.n	800667e <_printf_float+0x22e>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	07d8      	lsls	r0, r3, #31
 800667c:	d510      	bpl.n	80066a0 <_printf_float+0x250>
 800667e:	ee18 3a10 	vmov	r3, s16
 8006682:	4652      	mov	r2, sl
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	f43f af41 	beq.w	8006512 <_printf_float+0xc2>
 8006690:	f04f 0800 	mov.w	r8, #0
 8006694:	f104 091a 	add.w	r9, r4, #26
 8006698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800669a:	3b01      	subs	r3, #1
 800669c:	4543      	cmp	r3, r8
 800669e:	dc09      	bgt.n	80066b4 <_printf_float+0x264>
 80066a0:	6823      	ldr	r3, [r4, #0]
 80066a2:	079b      	lsls	r3, r3, #30
 80066a4:	f100 8105 	bmi.w	80068b2 <_printf_float+0x462>
 80066a8:	68e0      	ldr	r0, [r4, #12]
 80066aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ac:	4298      	cmp	r0, r3
 80066ae:	bfb8      	it	lt
 80066b0:	4618      	movlt	r0, r3
 80066b2:	e730      	b.n	8006516 <_printf_float+0xc6>
 80066b4:	2301      	movs	r3, #1
 80066b6:	464a      	mov	r2, r9
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b8      	blx	r7
 80066be:	3001      	adds	r0, #1
 80066c0:	f43f af27 	beq.w	8006512 <_printf_float+0xc2>
 80066c4:	f108 0801 	add.w	r8, r8, #1
 80066c8:	e7e6      	b.n	8006698 <_printf_float+0x248>
 80066ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dc39      	bgt.n	8006744 <_printf_float+0x2f4>
 80066d0:	4a1b      	ldr	r2, [pc, #108]	; (8006740 <_printf_float+0x2f0>)
 80066d2:	2301      	movs	r3, #1
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f af19 	beq.w	8006512 <_printf_float+0xc2>
 80066e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e4:	4313      	orrs	r3, r2
 80066e6:	d102      	bne.n	80066ee <_printf_float+0x29e>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	07d9      	lsls	r1, r3, #31
 80066ec:	d5d8      	bpl.n	80066a0 <_printf_float+0x250>
 80066ee:	ee18 3a10 	vmov	r3, s16
 80066f2:	4652      	mov	r2, sl
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	f43f af09 	beq.w	8006512 <_printf_float+0xc2>
 8006700:	f04f 0900 	mov.w	r9, #0
 8006704:	f104 0a1a 	add.w	sl, r4, #26
 8006708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800670a:	425b      	negs	r3, r3
 800670c:	454b      	cmp	r3, r9
 800670e:	dc01      	bgt.n	8006714 <_printf_float+0x2c4>
 8006710:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006712:	e792      	b.n	800663a <_printf_float+0x1ea>
 8006714:	2301      	movs	r3, #1
 8006716:	4652      	mov	r2, sl
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f aef7 	beq.w	8006512 <_printf_float+0xc2>
 8006724:	f109 0901 	add.w	r9, r9, #1
 8006728:	e7ee      	b.n	8006708 <_printf_float+0x2b8>
 800672a:	bf00      	nop
 800672c:	7fefffff 	.word	0x7fefffff
 8006730:	08008ea4 	.word	0x08008ea4
 8006734:	08008ea8 	.word	0x08008ea8
 8006738:	08008eb0 	.word	0x08008eb0
 800673c:	08008eac 	.word	0x08008eac
 8006740:	08008eb4 	.word	0x08008eb4
 8006744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006748:	429a      	cmp	r2, r3
 800674a:	bfa8      	it	ge
 800674c:	461a      	movge	r2, r3
 800674e:	2a00      	cmp	r2, #0
 8006750:	4691      	mov	r9, r2
 8006752:	dc37      	bgt.n	80067c4 <_printf_float+0x374>
 8006754:	f04f 0b00 	mov.w	fp, #0
 8006758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800675c:	f104 021a 	add.w	r2, r4, #26
 8006760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006762:	9305      	str	r3, [sp, #20]
 8006764:	eba3 0309 	sub.w	r3, r3, r9
 8006768:	455b      	cmp	r3, fp
 800676a:	dc33      	bgt.n	80067d4 <_printf_float+0x384>
 800676c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006770:	429a      	cmp	r2, r3
 8006772:	db3b      	blt.n	80067ec <_printf_float+0x39c>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	07da      	lsls	r2, r3, #31
 8006778:	d438      	bmi.n	80067ec <_printf_float+0x39c>
 800677a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677c:	9b05      	ldr	r3, [sp, #20]
 800677e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	eba2 0901 	sub.w	r9, r2, r1
 8006786:	4599      	cmp	r9, r3
 8006788:	bfa8      	it	ge
 800678a:	4699      	movge	r9, r3
 800678c:	f1b9 0f00 	cmp.w	r9, #0
 8006790:	dc35      	bgt.n	80067fe <_printf_float+0x3ae>
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800679a:	f104 0a1a 	add.w	sl, r4, #26
 800679e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067a2:	1a9b      	subs	r3, r3, r2
 80067a4:	eba3 0309 	sub.w	r3, r3, r9
 80067a8:	4543      	cmp	r3, r8
 80067aa:	f77f af79 	ble.w	80066a0 <_printf_float+0x250>
 80067ae:	2301      	movs	r3, #1
 80067b0:	4652      	mov	r2, sl
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	f43f aeaa 	beq.w	8006512 <_printf_float+0xc2>
 80067be:	f108 0801 	add.w	r8, r8, #1
 80067c2:	e7ec      	b.n	800679e <_printf_float+0x34e>
 80067c4:	4613      	mov	r3, r2
 80067c6:	4631      	mov	r1, r6
 80067c8:	4642      	mov	r2, r8
 80067ca:	4628      	mov	r0, r5
 80067cc:	47b8      	blx	r7
 80067ce:	3001      	adds	r0, #1
 80067d0:	d1c0      	bne.n	8006754 <_printf_float+0x304>
 80067d2:	e69e      	b.n	8006512 <_printf_float+0xc2>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	9205      	str	r2, [sp, #20]
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f ae97 	beq.w	8006512 <_printf_float+0xc2>
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	f10b 0b01 	add.w	fp, fp, #1
 80067ea:	e7b9      	b.n	8006760 <_printf_float+0x310>
 80067ec:	ee18 3a10 	vmov	r3, s16
 80067f0:	4652      	mov	r2, sl
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1be      	bne.n	800677a <_printf_float+0x32a>
 80067fc:	e689      	b.n	8006512 <_printf_float+0xc2>
 80067fe:	9a05      	ldr	r2, [sp, #20]
 8006800:	464b      	mov	r3, r9
 8006802:	4442      	add	r2, r8
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	d1c1      	bne.n	8006792 <_printf_float+0x342>
 800680e:	e680      	b.n	8006512 <_printf_float+0xc2>
 8006810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006812:	2a01      	cmp	r2, #1
 8006814:	dc01      	bgt.n	800681a <_printf_float+0x3ca>
 8006816:	07db      	lsls	r3, r3, #31
 8006818:	d538      	bpl.n	800688c <_printf_float+0x43c>
 800681a:	2301      	movs	r3, #1
 800681c:	4642      	mov	r2, r8
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae74 	beq.w	8006512 <_printf_float+0xc2>
 800682a:	ee18 3a10 	vmov	r3, s16
 800682e:	4652      	mov	r2, sl
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f ae6b 	beq.w	8006512 <_printf_float+0xc2>
 800683c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006840:	2200      	movs	r2, #0
 8006842:	2300      	movs	r3, #0
 8006844:	f7fa f940 	bl	8000ac8 <__aeabi_dcmpeq>
 8006848:	b9d8      	cbnz	r0, 8006882 <_printf_float+0x432>
 800684a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800684c:	f108 0201 	add.w	r2, r8, #1
 8006850:	3b01      	subs	r3, #1
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	d10e      	bne.n	800687a <_printf_float+0x42a>
 800685c:	e659      	b.n	8006512 <_printf_float+0xc2>
 800685e:	2301      	movs	r3, #1
 8006860:	4652      	mov	r2, sl
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	f43f ae52 	beq.w	8006512 <_printf_float+0xc2>
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006874:	3b01      	subs	r3, #1
 8006876:	4543      	cmp	r3, r8
 8006878:	dcf1      	bgt.n	800685e <_printf_float+0x40e>
 800687a:	464b      	mov	r3, r9
 800687c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006880:	e6dc      	b.n	800663c <_printf_float+0x1ec>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	f104 0a1a 	add.w	sl, r4, #26
 800688a:	e7f2      	b.n	8006872 <_printf_float+0x422>
 800688c:	2301      	movs	r3, #1
 800688e:	4642      	mov	r2, r8
 8006890:	e7df      	b.n	8006852 <_printf_float+0x402>
 8006892:	2301      	movs	r3, #1
 8006894:	464a      	mov	r2, r9
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f ae38 	beq.w	8006512 <_printf_float+0xc2>
 80068a2:	f108 0801 	add.w	r8, r8, #1
 80068a6:	68e3      	ldr	r3, [r4, #12]
 80068a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80068aa:	1a5b      	subs	r3, r3, r1
 80068ac:	4543      	cmp	r3, r8
 80068ae:	dcf0      	bgt.n	8006892 <_printf_float+0x442>
 80068b0:	e6fa      	b.n	80066a8 <_printf_float+0x258>
 80068b2:	f04f 0800 	mov.w	r8, #0
 80068b6:	f104 0919 	add.w	r9, r4, #25
 80068ba:	e7f4      	b.n	80068a6 <_printf_float+0x456>

080068bc <_printf_common>:
 80068bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068c0:	4616      	mov	r6, r2
 80068c2:	4699      	mov	r9, r3
 80068c4:	688a      	ldr	r2, [r1, #8]
 80068c6:	690b      	ldr	r3, [r1, #16]
 80068c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068cc:	4293      	cmp	r3, r2
 80068ce:	bfb8      	it	lt
 80068d0:	4613      	movlt	r3, r2
 80068d2:	6033      	str	r3, [r6, #0]
 80068d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068d8:	4607      	mov	r7, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	b10a      	cbz	r2, 80068e2 <_printf_common+0x26>
 80068de:	3301      	adds	r3, #1
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	6823      	ldr	r3, [r4, #0]
 80068e4:	0699      	lsls	r1, r3, #26
 80068e6:	bf42      	ittt	mi
 80068e8:	6833      	ldrmi	r3, [r6, #0]
 80068ea:	3302      	addmi	r3, #2
 80068ec:	6033      	strmi	r3, [r6, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	f015 0506 	ands.w	r5, r5, #6
 80068f4:	d106      	bne.n	8006904 <_printf_common+0x48>
 80068f6:	f104 0a19 	add.w	sl, r4, #25
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	6832      	ldr	r2, [r6, #0]
 80068fe:	1a9b      	subs	r3, r3, r2
 8006900:	42ab      	cmp	r3, r5
 8006902:	dc26      	bgt.n	8006952 <_printf_common+0x96>
 8006904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006908:	1e13      	subs	r3, r2, #0
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	bf18      	it	ne
 800690e:	2301      	movne	r3, #1
 8006910:	0692      	lsls	r2, r2, #26
 8006912:	d42b      	bmi.n	800696c <_printf_common+0xb0>
 8006914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006918:	4649      	mov	r1, r9
 800691a:	4638      	mov	r0, r7
 800691c:	47c0      	blx	r8
 800691e:	3001      	adds	r0, #1
 8006920:	d01e      	beq.n	8006960 <_printf_common+0xa4>
 8006922:	6823      	ldr	r3, [r4, #0]
 8006924:	68e5      	ldr	r5, [r4, #12]
 8006926:	6832      	ldr	r2, [r6, #0]
 8006928:	f003 0306 	and.w	r3, r3, #6
 800692c:	2b04      	cmp	r3, #4
 800692e:	bf08      	it	eq
 8006930:	1aad      	subeq	r5, r5, r2
 8006932:	68a3      	ldr	r3, [r4, #8]
 8006934:	6922      	ldr	r2, [r4, #16]
 8006936:	bf0c      	ite	eq
 8006938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800693c:	2500      	movne	r5, #0
 800693e:	4293      	cmp	r3, r2
 8006940:	bfc4      	itt	gt
 8006942:	1a9b      	subgt	r3, r3, r2
 8006944:	18ed      	addgt	r5, r5, r3
 8006946:	2600      	movs	r6, #0
 8006948:	341a      	adds	r4, #26
 800694a:	42b5      	cmp	r5, r6
 800694c:	d11a      	bne.n	8006984 <_printf_common+0xc8>
 800694e:	2000      	movs	r0, #0
 8006950:	e008      	b.n	8006964 <_printf_common+0xa8>
 8006952:	2301      	movs	r3, #1
 8006954:	4652      	mov	r2, sl
 8006956:	4649      	mov	r1, r9
 8006958:	4638      	mov	r0, r7
 800695a:	47c0      	blx	r8
 800695c:	3001      	adds	r0, #1
 800695e:	d103      	bne.n	8006968 <_printf_common+0xac>
 8006960:	f04f 30ff 	mov.w	r0, #4294967295
 8006964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006968:	3501      	adds	r5, #1
 800696a:	e7c6      	b.n	80068fa <_printf_common+0x3e>
 800696c:	18e1      	adds	r1, r4, r3
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	2030      	movs	r0, #48	; 0x30
 8006972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006976:	4422      	add	r2, r4
 8006978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800697c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006980:	3302      	adds	r3, #2
 8006982:	e7c7      	b.n	8006914 <_printf_common+0x58>
 8006984:	2301      	movs	r3, #1
 8006986:	4622      	mov	r2, r4
 8006988:	4649      	mov	r1, r9
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	3001      	adds	r0, #1
 8006990:	d0e6      	beq.n	8006960 <_printf_common+0xa4>
 8006992:	3601      	adds	r6, #1
 8006994:	e7d9      	b.n	800694a <_printf_common+0x8e>
	...

08006998 <_printf_i>:
 8006998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	460c      	mov	r4, r1
 800699e:	4691      	mov	r9, r2
 80069a0:	7e27      	ldrb	r7, [r4, #24]
 80069a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80069a4:	2f78      	cmp	r7, #120	; 0x78
 80069a6:	4680      	mov	r8, r0
 80069a8:	469a      	mov	sl, r3
 80069aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069ae:	d807      	bhi.n	80069c0 <_printf_i+0x28>
 80069b0:	2f62      	cmp	r7, #98	; 0x62
 80069b2:	d80a      	bhi.n	80069ca <_printf_i+0x32>
 80069b4:	2f00      	cmp	r7, #0
 80069b6:	f000 80d8 	beq.w	8006b6a <_printf_i+0x1d2>
 80069ba:	2f58      	cmp	r7, #88	; 0x58
 80069bc:	f000 80a3 	beq.w	8006b06 <_printf_i+0x16e>
 80069c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069c8:	e03a      	b.n	8006a40 <_printf_i+0xa8>
 80069ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069ce:	2b15      	cmp	r3, #21
 80069d0:	d8f6      	bhi.n	80069c0 <_printf_i+0x28>
 80069d2:	a001      	add	r0, pc, #4	; (adr r0, 80069d8 <_printf_i+0x40>)
 80069d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80069d8:	08006a31 	.word	0x08006a31
 80069dc:	08006a45 	.word	0x08006a45
 80069e0:	080069c1 	.word	0x080069c1
 80069e4:	080069c1 	.word	0x080069c1
 80069e8:	080069c1 	.word	0x080069c1
 80069ec:	080069c1 	.word	0x080069c1
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	080069c1 	.word	0x080069c1
 80069f8:	080069c1 	.word	0x080069c1
 80069fc:	080069c1 	.word	0x080069c1
 8006a00:	080069c1 	.word	0x080069c1
 8006a04:	08006b51 	.word	0x08006b51
 8006a08:	08006a75 	.word	0x08006a75
 8006a0c:	08006b33 	.word	0x08006b33
 8006a10:	080069c1 	.word	0x080069c1
 8006a14:	080069c1 	.word	0x080069c1
 8006a18:	08006b73 	.word	0x08006b73
 8006a1c:	080069c1 	.word	0x080069c1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069c1 	.word	0x080069c1
 8006a28:	080069c1 	.word	0x080069c1
 8006a2c:	08006b3b 	.word	0x08006b3b
 8006a30:	680b      	ldr	r3, [r1, #0]
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	600a      	str	r2, [r1, #0]
 8006a38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0a3      	b.n	8006b8c <_printf_i+0x1f4>
 8006a44:	6825      	ldr	r5, [r4, #0]
 8006a46:	6808      	ldr	r0, [r1, #0]
 8006a48:	062e      	lsls	r6, r5, #24
 8006a4a:	f100 0304 	add.w	r3, r0, #4
 8006a4e:	d50a      	bpl.n	8006a66 <_printf_i+0xce>
 8006a50:	6805      	ldr	r5, [r0, #0]
 8006a52:	600b      	str	r3, [r1, #0]
 8006a54:	2d00      	cmp	r5, #0
 8006a56:	da03      	bge.n	8006a60 <_printf_i+0xc8>
 8006a58:	232d      	movs	r3, #45	; 0x2d
 8006a5a:	426d      	negs	r5, r5
 8006a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a60:	485e      	ldr	r0, [pc, #376]	; (8006bdc <_printf_i+0x244>)
 8006a62:	230a      	movs	r3, #10
 8006a64:	e019      	b.n	8006a9a <_printf_i+0x102>
 8006a66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006a6a:	6805      	ldr	r5, [r0, #0]
 8006a6c:	600b      	str	r3, [r1, #0]
 8006a6e:	bf18      	it	ne
 8006a70:	b22d      	sxthne	r5, r5
 8006a72:	e7ef      	b.n	8006a54 <_printf_i+0xbc>
 8006a74:	680b      	ldr	r3, [r1, #0]
 8006a76:	6825      	ldr	r5, [r4, #0]
 8006a78:	1d18      	adds	r0, r3, #4
 8006a7a:	6008      	str	r0, [r1, #0]
 8006a7c:	0628      	lsls	r0, r5, #24
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0xec>
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	e002      	b.n	8006a8a <_printf_i+0xf2>
 8006a84:	0669      	lsls	r1, r5, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0xe8>
 8006a88:	881d      	ldrh	r5, [r3, #0]
 8006a8a:	4854      	ldr	r0, [pc, #336]	; (8006bdc <_printf_i+0x244>)
 8006a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8006a8e:	bf0c      	ite	eq
 8006a90:	2308      	moveq	r3, #8
 8006a92:	230a      	movne	r3, #10
 8006a94:	2100      	movs	r1, #0
 8006a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a9a:	6866      	ldr	r6, [r4, #4]
 8006a9c:	60a6      	str	r6, [r4, #8]
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	bfa2      	ittt	ge
 8006aa2:	6821      	ldrge	r1, [r4, #0]
 8006aa4:	f021 0104 	bicge.w	r1, r1, #4
 8006aa8:	6021      	strge	r1, [r4, #0]
 8006aaa:	b90d      	cbnz	r5, 8006ab0 <_printf_i+0x118>
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d04d      	beq.n	8006b4c <_printf_i+0x1b4>
 8006ab0:	4616      	mov	r6, r2
 8006ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8006aba:	5dc7      	ldrb	r7, [r0, r7]
 8006abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ac0:	462f      	mov	r7, r5
 8006ac2:	42bb      	cmp	r3, r7
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	d9f4      	bls.n	8006ab2 <_printf_i+0x11a>
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d10b      	bne.n	8006ae4 <_printf_i+0x14c>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	07df      	lsls	r7, r3, #31
 8006ad0:	d508      	bpl.n	8006ae4 <_printf_i+0x14c>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	6861      	ldr	r1, [r4, #4]
 8006ad6:	4299      	cmp	r1, r3
 8006ad8:	bfde      	ittt	le
 8006ada:	2330      	movle	r3, #48	; 0x30
 8006adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ae4:	1b92      	subs	r2, r2, r6
 8006ae6:	6122      	str	r2, [r4, #16]
 8006ae8:	f8cd a000 	str.w	sl, [sp]
 8006aec:	464b      	mov	r3, r9
 8006aee:	aa03      	add	r2, sp, #12
 8006af0:	4621      	mov	r1, r4
 8006af2:	4640      	mov	r0, r8
 8006af4:	f7ff fee2 	bl	80068bc <_printf_common>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d14c      	bne.n	8006b96 <_printf_i+0x1fe>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	b004      	add	sp, #16
 8006b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b06:	4835      	ldr	r0, [pc, #212]	; (8006bdc <_printf_i+0x244>)
 8006b08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	680e      	ldr	r6, [r1, #0]
 8006b10:	061f      	lsls	r7, r3, #24
 8006b12:	f856 5b04 	ldr.w	r5, [r6], #4
 8006b16:	600e      	str	r6, [r1, #0]
 8006b18:	d514      	bpl.n	8006b44 <_printf_i+0x1ac>
 8006b1a:	07d9      	lsls	r1, r3, #31
 8006b1c:	bf44      	itt	mi
 8006b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b22:	6023      	strmi	r3, [r4, #0]
 8006b24:	b91d      	cbnz	r5, 8006b2e <_printf_i+0x196>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f023 0320 	bic.w	r3, r3, #32
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	2310      	movs	r3, #16
 8006b30:	e7b0      	b.n	8006a94 <_printf_i+0xfc>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	f043 0320 	orr.w	r3, r3, #32
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	2378      	movs	r3, #120	; 0x78
 8006b3c:	4828      	ldr	r0, [pc, #160]	; (8006be0 <_printf_i+0x248>)
 8006b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b42:	e7e3      	b.n	8006b0c <_printf_i+0x174>
 8006b44:	065e      	lsls	r6, r3, #25
 8006b46:	bf48      	it	mi
 8006b48:	b2ad      	uxthmi	r5, r5
 8006b4a:	e7e6      	b.n	8006b1a <_printf_i+0x182>
 8006b4c:	4616      	mov	r6, r2
 8006b4e:	e7bb      	b.n	8006ac8 <_printf_i+0x130>
 8006b50:	680b      	ldr	r3, [r1, #0]
 8006b52:	6826      	ldr	r6, [r4, #0]
 8006b54:	6960      	ldr	r0, [r4, #20]
 8006b56:	1d1d      	adds	r5, r3, #4
 8006b58:	600d      	str	r5, [r1, #0]
 8006b5a:	0635      	lsls	r5, r6, #24
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	d501      	bpl.n	8006b64 <_printf_i+0x1cc>
 8006b60:	6018      	str	r0, [r3, #0]
 8006b62:	e002      	b.n	8006b6a <_printf_i+0x1d2>
 8006b64:	0671      	lsls	r1, r6, #25
 8006b66:	d5fb      	bpl.n	8006b60 <_printf_i+0x1c8>
 8006b68:	8018      	strh	r0, [r3, #0]
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6123      	str	r3, [r4, #16]
 8006b6e:	4616      	mov	r6, r2
 8006b70:	e7ba      	b.n	8006ae8 <_printf_i+0x150>
 8006b72:	680b      	ldr	r3, [r1, #0]
 8006b74:	1d1a      	adds	r2, r3, #4
 8006b76:	600a      	str	r2, [r1, #0]
 8006b78:	681e      	ldr	r6, [r3, #0]
 8006b7a:	6862      	ldr	r2, [r4, #4]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f7f9 fb2e 	bl	80001e0 <memchr>
 8006b84:	b108      	cbz	r0, 8006b8a <_printf_i+0x1f2>
 8006b86:	1b80      	subs	r0, r0, r6
 8006b88:	6060      	str	r0, [r4, #4]
 8006b8a:	6863      	ldr	r3, [r4, #4]
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b94:	e7a8      	b.n	8006ae8 <_printf_i+0x150>
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	4632      	mov	r2, r6
 8006b9a:	4649      	mov	r1, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	47d0      	blx	sl
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0ab      	beq.n	8006afc <_printf_i+0x164>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	079b      	lsls	r3, r3, #30
 8006ba8:	d413      	bmi.n	8006bd2 <_printf_i+0x23a>
 8006baa:	68e0      	ldr	r0, [r4, #12]
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	4298      	cmp	r0, r3
 8006bb0:	bfb8      	it	lt
 8006bb2:	4618      	movlt	r0, r3
 8006bb4:	e7a4      	b.n	8006b00 <_printf_i+0x168>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4632      	mov	r2, r6
 8006bba:	4649      	mov	r1, r9
 8006bbc:	4640      	mov	r0, r8
 8006bbe:	47d0      	blx	sl
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d09b      	beq.n	8006afc <_printf_i+0x164>
 8006bc4:	3501      	adds	r5, #1
 8006bc6:	68e3      	ldr	r3, [r4, #12]
 8006bc8:	9903      	ldr	r1, [sp, #12]
 8006bca:	1a5b      	subs	r3, r3, r1
 8006bcc:	42ab      	cmp	r3, r5
 8006bce:	dcf2      	bgt.n	8006bb6 <_printf_i+0x21e>
 8006bd0:	e7eb      	b.n	8006baa <_printf_i+0x212>
 8006bd2:	2500      	movs	r5, #0
 8006bd4:	f104 0619 	add.w	r6, r4, #25
 8006bd8:	e7f5      	b.n	8006bc6 <_printf_i+0x22e>
 8006bda:	bf00      	nop
 8006bdc:	08008eb6 	.word	0x08008eb6
 8006be0:	08008ec7 	.word	0x08008ec7

08006be4 <iprintf>:
 8006be4:	b40f      	push	{r0, r1, r2, r3}
 8006be6:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <iprintf+0x2c>)
 8006be8:	b513      	push	{r0, r1, r4, lr}
 8006bea:	681c      	ldr	r4, [r3, #0]
 8006bec:	b124      	cbz	r4, 8006bf8 <iprintf+0x14>
 8006bee:	69a3      	ldr	r3, [r4, #24]
 8006bf0:	b913      	cbnz	r3, 8006bf8 <iprintf+0x14>
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f001 f8d6 	bl	8007da4 <__sinit>
 8006bf8:	ab05      	add	r3, sp, #20
 8006bfa:	9a04      	ldr	r2, [sp, #16]
 8006bfc:	68a1      	ldr	r1, [r4, #8]
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	4620      	mov	r0, r4
 8006c02:	f001 fe51 	bl	80088a8 <_vfiprintf_r>
 8006c06:	b002      	add	sp, #8
 8006c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0c:	b004      	add	sp, #16
 8006c0e:	4770      	bx	lr
 8006c10:	2000000c 	.word	0x2000000c

08006c14 <_puts_r>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	460e      	mov	r6, r1
 8006c18:	4605      	mov	r5, r0
 8006c1a:	b118      	cbz	r0, 8006c24 <_puts_r+0x10>
 8006c1c:	6983      	ldr	r3, [r0, #24]
 8006c1e:	b90b      	cbnz	r3, 8006c24 <_puts_r+0x10>
 8006c20:	f001 f8c0 	bl	8007da4 <__sinit>
 8006c24:	69ab      	ldr	r3, [r5, #24]
 8006c26:	68ac      	ldr	r4, [r5, #8]
 8006c28:	b913      	cbnz	r3, 8006c30 <_puts_r+0x1c>
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f001 f8ba 	bl	8007da4 <__sinit>
 8006c30:	4b2c      	ldr	r3, [pc, #176]	; (8006ce4 <_puts_r+0xd0>)
 8006c32:	429c      	cmp	r4, r3
 8006c34:	d120      	bne.n	8006c78 <_puts_r+0x64>
 8006c36:	686c      	ldr	r4, [r5, #4]
 8006c38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c3a:	07db      	lsls	r3, r3, #31
 8006c3c:	d405      	bmi.n	8006c4a <_puts_r+0x36>
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	0598      	lsls	r0, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_puts_r+0x36>
 8006c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c46:	f001 f950 	bl	8007eea <__retarget_lock_acquire_recursive>
 8006c4a:	89a3      	ldrh	r3, [r4, #12]
 8006c4c:	0719      	lsls	r1, r3, #28
 8006c4e:	d51d      	bpl.n	8006c8c <_puts_r+0x78>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	b1db      	cbz	r3, 8006c8c <_puts_r+0x78>
 8006c54:	3e01      	subs	r6, #1
 8006c56:	68a3      	ldr	r3, [r4, #8]
 8006c58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	60a3      	str	r3, [r4, #8]
 8006c60:	bb39      	cbnz	r1, 8006cb2 <_puts_r+0x9e>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	da38      	bge.n	8006cd8 <_puts_r+0xc4>
 8006c66:	4622      	mov	r2, r4
 8006c68:	210a      	movs	r1, #10
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f000 f848 	bl	8006d00 <__swbuf_r>
 8006c70:	3001      	adds	r0, #1
 8006c72:	d011      	beq.n	8006c98 <_puts_r+0x84>
 8006c74:	250a      	movs	r5, #10
 8006c76:	e011      	b.n	8006c9c <_puts_r+0x88>
 8006c78:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <_puts_r+0xd4>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	d101      	bne.n	8006c82 <_puts_r+0x6e>
 8006c7e:	68ac      	ldr	r4, [r5, #8]
 8006c80:	e7da      	b.n	8006c38 <_puts_r+0x24>
 8006c82:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <_puts_r+0xd8>)
 8006c84:	429c      	cmp	r4, r3
 8006c86:	bf08      	it	eq
 8006c88:	68ec      	ldreq	r4, [r5, #12]
 8006c8a:	e7d5      	b.n	8006c38 <_puts_r+0x24>
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f000 f888 	bl	8006da4 <__swsetup_r>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0dd      	beq.n	8006c54 <_puts_r+0x40>
 8006c98:	f04f 35ff 	mov.w	r5, #4294967295
 8006c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c9e:	07da      	lsls	r2, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_puts_r+0x9a>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	059b      	lsls	r3, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_puts_r+0x9a>
 8006ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006caa:	f001 f91f 	bl	8007eec <__retarget_lock_release_recursive>
 8006cae:	4628      	mov	r0, r5
 8006cb0:	bd70      	pop	{r4, r5, r6, pc}
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da04      	bge.n	8006cc0 <_puts_r+0xac>
 8006cb6:	69a2      	ldr	r2, [r4, #24]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	dc06      	bgt.n	8006cca <_puts_r+0xb6>
 8006cbc:	290a      	cmp	r1, #10
 8006cbe:	d004      	beq.n	8006cca <_puts_r+0xb6>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	7019      	strb	r1, [r3, #0]
 8006cc8:	e7c5      	b.n	8006c56 <_puts_r+0x42>
 8006cca:	4622      	mov	r2, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f000 f817 	bl	8006d00 <__swbuf_r>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d1bf      	bne.n	8006c56 <_puts_r+0x42>
 8006cd6:	e7df      	b.n	8006c98 <_puts_r+0x84>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	250a      	movs	r5, #10
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	701d      	strb	r5, [r3, #0]
 8006ce2:	e7db      	b.n	8006c9c <_puts_r+0x88>
 8006ce4:	08008f8c 	.word	0x08008f8c
 8006ce8:	08008fac 	.word	0x08008fac
 8006cec:	08008f6c 	.word	0x08008f6c

08006cf0 <puts>:
 8006cf0:	4b02      	ldr	r3, [pc, #8]	; (8006cfc <puts+0xc>)
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	6818      	ldr	r0, [r3, #0]
 8006cf6:	f7ff bf8d 	b.w	8006c14 <_puts_r>
 8006cfa:	bf00      	nop
 8006cfc:	2000000c 	.word	0x2000000c

08006d00 <__swbuf_r>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	460e      	mov	r6, r1
 8006d04:	4614      	mov	r4, r2
 8006d06:	4605      	mov	r5, r0
 8006d08:	b118      	cbz	r0, 8006d12 <__swbuf_r+0x12>
 8006d0a:	6983      	ldr	r3, [r0, #24]
 8006d0c:	b90b      	cbnz	r3, 8006d12 <__swbuf_r+0x12>
 8006d0e:	f001 f849 	bl	8007da4 <__sinit>
 8006d12:	4b21      	ldr	r3, [pc, #132]	; (8006d98 <__swbuf_r+0x98>)
 8006d14:	429c      	cmp	r4, r3
 8006d16:	d12b      	bne.n	8006d70 <__swbuf_r+0x70>
 8006d18:	686c      	ldr	r4, [r5, #4]
 8006d1a:	69a3      	ldr	r3, [r4, #24]
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	071a      	lsls	r2, r3, #28
 8006d22:	d52f      	bpl.n	8006d84 <__swbuf_r+0x84>
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	b36b      	cbz	r3, 8006d84 <__swbuf_r+0x84>
 8006d28:	6923      	ldr	r3, [r4, #16]
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	1ac0      	subs	r0, r0, r3
 8006d2e:	6963      	ldr	r3, [r4, #20]
 8006d30:	b2f6      	uxtb	r6, r6
 8006d32:	4283      	cmp	r3, r0
 8006d34:	4637      	mov	r7, r6
 8006d36:	dc04      	bgt.n	8006d42 <__swbuf_r+0x42>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f000 ff9e 	bl	8007c7c <_fflush_r>
 8006d40:	bb30      	cbnz	r0, 8006d90 <__swbuf_r+0x90>
 8006d42:	68a3      	ldr	r3, [r4, #8]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	60a3      	str	r3, [r4, #8]
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	701e      	strb	r6, [r3, #0]
 8006d50:	6963      	ldr	r3, [r4, #20]
 8006d52:	3001      	adds	r0, #1
 8006d54:	4283      	cmp	r3, r0
 8006d56:	d004      	beq.n	8006d62 <__swbuf_r+0x62>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	07db      	lsls	r3, r3, #31
 8006d5c:	d506      	bpl.n	8006d6c <__swbuf_r+0x6c>
 8006d5e:	2e0a      	cmp	r6, #10
 8006d60:	d104      	bne.n	8006d6c <__swbuf_r+0x6c>
 8006d62:	4621      	mov	r1, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 ff89 	bl	8007c7c <_fflush_r>
 8006d6a:	b988      	cbnz	r0, 8006d90 <__swbuf_r+0x90>
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <__swbuf_r+0x9c>)
 8006d72:	429c      	cmp	r4, r3
 8006d74:	d101      	bne.n	8006d7a <__swbuf_r+0x7a>
 8006d76:	68ac      	ldr	r4, [r5, #8]
 8006d78:	e7cf      	b.n	8006d1a <__swbuf_r+0x1a>
 8006d7a:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <__swbuf_r+0xa0>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	bf08      	it	eq
 8006d80:	68ec      	ldreq	r4, [r5, #12]
 8006d82:	e7ca      	b.n	8006d1a <__swbuf_r+0x1a>
 8006d84:	4621      	mov	r1, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 f80c 	bl	8006da4 <__swsetup_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d0cb      	beq.n	8006d28 <__swbuf_r+0x28>
 8006d90:	f04f 37ff 	mov.w	r7, #4294967295
 8006d94:	e7ea      	b.n	8006d6c <__swbuf_r+0x6c>
 8006d96:	bf00      	nop
 8006d98:	08008f8c 	.word	0x08008f8c
 8006d9c:	08008fac 	.word	0x08008fac
 8006da0:	08008f6c 	.word	0x08008f6c

08006da4 <__swsetup_r>:
 8006da4:	4b32      	ldr	r3, [pc, #200]	; (8006e70 <__swsetup_r+0xcc>)
 8006da6:	b570      	push	{r4, r5, r6, lr}
 8006da8:	681d      	ldr	r5, [r3, #0]
 8006daa:	4606      	mov	r6, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	b125      	cbz	r5, 8006dba <__swsetup_r+0x16>
 8006db0:	69ab      	ldr	r3, [r5, #24]
 8006db2:	b913      	cbnz	r3, 8006dba <__swsetup_r+0x16>
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 fff5 	bl	8007da4 <__sinit>
 8006dba:	4b2e      	ldr	r3, [pc, #184]	; (8006e74 <__swsetup_r+0xd0>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	d10f      	bne.n	8006de0 <__swsetup_r+0x3c>
 8006dc0:	686c      	ldr	r4, [r5, #4]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dc8:	0719      	lsls	r1, r3, #28
 8006dca:	d42c      	bmi.n	8006e26 <__swsetup_r+0x82>
 8006dcc:	06dd      	lsls	r5, r3, #27
 8006dce:	d411      	bmi.n	8006df4 <__swsetup_r+0x50>
 8006dd0:	2309      	movs	r3, #9
 8006dd2:	6033      	str	r3, [r6, #0]
 8006dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	f04f 30ff 	mov.w	r0, #4294967295
 8006dde:	e03e      	b.n	8006e5e <__swsetup_r+0xba>
 8006de0:	4b25      	ldr	r3, [pc, #148]	; (8006e78 <__swsetup_r+0xd4>)
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d101      	bne.n	8006dea <__swsetup_r+0x46>
 8006de6:	68ac      	ldr	r4, [r5, #8]
 8006de8:	e7eb      	b.n	8006dc2 <__swsetup_r+0x1e>
 8006dea:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <__swsetup_r+0xd8>)
 8006dec:	429c      	cmp	r4, r3
 8006dee:	bf08      	it	eq
 8006df0:	68ec      	ldreq	r4, [r5, #12]
 8006df2:	e7e6      	b.n	8006dc2 <__swsetup_r+0x1e>
 8006df4:	0758      	lsls	r0, r3, #29
 8006df6:	d512      	bpl.n	8006e1e <__swsetup_r+0x7a>
 8006df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dfa:	b141      	cbz	r1, 8006e0e <__swsetup_r+0x6a>
 8006dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e00:	4299      	cmp	r1, r3
 8006e02:	d002      	beq.n	8006e0a <__swsetup_r+0x66>
 8006e04:	4630      	mov	r0, r6
 8006e06:	f001 fc7b 	bl	8008700 <_free_r>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	2300      	movs	r3, #0
 8006e18:	6063      	str	r3, [r4, #4]
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	89a3      	ldrh	r3, [r4, #12]
 8006e20:	f043 0308 	orr.w	r3, r3, #8
 8006e24:	81a3      	strh	r3, [r4, #12]
 8006e26:	6923      	ldr	r3, [r4, #16]
 8006e28:	b94b      	cbnz	r3, 8006e3e <__swsetup_r+0x9a>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e34:	d003      	beq.n	8006e3e <__swsetup_r+0x9a>
 8006e36:	4621      	mov	r1, r4
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f001 f87d 	bl	8007f38 <__smakebuf_r>
 8006e3e:	89a0      	ldrh	r0, [r4, #12]
 8006e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e44:	f010 0301 	ands.w	r3, r0, #1
 8006e48:	d00a      	beq.n	8006e60 <__swsetup_r+0xbc>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60a3      	str	r3, [r4, #8]
 8006e4e:	6963      	ldr	r3, [r4, #20]
 8006e50:	425b      	negs	r3, r3
 8006e52:	61a3      	str	r3, [r4, #24]
 8006e54:	6923      	ldr	r3, [r4, #16]
 8006e56:	b943      	cbnz	r3, 8006e6a <__swsetup_r+0xc6>
 8006e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e5c:	d1ba      	bne.n	8006dd4 <__swsetup_r+0x30>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	0781      	lsls	r1, r0, #30
 8006e62:	bf58      	it	pl
 8006e64:	6963      	ldrpl	r3, [r4, #20]
 8006e66:	60a3      	str	r3, [r4, #8]
 8006e68:	e7f4      	b.n	8006e54 <__swsetup_r+0xb0>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	e7f7      	b.n	8006e5e <__swsetup_r+0xba>
 8006e6e:	bf00      	nop
 8006e70:	2000000c 	.word	0x2000000c
 8006e74:	08008f8c 	.word	0x08008f8c
 8006e78:	08008fac 	.word	0x08008fac
 8006e7c:	08008f6c 	.word	0x08008f6c

08006e80 <quorem>:
 8006e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	6903      	ldr	r3, [r0, #16]
 8006e86:	690c      	ldr	r4, [r1, #16]
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	4607      	mov	r7, r0
 8006e8c:	f2c0 8081 	blt.w	8006f92 <quorem+0x112>
 8006e90:	3c01      	subs	r4, #1
 8006e92:	f101 0814 	add.w	r8, r1, #20
 8006e96:	f100 0514 	add.w	r5, r0, #20
 8006e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eb8:	d331      	bcc.n	8006f1e <quorem+0x9e>
 8006eba:	f04f 0e00 	mov.w	lr, #0
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	46ac      	mov	ip, r5
 8006ec2:	46f2      	mov	sl, lr
 8006ec4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ec8:	b293      	uxth	r3, r2
 8006eca:	fb06 e303 	mla	r3, r6, r3, lr
 8006ece:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed8:	0c12      	lsrs	r2, r2, #16
 8006eda:	f8dc a000 	ldr.w	sl, [ip]
 8006ede:	fb06 e202 	mla	r2, r6, r2, lr
 8006ee2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eea:	fa1f fa82 	uxth.w	sl, r2
 8006eee:	f8dc 2000 	ldr.w	r2, [ip]
 8006ef2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006ef6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f00:	4581      	cmp	r9, r0
 8006f02:	f84c 3b04 	str.w	r3, [ip], #4
 8006f06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f0a:	d2db      	bcs.n	8006ec4 <quorem+0x44>
 8006f0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f10:	b92b      	cbnz	r3, 8006f1e <quorem+0x9e>
 8006f12:	9b01      	ldr	r3, [sp, #4]
 8006f14:	3b04      	subs	r3, #4
 8006f16:	429d      	cmp	r5, r3
 8006f18:	461a      	mov	r2, r3
 8006f1a:	d32e      	bcc.n	8006f7a <quorem+0xfa>
 8006f1c:	613c      	str	r4, [r7, #16]
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f001 fade 	bl	80084e0 <__mcmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	db24      	blt.n	8006f72 <quorem+0xf2>
 8006f28:	3601      	adds	r6, #1
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f04f 0c00 	mov.w	ip, #0
 8006f30:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f34:	f8d0 e000 	ldr.w	lr, [r0]
 8006f38:	b293      	uxth	r3, r2
 8006f3a:	ebac 0303 	sub.w	r3, ip, r3
 8006f3e:	0c12      	lsrs	r2, r2, #16
 8006f40:	fa13 f38e 	uxtah	r3, r3, lr
 8006f44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f52:	45c1      	cmp	r9, r8
 8006f54:	f840 3b04 	str.w	r3, [r0], #4
 8006f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f5c:	d2e8      	bcs.n	8006f30 <quorem+0xb0>
 8006f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f66:	b922      	cbnz	r2, 8006f72 <quorem+0xf2>
 8006f68:	3b04      	subs	r3, #4
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	d30a      	bcc.n	8006f86 <quorem+0x106>
 8006f70:	613c      	str	r4, [r7, #16]
 8006f72:	4630      	mov	r0, r6
 8006f74:	b003      	add	sp, #12
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d1cc      	bne.n	8006f1c <quorem+0x9c>
 8006f82:	3c01      	subs	r4, #1
 8006f84:	e7c7      	b.n	8006f16 <quorem+0x96>
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1f0      	bne.n	8006f70 <quorem+0xf0>
 8006f8e:	3c01      	subs	r4, #1
 8006f90:	e7eb      	b.n	8006f6a <quorem+0xea>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7ee      	b.n	8006f74 <quorem+0xf4>
	...

08006f98 <_dtoa_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	ed2d 8b02 	vpush	{d8}
 8006fa0:	ec57 6b10 	vmov	r6, r7, d0
 8006fa4:	b095      	sub	sp, #84	; 0x54
 8006fa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fac:	9105      	str	r1, [sp, #20]
 8006fae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fb8:	b975      	cbnz	r5, 8006fd8 <_dtoa_r+0x40>
 8006fba:	2010      	movs	r0, #16
 8006fbc:	f000 fffc 	bl	8007fb8 <malloc>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fc4:	b920      	cbnz	r0, 8006fd0 <_dtoa_r+0x38>
 8006fc6:	4bb2      	ldr	r3, [pc, #712]	; (8007290 <_dtoa_r+0x2f8>)
 8006fc8:	21ea      	movs	r1, #234	; 0xea
 8006fca:	48b2      	ldr	r0, [pc, #712]	; (8007294 <_dtoa_r+0x2fc>)
 8006fcc:	f001 fe02 	bl	8008bd4 <__assert_func>
 8006fd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fd4:	6005      	str	r5, [r0, #0]
 8006fd6:	60c5      	str	r5, [r0, #12]
 8006fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	b151      	cbz	r1, 8006ff4 <_dtoa_r+0x5c>
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	604a      	str	r2, [r1, #4]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4093      	lsls	r3, r2
 8006fe6:	608b      	str	r3, [r1, #8]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f001 f83b 	bl	8008064 <_Bfree>
 8006fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	1e3b      	subs	r3, r7, #0
 8006ff6:	bfb9      	ittee	lt
 8006ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ffc:	9303      	strlt	r3, [sp, #12]
 8006ffe:	2300      	movge	r3, #0
 8007000:	f8c8 3000 	strge.w	r3, [r8]
 8007004:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007008:	4ba3      	ldr	r3, [pc, #652]	; (8007298 <_dtoa_r+0x300>)
 800700a:	bfbc      	itt	lt
 800700c:	2201      	movlt	r2, #1
 800700e:	f8c8 2000 	strlt.w	r2, [r8]
 8007012:	ea33 0309 	bics.w	r3, r3, r9
 8007016:	d11b      	bne.n	8007050 <_dtoa_r+0xb8>
 8007018:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800701a:	f242 730f 	movw	r3, #9999	; 0x270f
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007024:	4333      	orrs	r3, r6
 8007026:	f000 857a 	beq.w	8007b1e <_dtoa_r+0xb86>
 800702a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800702c:	b963      	cbnz	r3, 8007048 <_dtoa_r+0xb0>
 800702e:	4b9b      	ldr	r3, [pc, #620]	; (800729c <_dtoa_r+0x304>)
 8007030:	e024      	b.n	800707c <_dtoa_r+0xe4>
 8007032:	4b9b      	ldr	r3, [pc, #620]	; (80072a0 <_dtoa_r+0x308>)
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	9800      	ldr	r0, [sp, #0]
 800703e:	b015      	add	sp, #84	; 0x54
 8007040:	ecbd 8b02 	vpop	{d8}
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	4b94      	ldr	r3, [pc, #592]	; (800729c <_dtoa_r+0x304>)
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	3303      	adds	r3, #3
 800704e:	e7f3      	b.n	8007038 <_dtoa_r+0xa0>
 8007050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	ec51 0b17 	vmov	r0, r1, d7
 800705a:	2300      	movs	r3, #0
 800705c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007060:	f7f9 fd32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007064:	4680      	mov	r8, r0
 8007066:	b158      	cbz	r0, 8007080 <_dtoa_r+0xe8>
 8007068:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800706a:	2301      	movs	r3, #1
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8551 	beq.w	8007b18 <_dtoa_r+0xb80>
 8007076:	488b      	ldr	r0, [pc, #556]	; (80072a4 <_dtoa_r+0x30c>)
 8007078:	6018      	str	r0, [r3, #0]
 800707a:	1e43      	subs	r3, r0, #1
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	e7dd      	b.n	800703c <_dtoa_r+0xa4>
 8007080:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007084:	aa12      	add	r2, sp, #72	; 0x48
 8007086:	a913      	add	r1, sp, #76	; 0x4c
 8007088:	4620      	mov	r0, r4
 800708a:	f001 facd 	bl	8008628 <__d2b>
 800708e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007092:	4683      	mov	fp, r0
 8007094:	2d00      	cmp	r5, #0
 8007096:	d07c      	beq.n	8007192 <_dtoa_r+0x1fa>
 8007098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800709a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800709e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070b2:	4b7d      	ldr	r3, [pc, #500]	; (80072a8 <_dtoa_r+0x310>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	4630      	mov	r0, r6
 80070b8:	4639      	mov	r1, r7
 80070ba:	f7f9 f8e5 	bl	8000288 <__aeabi_dsub>
 80070be:	a36e      	add	r3, pc, #440	; (adr r3, 8007278 <_dtoa_r+0x2e0>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f7f9 fa98 	bl	80005f8 <__aeabi_dmul>
 80070c8:	a36d      	add	r3, pc, #436	; (adr r3, 8007280 <_dtoa_r+0x2e8>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 f8dd 	bl	800028c <__adddf3>
 80070d2:	4606      	mov	r6, r0
 80070d4:	4628      	mov	r0, r5
 80070d6:	460f      	mov	r7, r1
 80070d8:	f7f9 fa24 	bl	8000524 <__aeabi_i2d>
 80070dc:	a36a      	add	r3, pc, #424	; (adr r3, 8007288 <_dtoa_r+0x2f0>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 fa89 	bl	80005f8 <__aeabi_dmul>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	4630      	mov	r0, r6
 80070ec:	4639      	mov	r1, r7
 80070ee:	f7f9 f8cd 	bl	800028c <__adddf3>
 80070f2:	4606      	mov	r6, r0
 80070f4:	460f      	mov	r7, r1
 80070f6:	f7f9 fd2f 	bl	8000b58 <__aeabi_d2iz>
 80070fa:	2200      	movs	r2, #0
 80070fc:	4682      	mov	sl, r0
 80070fe:	2300      	movs	r3, #0
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fcea 	bl	8000adc <__aeabi_dcmplt>
 8007108:	b148      	cbz	r0, 800711e <_dtoa_r+0x186>
 800710a:	4650      	mov	r0, sl
 800710c:	f7f9 fa0a 	bl	8000524 <__aeabi_i2d>
 8007110:	4632      	mov	r2, r6
 8007112:	463b      	mov	r3, r7
 8007114:	f7f9 fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007118:	b908      	cbnz	r0, 800711e <_dtoa_r+0x186>
 800711a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800711e:	f1ba 0f16 	cmp.w	sl, #22
 8007122:	d854      	bhi.n	80071ce <_dtoa_r+0x236>
 8007124:	4b61      	ldr	r3, [pc, #388]	; (80072ac <_dtoa_r+0x314>)
 8007126:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007132:	f7f9 fcd3 	bl	8000adc <__aeabi_dcmplt>
 8007136:	2800      	cmp	r0, #0
 8007138:	d04b      	beq.n	80071d2 <_dtoa_r+0x23a>
 800713a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800713e:	2300      	movs	r3, #0
 8007140:	930e      	str	r3, [sp, #56]	; 0x38
 8007142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007144:	1b5d      	subs	r5, r3, r5
 8007146:	1e6b      	subs	r3, r5, #1
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	bf43      	ittte	mi
 800714c:	2300      	movmi	r3, #0
 800714e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007152:	9304      	strmi	r3, [sp, #16]
 8007154:	f04f 0800 	movpl.w	r8, #0
 8007158:	f1ba 0f00 	cmp.w	sl, #0
 800715c:	db3b      	blt.n	80071d6 <_dtoa_r+0x23e>
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007164:	4453      	add	r3, sl
 8007166:	9304      	str	r3, [sp, #16]
 8007168:	2300      	movs	r3, #0
 800716a:	9306      	str	r3, [sp, #24]
 800716c:	9b05      	ldr	r3, [sp, #20]
 800716e:	2b09      	cmp	r3, #9
 8007170:	d869      	bhi.n	8007246 <_dtoa_r+0x2ae>
 8007172:	2b05      	cmp	r3, #5
 8007174:	bfc4      	itt	gt
 8007176:	3b04      	subgt	r3, #4
 8007178:	9305      	strgt	r3, [sp, #20]
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	f1a3 0302 	sub.w	r3, r3, #2
 8007180:	bfcc      	ite	gt
 8007182:	2500      	movgt	r5, #0
 8007184:	2501      	movle	r5, #1
 8007186:	2b03      	cmp	r3, #3
 8007188:	d869      	bhi.n	800725e <_dtoa_r+0x2c6>
 800718a:	e8df f003 	tbb	[pc, r3]
 800718e:	4e2c      	.short	0x4e2c
 8007190:	5a4c      	.short	0x5a4c
 8007192:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007196:	441d      	add	r5, r3
 8007198:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800719c:	2b20      	cmp	r3, #32
 800719e:	bfc1      	itttt	gt
 80071a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80071ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071b0:	bfda      	itte	le
 80071b2:	f1c3 0320 	rsble	r3, r3, #32
 80071b6:	fa06 f003 	lslle.w	r0, r6, r3
 80071ba:	4318      	orrgt	r0, r3
 80071bc:	f7f9 f9a2 	bl	8000504 <__aeabi_ui2d>
 80071c0:	2301      	movs	r3, #1
 80071c2:	4606      	mov	r6, r0
 80071c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071c8:	3d01      	subs	r5, #1
 80071ca:	9310      	str	r3, [sp, #64]	; 0x40
 80071cc:	e771      	b.n	80070b2 <_dtoa_r+0x11a>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e7b6      	b.n	8007140 <_dtoa_r+0x1a8>
 80071d2:	900e      	str	r0, [sp, #56]	; 0x38
 80071d4:	e7b5      	b.n	8007142 <_dtoa_r+0x1aa>
 80071d6:	f1ca 0300 	rsb	r3, sl, #0
 80071da:	9306      	str	r3, [sp, #24]
 80071dc:	2300      	movs	r3, #0
 80071de:	eba8 080a 	sub.w	r8, r8, sl
 80071e2:	930d      	str	r3, [sp, #52]	; 0x34
 80071e4:	e7c2      	b.n	800716c <_dtoa_r+0x1d4>
 80071e6:	2300      	movs	r3, #0
 80071e8:	9308      	str	r3, [sp, #32]
 80071ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	dc39      	bgt.n	8007264 <_dtoa_r+0x2cc>
 80071f0:	f04f 0901 	mov.w	r9, #1
 80071f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80071f8:	464b      	mov	r3, r9
 80071fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80071fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007200:	2200      	movs	r2, #0
 8007202:	6042      	str	r2, [r0, #4]
 8007204:	2204      	movs	r2, #4
 8007206:	f102 0614 	add.w	r6, r2, #20
 800720a:	429e      	cmp	r6, r3
 800720c:	6841      	ldr	r1, [r0, #4]
 800720e:	d92f      	bls.n	8007270 <_dtoa_r+0x2d8>
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fee7 	bl	8007fe4 <_Balloc>
 8007216:	9000      	str	r0, [sp, #0]
 8007218:	2800      	cmp	r0, #0
 800721a:	d14b      	bne.n	80072b4 <_dtoa_r+0x31c>
 800721c:	4b24      	ldr	r3, [pc, #144]	; (80072b0 <_dtoa_r+0x318>)
 800721e:	4602      	mov	r2, r0
 8007220:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007224:	e6d1      	b.n	8006fca <_dtoa_r+0x32>
 8007226:	2301      	movs	r3, #1
 8007228:	e7de      	b.n	80071e8 <_dtoa_r+0x250>
 800722a:	2300      	movs	r3, #0
 800722c:	9308      	str	r3, [sp, #32]
 800722e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007230:	eb0a 0903 	add.w	r9, sl, r3
 8007234:	f109 0301 	add.w	r3, r9, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	bfb8      	it	lt
 800723e:	2301      	movlt	r3, #1
 8007240:	e7dd      	b.n	80071fe <_dtoa_r+0x266>
 8007242:	2301      	movs	r3, #1
 8007244:	e7f2      	b.n	800722c <_dtoa_r+0x294>
 8007246:	2501      	movs	r5, #1
 8007248:	2300      	movs	r3, #0
 800724a:	9305      	str	r3, [sp, #20]
 800724c:	9508      	str	r5, [sp, #32]
 800724e:	f04f 39ff 	mov.w	r9, #4294967295
 8007252:	2200      	movs	r2, #0
 8007254:	f8cd 9004 	str.w	r9, [sp, #4]
 8007258:	2312      	movs	r3, #18
 800725a:	9209      	str	r2, [sp, #36]	; 0x24
 800725c:	e7cf      	b.n	80071fe <_dtoa_r+0x266>
 800725e:	2301      	movs	r3, #1
 8007260:	9308      	str	r3, [sp, #32]
 8007262:	e7f4      	b.n	800724e <_dtoa_r+0x2b6>
 8007264:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007268:	f8cd 9004 	str.w	r9, [sp, #4]
 800726c:	464b      	mov	r3, r9
 800726e:	e7c6      	b.n	80071fe <_dtoa_r+0x266>
 8007270:	3101      	adds	r1, #1
 8007272:	6041      	str	r1, [r0, #4]
 8007274:	0052      	lsls	r2, r2, #1
 8007276:	e7c6      	b.n	8007206 <_dtoa_r+0x26e>
 8007278:	636f4361 	.word	0x636f4361
 800727c:	3fd287a7 	.word	0x3fd287a7
 8007280:	8b60c8b3 	.word	0x8b60c8b3
 8007284:	3fc68a28 	.word	0x3fc68a28
 8007288:	509f79fb 	.word	0x509f79fb
 800728c:	3fd34413 	.word	0x3fd34413
 8007290:	08008ee5 	.word	0x08008ee5
 8007294:	08008efc 	.word	0x08008efc
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	08008ee1 	.word	0x08008ee1
 80072a0:	08008ed8 	.word	0x08008ed8
 80072a4:	08008eb5 	.word	0x08008eb5
 80072a8:	3ff80000 	.word	0x3ff80000
 80072ac:	08009058 	.word	0x08009058
 80072b0:	08008f5b 	.word	0x08008f5b
 80072b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b6:	9a00      	ldr	r2, [sp, #0]
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	9b01      	ldr	r3, [sp, #4]
 80072bc:	2b0e      	cmp	r3, #14
 80072be:	f200 80ad 	bhi.w	800741c <_dtoa_r+0x484>
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	f000 80aa 	beq.w	800741c <_dtoa_r+0x484>
 80072c8:	f1ba 0f00 	cmp.w	sl, #0
 80072cc:	dd36      	ble.n	800733c <_dtoa_r+0x3a4>
 80072ce:	4ac3      	ldr	r2, [pc, #780]	; (80075dc <_dtoa_r+0x644>)
 80072d0:	f00a 030f 	and.w	r3, sl, #15
 80072d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072d8:	ed93 7b00 	vldr	d7, [r3]
 80072dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80072e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80072e4:	eeb0 8a47 	vmov.f32	s16, s14
 80072e8:	eef0 8a67 	vmov.f32	s17, s15
 80072ec:	d016      	beq.n	800731c <_dtoa_r+0x384>
 80072ee:	4bbc      	ldr	r3, [pc, #752]	; (80075e0 <_dtoa_r+0x648>)
 80072f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80072f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072f8:	f7f9 faa8 	bl	800084c <__aeabi_ddiv>
 80072fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007300:	f007 070f 	and.w	r7, r7, #15
 8007304:	2503      	movs	r5, #3
 8007306:	4eb6      	ldr	r6, [pc, #728]	; (80075e0 <_dtoa_r+0x648>)
 8007308:	b957      	cbnz	r7, 8007320 <_dtoa_r+0x388>
 800730a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800730e:	ec53 2b18 	vmov	r2, r3, d8
 8007312:	f7f9 fa9b 	bl	800084c <__aeabi_ddiv>
 8007316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800731a:	e029      	b.n	8007370 <_dtoa_r+0x3d8>
 800731c:	2502      	movs	r5, #2
 800731e:	e7f2      	b.n	8007306 <_dtoa_r+0x36e>
 8007320:	07f9      	lsls	r1, r7, #31
 8007322:	d508      	bpl.n	8007336 <_dtoa_r+0x39e>
 8007324:	ec51 0b18 	vmov	r0, r1, d8
 8007328:	e9d6 2300 	ldrd	r2, r3, [r6]
 800732c:	f7f9 f964 	bl	80005f8 <__aeabi_dmul>
 8007330:	ec41 0b18 	vmov	d8, r0, r1
 8007334:	3501      	adds	r5, #1
 8007336:	107f      	asrs	r7, r7, #1
 8007338:	3608      	adds	r6, #8
 800733a:	e7e5      	b.n	8007308 <_dtoa_r+0x370>
 800733c:	f000 80a6 	beq.w	800748c <_dtoa_r+0x4f4>
 8007340:	f1ca 0600 	rsb	r6, sl, #0
 8007344:	4ba5      	ldr	r3, [pc, #660]	; (80075dc <_dtoa_r+0x644>)
 8007346:	4fa6      	ldr	r7, [pc, #664]	; (80075e0 <_dtoa_r+0x648>)
 8007348:	f006 020f 	and.w	r2, r6, #15
 800734c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007358:	f7f9 f94e 	bl	80005f8 <__aeabi_dmul>
 800735c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007360:	1136      	asrs	r6, r6, #4
 8007362:	2300      	movs	r3, #0
 8007364:	2502      	movs	r5, #2
 8007366:	2e00      	cmp	r6, #0
 8007368:	f040 8085 	bne.w	8007476 <_dtoa_r+0x4de>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1d2      	bne.n	8007316 <_dtoa_r+0x37e>
 8007370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 808c 	beq.w	8007490 <_dtoa_r+0x4f8>
 8007378:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800737c:	4b99      	ldr	r3, [pc, #612]	; (80075e4 <_dtoa_r+0x64c>)
 800737e:	2200      	movs	r2, #0
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f9 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8007388:	2800      	cmp	r0, #0
 800738a:	f000 8081 	beq.w	8007490 <_dtoa_r+0x4f8>
 800738e:	9b01      	ldr	r3, [sp, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d07d      	beq.n	8007490 <_dtoa_r+0x4f8>
 8007394:	f1b9 0f00 	cmp.w	r9, #0
 8007398:	dd3c      	ble.n	8007414 <_dtoa_r+0x47c>
 800739a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800739e:	9307      	str	r3, [sp, #28]
 80073a0:	2200      	movs	r2, #0
 80073a2:	4b91      	ldr	r3, [pc, #580]	; (80075e8 <_dtoa_r+0x650>)
 80073a4:	4630      	mov	r0, r6
 80073a6:	4639      	mov	r1, r7
 80073a8:	f7f9 f926 	bl	80005f8 <__aeabi_dmul>
 80073ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b0:	3501      	adds	r5, #1
 80073b2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f9 f8b2 	bl	8000524 <__aeabi_i2d>
 80073c0:	4632      	mov	r2, r6
 80073c2:	463b      	mov	r3, r7
 80073c4:	f7f9 f918 	bl	80005f8 <__aeabi_dmul>
 80073c8:	4b88      	ldr	r3, [pc, #544]	; (80075ec <_dtoa_r+0x654>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7f8 ff5e 	bl	800028c <__adddf3>
 80073d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d15c      	bne.n	800749a <_dtoa_r+0x502>
 80073e0:	4b83      	ldr	r3, [pc, #524]	; (80075f0 <_dtoa_r+0x658>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f8 ff4e 	bl	8000288 <__aeabi_dsub>
 80073ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f0:	4606      	mov	r6, r0
 80073f2:	460f      	mov	r7, r1
 80073f4:	f7f9 fb90 	bl	8000b18 <__aeabi_dcmpgt>
 80073f8:	2800      	cmp	r0, #0
 80073fa:	f040 8296 	bne.w	800792a <_dtoa_r+0x992>
 80073fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007402:	4630      	mov	r0, r6
 8007404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 fb67 	bl	8000adc <__aeabi_dcmplt>
 800740e:	2800      	cmp	r0, #0
 8007410:	f040 8288 	bne.w	8007924 <_dtoa_r+0x98c>
 8007414:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007418:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800741c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800741e:	2b00      	cmp	r3, #0
 8007420:	f2c0 8158 	blt.w	80076d4 <_dtoa_r+0x73c>
 8007424:	f1ba 0f0e 	cmp.w	sl, #14
 8007428:	f300 8154 	bgt.w	80076d4 <_dtoa_r+0x73c>
 800742c:	4b6b      	ldr	r3, [pc, #428]	; (80075dc <_dtoa_r+0x644>)
 800742e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007432:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	f280 80e3 	bge.w	8007604 <_dtoa_r+0x66c>
 800743e:	9b01      	ldr	r3, [sp, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f300 80df 	bgt.w	8007604 <_dtoa_r+0x66c>
 8007446:	f040 826d 	bne.w	8007924 <_dtoa_r+0x98c>
 800744a:	4b69      	ldr	r3, [pc, #420]	; (80075f0 <_dtoa_r+0x658>)
 800744c:	2200      	movs	r2, #0
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	f7f9 f8d1 	bl	80005f8 <__aeabi_dmul>
 8007456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800745a:	f7f9 fb53 	bl	8000b04 <__aeabi_dcmpge>
 800745e:	9e01      	ldr	r6, [sp, #4]
 8007460:	4637      	mov	r7, r6
 8007462:	2800      	cmp	r0, #0
 8007464:	f040 8243 	bne.w	80078ee <_dtoa_r+0x956>
 8007468:	9d00      	ldr	r5, [sp, #0]
 800746a:	2331      	movs	r3, #49	; 0x31
 800746c:	f805 3b01 	strb.w	r3, [r5], #1
 8007470:	f10a 0a01 	add.w	sl, sl, #1
 8007474:	e23f      	b.n	80078f6 <_dtoa_r+0x95e>
 8007476:	07f2      	lsls	r2, r6, #31
 8007478:	d505      	bpl.n	8007486 <_dtoa_r+0x4ee>
 800747a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747e:	f7f9 f8bb 	bl	80005f8 <__aeabi_dmul>
 8007482:	3501      	adds	r5, #1
 8007484:	2301      	movs	r3, #1
 8007486:	1076      	asrs	r6, r6, #1
 8007488:	3708      	adds	r7, #8
 800748a:	e76c      	b.n	8007366 <_dtoa_r+0x3ce>
 800748c:	2502      	movs	r5, #2
 800748e:	e76f      	b.n	8007370 <_dtoa_r+0x3d8>
 8007490:	9b01      	ldr	r3, [sp, #4]
 8007492:	f8cd a01c 	str.w	sl, [sp, #28]
 8007496:	930c      	str	r3, [sp, #48]	; 0x30
 8007498:	e78d      	b.n	80073b6 <_dtoa_r+0x41e>
 800749a:	9900      	ldr	r1, [sp, #0]
 800749c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800749e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074a0:	4b4e      	ldr	r3, [pc, #312]	; (80075dc <_dtoa_r+0x644>)
 80074a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074a6:	4401      	add	r1, r0
 80074a8:	9102      	str	r1, [sp, #8]
 80074aa:	9908      	ldr	r1, [sp, #32]
 80074ac:	eeb0 8a47 	vmov.f32	s16, s14
 80074b0:	eef0 8a67 	vmov.f32	s17, s15
 80074b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074bc:	2900      	cmp	r1, #0
 80074be:	d045      	beq.n	800754c <_dtoa_r+0x5b4>
 80074c0:	494c      	ldr	r1, [pc, #304]	; (80075f4 <_dtoa_r+0x65c>)
 80074c2:	2000      	movs	r0, #0
 80074c4:	f7f9 f9c2 	bl	800084c <__aeabi_ddiv>
 80074c8:	ec53 2b18 	vmov	r2, r3, d8
 80074cc:	f7f8 fedc 	bl	8000288 <__aeabi_dsub>
 80074d0:	9d00      	ldr	r5, [sp, #0]
 80074d2:	ec41 0b18 	vmov	d8, r0, r1
 80074d6:	4639      	mov	r1, r7
 80074d8:	4630      	mov	r0, r6
 80074da:	f7f9 fb3d 	bl	8000b58 <__aeabi_d2iz>
 80074de:	900c      	str	r0, [sp, #48]	; 0x30
 80074e0:	f7f9 f820 	bl	8000524 <__aeabi_i2d>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4630      	mov	r0, r6
 80074ea:	4639      	mov	r1, r7
 80074ec:	f7f8 fecc 	bl	8000288 <__aeabi_dsub>
 80074f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074f2:	3330      	adds	r3, #48	; 0x30
 80074f4:	f805 3b01 	strb.w	r3, [r5], #1
 80074f8:	ec53 2b18 	vmov	r2, r3, d8
 80074fc:	4606      	mov	r6, r0
 80074fe:	460f      	mov	r7, r1
 8007500:	f7f9 faec 	bl	8000adc <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	d165      	bne.n	80075d4 <_dtoa_r+0x63c>
 8007508:	4632      	mov	r2, r6
 800750a:	463b      	mov	r3, r7
 800750c:	4935      	ldr	r1, [pc, #212]	; (80075e4 <_dtoa_r+0x64c>)
 800750e:	2000      	movs	r0, #0
 8007510:	f7f8 feba 	bl	8000288 <__aeabi_dsub>
 8007514:	ec53 2b18 	vmov	r2, r3, d8
 8007518:	f7f9 fae0 	bl	8000adc <__aeabi_dcmplt>
 800751c:	2800      	cmp	r0, #0
 800751e:	f040 80b9 	bne.w	8007694 <_dtoa_r+0x6fc>
 8007522:	9b02      	ldr	r3, [sp, #8]
 8007524:	429d      	cmp	r5, r3
 8007526:	f43f af75 	beq.w	8007414 <_dtoa_r+0x47c>
 800752a:	4b2f      	ldr	r3, [pc, #188]	; (80075e8 <_dtoa_r+0x650>)
 800752c:	ec51 0b18 	vmov	r0, r1, d8
 8007530:	2200      	movs	r2, #0
 8007532:	f7f9 f861 	bl	80005f8 <__aeabi_dmul>
 8007536:	4b2c      	ldr	r3, [pc, #176]	; (80075e8 <_dtoa_r+0x650>)
 8007538:	ec41 0b18 	vmov	d8, r0, r1
 800753c:	2200      	movs	r2, #0
 800753e:	4630      	mov	r0, r6
 8007540:	4639      	mov	r1, r7
 8007542:	f7f9 f859 	bl	80005f8 <__aeabi_dmul>
 8007546:	4606      	mov	r6, r0
 8007548:	460f      	mov	r7, r1
 800754a:	e7c4      	b.n	80074d6 <_dtoa_r+0x53e>
 800754c:	ec51 0b17 	vmov	r0, r1, d7
 8007550:	f7f9 f852 	bl	80005f8 <__aeabi_dmul>
 8007554:	9b02      	ldr	r3, [sp, #8]
 8007556:	9d00      	ldr	r5, [sp, #0]
 8007558:	930c      	str	r3, [sp, #48]	; 0x30
 800755a:	ec41 0b18 	vmov	d8, r0, r1
 800755e:	4639      	mov	r1, r7
 8007560:	4630      	mov	r0, r6
 8007562:	f7f9 faf9 	bl	8000b58 <__aeabi_d2iz>
 8007566:	9011      	str	r0, [sp, #68]	; 0x44
 8007568:	f7f8 ffdc 	bl	8000524 <__aeabi_i2d>
 800756c:	4602      	mov	r2, r0
 800756e:	460b      	mov	r3, r1
 8007570:	4630      	mov	r0, r6
 8007572:	4639      	mov	r1, r7
 8007574:	f7f8 fe88 	bl	8000288 <__aeabi_dsub>
 8007578:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800757a:	3330      	adds	r3, #48	; 0x30
 800757c:	f805 3b01 	strb.w	r3, [r5], #1
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	429d      	cmp	r5, r3
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	d134      	bne.n	80075f8 <_dtoa_r+0x660>
 800758e:	4b19      	ldr	r3, [pc, #100]	; (80075f4 <_dtoa_r+0x65c>)
 8007590:	ec51 0b18 	vmov	r0, r1, d8
 8007594:	f7f8 fe7a 	bl	800028c <__adddf3>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4630      	mov	r0, r6
 800759e:	4639      	mov	r1, r7
 80075a0:	f7f9 faba 	bl	8000b18 <__aeabi_dcmpgt>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d175      	bne.n	8007694 <_dtoa_r+0x6fc>
 80075a8:	ec53 2b18 	vmov	r2, r3, d8
 80075ac:	4911      	ldr	r1, [pc, #68]	; (80075f4 <_dtoa_r+0x65c>)
 80075ae:	2000      	movs	r0, #0
 80075b0:	f7f8 fe6a 	bl	8000288 <__aeabi_dsub>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f9 fa8e 	bl	8000adc <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f43f af27 	beq.w	8007414 <_dtoa_r+0x47c>
 80075c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075c8:	1e6b      	subs	r3, r5, #1
 80075ca:	930c      	str	r3, [sp, #48]	; 0x30
 80075cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075d0:	2b30      	cmp	r3, #48	; 0x30
 80075d2:	d0f8      	beq.n	80075c6 <_dtoa_r+0x62e>
 80075d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80075d8:	e04a      	b.n	8007670 <_dtoa_r+0x6d8>
 80075da:	bf00      	nop
 80075dc:	08009058 	.word	0x08009058
 80075e0:	08009030 	.word	0x08009030
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	40240000 	.word	0x40240000
 80075ec:	401c0000 	.word	0x401c0000
 80075f0:	40140000 	.word	0x40140000
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	4baf      	ldr	r3, [pc, #700]	; (80078b8 <_dtoa_r+0x920>)
 80075fa:	f7f8 fffd 	bl	80005f8 <__aeabi_dmul>
 80075fe:	4606      	mov	r6, r0
 8007600:	460f      	mov	r7, r1
 8007602:	e7ac      	b.n	800755e <_dtoa_r+0x5c6>
 8007604:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007608:	9d00      	ldr	r5, [sp, #0]
 800760a:	4642      	mov	r2, r8
 800760c:	464b      	mov	r3, r9
 800760e:	4630      	mov	r0, r6
 8007610:	4639      	mov	r1, r7
 8007612:	f7f9 f91b 	bl	800084c <__aeabi_ddiv>
 8007616:	f7f9 fa9f 	bl	8000b58 <__aeabi_d2iz>
 800761a:	9002      	str	r0, [sp, #8]
 800761c:	f7f8 ff82 	bl	8000524 <__aeabi_i2d>
 8007620:	4642      	mov	r2, r8
 8007622:	464b      	mov	r3, r9
 8007624:	f7f8 ffe8 	bl	80005f8 <__aeabi_dmul>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4630      	mov	r0, r6
 800762e:	4639      	mov	r1, r7
 8007630:	f7f8 fe2a 	bl	8000288 <__aeabi_dsub>
 8007634:	9e02      	ldr	r6, [sp, #8]
 8007636:	9f01      	ldr	r7, [sp, #4]
 8007638:	3630      	adds	r6, #48	; 0x30
 800763a:	f805 6b01 	strb.w	r6, [r5], #1
 800763e:	9e00      	ldr	r6, [sp, #0]
 8007640:	1bae      	subs	r6, r5, r6
 8007642:	42b7      	cmp	r7, r6
 8007644:	4602      	mov	r2, r0
 8007646:	460b      	mov	r3, r1
 8007648:	d137      	bne.n	80076ba <_dtoa_r+0x722>
 800764a:	f7f8 fe1f 	bl	800028c <__adddf3>
 800764e:	4642      	mov	r2, r8
 8007650:	464b      	mov	r3, r9
 8007652:	4606      	mov	r6, r0
 8007654:	460f      	mov	r7, r1
 8007656:	f7f9 fa5f 	bl	8000b18 <__aeabi_dcmpgt>
 800765a:	b9c8      	cbnz	r0, 8007690 <_dtoa_r+0x6f8>
 800765c:	4642      	mov	r2, r8
 800765e:	464b      	mov	r3, r9
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f7f9 fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8007668:	b110      	cbz	r0, 8007670 <_dtoa_r+0x6d8>
 800766a:	9b02      	ldr	r3, [sp, #8]
 800766c:	07d9      	lsls	r1, r3, #31
 800766e:	d40f      	bmi.n	8007690 <_dtoa_r+0x6f8>
 8007670:	4620      	mov	r0, r4
 8007672:	4659      	mov	r1, fp
 8007674:	f000 fcf6 	bl	8008064 <_Bfree>
 8007678:	2300      	movs	r3, #0
 800767a:	702b      	strb	r3, [r5, #0]
 800767c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800767e:	f10a 0001 	add.w	r0, sl, #1
 8007682:	6018      	str	r0, [r3, #0]
 8007684:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007686:	2b00      	cmp	r3, #0
 8007688:	f43f acd8 	beq.w	800703c <_dtoa_r+0xa4>
 800768c:	601d      	str	r5, [r3, #0]
 800768e:	e4d5      	b.n	800703c <_dtoa_r+0xa4>
 8007690:	f8cd a01c 	str.w	sl, [sp, #28]
 8007694:	462b      	mov	r3, r5
 8007696:	461d      	mov	r5, r3
 8007698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800769c:	2a39      	cmp	r2, #57	; 0x39
 800769e:	d108      	bne.n	80076b2 <_dtoa_r+0x71a>
 80076a0:	9a00      	ldr	r2, [sp, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d1f7      	bne.n	8007696 <_dtoa_r+0x6fe>
 80076a6:	9a07      	ldr	r2, [sp, #28]
 80076a8:	9900      	ldr	r1, [sp, #0]
 80076aa:	3201      	adds	r2, #1
 80076ac:	9207      	str	r2, [sp, #28]
 80076ae:	2230      	movs	r2, #48	; 0x30
 80076b0:	700a      	strb	r2, [r1, #0]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	3201      	adds	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e78c      	b.n	80075d4 <_dtoa_r+0x63c>
 80076ba:	4b7f      	ldr	r3, [pc, #508]	; (80078b8 <_dtoa_r+0x920>)
 80076bc:	2200      	movs	r2, #0
 80076be:	f7f8 ff9b 	bl	80005f8 <__aeabi_dmul>
 80076c2:	2200      	movs	r2, #0
 80076c4:	2300      	movs	r3, #0
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	f7f9 f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d09b      	beq.n	800760a <_dtoa_r+0x672>
 80076d2:	e7cd      	b.n	8007670 <_dtoa_r+0x6d8>
 80076d4:	9a08      	ldr	r2, [sp, #32]
 80076d6:	2a00      	cmp	r2, #0
 80076d8:	f000 80c4 	beq.w	8007864 <_dtoa_r+0x8cc>
 80076dc:	9a05      	ldr	r2, [sp, #20]
 80076de:	2a01      	cmp	r2, #1
 80076e0:	f300 80a8 	bgt.w	8007834 <_dtoa_r+0x89c>
 80076e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	f000 80a0 	beq.w	800782c <_dtoa_r+0x894>
 80076ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076f0:	9e06      	ldr	r6, [sp, #24]
 80076f2:	4645      	mov	r5, r8
 80076f4:	9a04      	ldr	r2, [sp, #16]
 80076f6:	2101      	movs	r1, #1
 80076f8:	441a      	add	r2, r3
 80076fa:	4620      	mov	r0, r4
 80076fc:	4498      	add	r8, r3
 80076fe:	9204      	str	r2, [sp, #16]
 8007700:	f000 fd6c 	bl	80081dc <__i2b>
 8007704:	4607      	mov	r7, r0
 8007706:	2d00      	cmp	r5, #0
 8007708:	dd0b      	ble.n	8007722 <_dtoa_r+0x78a>
 800770a:	9b04      	ldr	r3, [sp, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	dd08      	ble.n	8007722 <_dtoa_r+0x78a>
 8007710:	42ab      	cmp	r3, r5
 8007712:	9a04      	ldr	r2, [sp, #16]
 8007714:	bfa8      	it	ge
 8007716:	462b      	movge	r3, r5
 8007718:	eba8 0803 	sub.w	r8, r8, r3
 800771c:	1aed      	subs	r5, r5, r3
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	9b06      	ldr	r3, [sp, #24]
 8007724:	b1fb      	cbz	r3, 8007766 <_dtoa_r+0x7ce>
 8007726:	9b08      	ldr	r3, [sp, #32]
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 809f 	beq.w	800786c <_dtoa_r+0x8d4>
 800772e:	2e00      	cmp	r6, #0
 8007730:	dd11      	ble.n	8007756 <_dtoa_r+0x7be>
 8007732:	4639      	mov	r1, r7
 8007734:	4632      	mov	r2, r6
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fe0c 	bl	8008354 <__pow5mult>
 800773c:	465a      	mov	r2, fp
 800773e:	4601      	mov	r1, r0
 8007740:	4607      	mov	r7, r0
 8007742:	4620      	mov	r0, r4
 8007744:	f000 fd60 	bl	8008208 <__multiply>
 8007748:	4659      	mov	r1, fp
 800774a:	9007      	str	r0, [sp, #28]
 800774c:	4620      	mov	r0, r4
 800774e:	f000 fc89 	bl	8008064 <_Bfree>
 8007752:	9b07      	ldr	r3, [sp, #28]
 8007754:	469b      	mov	fp, r3
 8007756:	9b06      	ldr	r3, [sp, #24]
 8007758:	1b9a      	subs	r2, r3, r6
 800775a:	d004      	beq.n	8007766 <_dtoa_r+0x7ce>
 800775c:	4659      	mov	r1, fp
 800775e:	4620      	mov	r0, r4
 8007760:	f000 fdf8 	bl	8008354 <__pow5mult>
 8007764:	4683      	mov	fp, r0
 8007766:	2101      	movs	r1, #1
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fd37 	bl	80081dc <__i2b>
 800776e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007770:	2b00      	cmp	r3, #0
 8007772:	4606      	mov	r6, r0
 8007774:	dd7c      	ble.n	8007870 <_dtoa_r+0x8d8>
 8007776:	461a      	mov	r2, r3
 8007778:	4601      	mov	r1, r0
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fdea 	bl	8008354 <__pow5mult>
 8007780:	9b05      	ldr	r3, [sp, #20]
 8007782:	2b01      	cmp	r3, #1
 8007784:	4606      	mov	r6, r0
 8007786:	dd76      	ble.n	8007876 <_dtoa_r+0x8de>
 8007788:	2300      	movs	r3, #0
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	6933      	ldr	r3, [r6, #16]
 800778e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007792:	6918      	ldr	r0, [r3, #16]
 8007794:	f000 fcd2 	bl	800813c <__hi0bits>
 8007798:	f1c0 0020 	rsb	r0, r0, #32
 800779c:	9b04      	ldr	r3, [sp, #16]
 800779e:	4418      	add	r0, r3
 80077a0:	f010 001f 	ands.w	r0, r0, #31
 80077a4:	f000 8086 	beq.w	80078b4 <_dtoa_r+0x91c>
 80077a8:	f1c0 0320 	rsb	r3, r0, #32
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	dd7f      	ble.n	80078b0 <_dtoa_r+0x918>
 80077b0:	f1c0 001c 	rsb	r0, r0, #28
 80077b4:	9b04      	ldr	r3, [sp, #16]
 80077b6:	4403      	add	r3, r0
 80077b8:	4480      	add	r8, r0
 80077ba:	4405      	add	r5, r0
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	f1b8 0f00 	cmp.w	r8, #0
 80077c2:	dd05      	ble.n	80077d0 <_dtoa_r+0x838>
 80077c4:	4659      	mov	r1, fp
 80077c6:	4642      	mov	r2, r8
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fe1d 	bl	8008408 <__lshift>
 80077ce:	4683      	mov	fp, r0
 80077d0:	9b04      	ldr	r3, [sp, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dd05      	ble.n	80077e2 <_dtoa_r+0x84a>
 80077d6:	4631      	mov	r1, r6
 80077d8:	461a      	mov	r2, r3
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fe14 	bl	8008408 <__lshift>
 80077e0:	4606      	mov	r6, r0
 80077e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d069      	beq.n	80078bc <_dtoa_r+0x924>
 80077e8:	4631      	mov	r1, r6
 80077ea:	4658      	mov	r0, fp
 80077ec:	f000 fe78 	bl	80084e0 <__mcmp>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	da63      	bge.n	80078bc <_dtoa_r+0x924>
 80077f4:	2300      	movs	r3, #0
 80077f6:	4659      	mov	r1, fp
 80077f8:	220a      	movs	r2, #10
 80077fa:	4620      	mov	r0, r4
 80077fc:	f000 fc54 	bl	80080a8 <__multadd>
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007806:	4683      	mov	fp, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 818f 	beq.w	8007b2c <_dtoa_r+0xb94>
 800780e:	4639      	mov	r1, r7
 8007810:	2300      	movs	r3, #0
 8007812:	220a      	movs	r2, #10
 8007814:	4620      	mov	r0, r4
 8007816:	f000 fc47 	bl	80080a8 <__multadd>
 800781a:	f1b9 0f00 	cmp.w	r9, #0
 800781e:	4607      	mov	r7, r0
 8007820:	f300 808e 	bgt.w	8007940 <_dtoa_r+0x9a8>
 8007824:	9b05      	ldr	r3, [sp, #20]
 8007826:	2b02      	cmp	r3, #2
 8007828:	dc50      	bgt.n	80078cc <_dtoa_r+0x934>
 800782a:	e089      	b.n	8007940 <_dtoa_r+0x9a8>
 800782c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800782e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007832:	e75d      	b.n	80076f0 <_dtoa_r+0x758>
 8007834:	9b01      	ldr	r3, [sp, #4]
 8007836:	1e5e      	subs	r6, r3, #1
 8007838:	9b06      	ldr	r3, [sp, #24]
 800783a:	42b3      	cmp	r3, r6
 800783c:	bfbf      	itttt	lt
 800783e:	9b06      	ldrlt	r3, [sp, #24]
 8007840:	9606      	strlt	r6, [sp, #24]
 8007842:	1af2      	sublt	r2, r6, r3
 8007844:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007846:	bfb6      	itet	lt
 8007848:	189b      	addlt	r3, r3, r2
 800784a:	1b9e      	subge	r6, r3, r6
 800784c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800784e:	9b01      	ldr	r3, [sp, #4]
 8007850:	bfb8      	it	lt
 8007852:	2600      	movlt	r6, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfb5      	itete	lt
 8007858:	eba8 0503 	sublt.w	r5, r8, r3
 800785c:	9b01      	ldrge	r3, [sp, #4]
 800785e:	2300      	movlt	r3, #0
 8007860:	4645      	movge	r5, r8
 8007862:	e747      	b.n	80076f4 <_dtoa_r+0x75c>
 8007864:	9e06      	ldr	r6, [sp, #24]
 8007866:	9f08      	ldr	r7, [sp, #32]
 8007868:	4645      	mov	r5, r8
 800786a:	e74c      	b.n	8007706 <_dtoa_r+0x76e>
 800786c:	9a06      	ldr	r2, [sp, #24]
 800786e:	e775      	b.n	800775c <_dtoa_r+0x7c4>
 8007870:	9b05      	ldr	r3, [sp, #20]
 8007872:	2b01      	cmp	r3, #1
 8007874:	dc18      	bgt.n	80078a8 <_dtoa_r+0x910>
 8007876:	9b02      	ldr	r3, [sp, #8]
 8007878:	b9b3      	cbnz	r3, 80078a8 <_dtoa_r+0x910>
 800787a:	9b03      	ldr	r3, [sp, #12]
 800787c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007880:	b9a3      	cbnz	r3, 80078ac <_dtoa_r+0x914>
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007888:	0d1b      	lsrs	r3, r3, #20
 800788a:	051b      	lsls	r3, r3, #20
 800788c:	b12b      	cbz	r3, 800789a <_dtoa_r+0x902>
 800788e:	9b04      	ldr	r3, [sp, #16]
 8007890:	3301      	adds	r3, #1
 8007892:	9304      	str	r3, [sp, #16]
 8007894:	f108 0801 	add.w	r8, r8, #1
 8007898:	2301      	movs	r3, #1
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f47f af74 	bne.w	800778c <_dtoa_r+0x7f4>
 80078a4:	2001      	movs	r0, #1
 80078a6:	e779      	b.n	800779c <_dtoa_r+0x804>
 80078a8:	2300      	movs	r3, #0
 80078aa:	e7f6      	b.n	800789a <_dtoa_r+0x902>
 80078ac:	9b02      	ldr	r3, [sp, #8]
 80078ae:	e7f4      	b.n	800789a <_dtoa_r+0x902>
 80078b0:	d085      	beq.n	80077be <_dtoa_r+0x826>
 80078b2:	4618      	mov	r0, r3
 80078b4:	301c      	adds	r0, #28
 80078b6:	e77d      	b.n	80077b4 <_dtoa_r+0x81c>
 80078b8:	40240000 	.word	0x40240000
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	dc38      	bgt.n	8007934 <_dtoa_r+0x99c>
 80078c2:	9b05      	ldr	r3, [sp, #20]
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	dd35      	ble.n	8007934 <_dtoa_r+0x99c>
 80078c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078cc:	f1b9 0f00 	cmp.w	r9, #0
 80078d0:	d10d      	bne.n	80078ee <_dtoa_r+0x956>
 80078d2:	4631      	mov	r1, r6
 80078d4:	464b      	mov	r3, r9
 80078d6:	2205      	movs	r2, #5
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fbe5 	bl	80080a8 <__multadd>
 80078de:	4601      	mov	r1, r0
 80078e0:	4606      	mov	r6, r0
 80078e2:	4658      	mov	r0, fp
 80078e4:	f000 fdfc 	bl	80084e0 <__mcmp>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f73f adbd 	bgt.w	8007468 <_dtoa_r+0x4d0>
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	9d00      	ldr	r5, [sp, #0]
 80078f2:	ea6f 0a03 	mvn.w	sl, r3
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	4631      	mov	r1, r6
 80078fc:	4620      	mov	r0, r4
 80078fe:	f000 fbb1 	bl	8008064 <_Bfree>
 8007902:	2f00      	cmp	r7, #0
 8007904:	f43f aeb4 	beq.w	8007670 <_dtoa_r+0x6d8>
 8007908:	f1b8 0f00 	cmp.w	r8, #0
 800790c:	d005      	beq.n	800791a <_dtoa_r+0x982>
 800790e:	45b8      	cmp	r8, r7
 8007910:	d003      	beq.n	800791a <_dtoa_r+0x982>
 8007912:	4641      	mov	r1, r8
 8007914:	4620      	mov	r0, r4
 8007916:	f000 fba5 	bl	8008064 <_Bfree>
 800791a:	4639      	mov	r1, r7
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fba1 	bl	8008064 <_Bfree>
 8007922:	e6a5      	b.n	8007670 <_dtoa_r+0x6d8>
 8007924:	2600      	movs	r6, #0
 8007926:	4637      	mov	r7, r6
 8007928:	e7e1      	b.n	80078ee <_dtoa_r+0x956>
 800792a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800792c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007930:	4637      	mov	r7, r6
 8007932:	e599      	b.n	8007468 <_dtoa_r+0x4d0>
 8007934:	9b08      	ldr	r3, [sp, #32]
 8007936:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80fd 	beq.w	8007b3a <_dtoa_r+0xba2>
 8007940:	2d00      	cmp	r5, #0
 8007942:	dd05      	ble.n	8007950 <_dtoa_r+0x9b8>
 8007944:	4639      	mov	r1, r7
 8007946:	462a      	mov	r2, r5
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fd5d 	bl	8008408 <__lshift>
 800794e:	4607      	mov	r7, r0
 8007950:	9b06      	ldr	r3, [sp, #24]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d05c      	beq.n	8007a10 <_dtoa_r+0xa78>
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fb43 	bl	8007fe4 <_Balloc>
 800795e:	4605      	mov	r5, r0
 8007960:	b928      	cbnz	r0, 800796e <_dtoa_r+0x9d6>
 8007962:	4b80      	ldr	r3, [pc, #512]	; (8007b64 <_dtoa_r+0xbcc>)
 8007964:	4602      	mov	r2, r0
 8007966:	f240 21ea 	movw	r1, #746	; 0x2ea
 800796a:	f7ff bb2e 	b.w	8006fca <_dtoa_r+0x32>
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	3202      	adds	r2, #2
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	f107 010c 	add.w	r1, r7, #12
 8007978:	300c      	adds	r0, #12
 800797a:	f000 fb25 	bl	8007fc8 <memcpy>
 800797e:	2201      	movs	r2, #1
 8007980:	4629      	mov	r1, r5
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fd40 	bl	8008408 <__lshift>
 8007988:	9b00      	ldr	r3, [sp, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	9b00      	ldr	r3, [sp, #0]
 8007990:	444b      	add	r3, r9
 8007992:	9307      	str	r3, [sp, #28]
 8007994:	9b02      	ldr	r3, [sp, #8]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	46b8      	mov	r8, r7
 800799c:	9306      	str	r3, [sp, #24]
 800799e:	4607      	mov	r7, r0
 80079a0:	9b01      	ldr	r3, [sp, #4]
 80079a2:	4631      	mov	r1, r6
 80079a4:	3b01      	subs	r3, #1
 80079a6:	4658      	mov	r0, fp
 80079a8:	9302      	str	r3, [sp, #8]
 80079aa:	f7ff fa69 	bl	8006e80 <quorem>
 80079ae:	4603      	mov	r3, r0
 80079b0:	3330      	adds	r3, #48	; 0x30
 80079b2:	9004      	str	r0, [sp, #16]
 80079b4:	4641      	mov	r1, r8
 80079b6:	4658      	mov	r0, fp
 80079b8:	9308      	str	r3, [sp, #32]
 80079ba:	f000 fd91 	bl	80084e0 <__mcmp>
 80079be:	463a      	mov	r2, r7
 80079c0:	4681      	mov	r9, r0
 80079c2:	4631      	mov	r1, r6
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fda7 	bl	8008518 <__mdiff>
 80079ca:	68c2      	ldr	r2, [r0, #12]
 80079cc:	9b08      	ldr	r3, [sp, #32]
 80079ce:	4605      	mov	r5, r0
 80079d0:	bb02      	cbnz	r2, 8007a14 <_dtoa_r+0xa7c>
 80079d2:	4601      	mov	r1, r0
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fd83 	bl	80084e0 <__mcmp>
 80079da:	9b08      	ldr	r3, [sp, #32]
 80079dc:	4602      	mov	r2, r0
 80079de:	4629      	mov	r1, r5
 80079e0:	4620      	mov	r0, r4
 80079e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80079e6:	f000 fb3d 	bl	8008064 <_Bfree>
 80079ea:	9b05      	ldr	r3, [sp, #20]
 80079ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079ee:	9d01      	ldr	r5, [sp, #4]
 80079f0:	ea43 0102 	orr.w	r1, r3, r2
 80079f4:	9b06      	ldr	r3, [sp, #24]
 80079f6:	430b      	orrs	r3, r1
 80079f8:	9b08      	ldr	r3, [sp, #32]
 80079fa:	d10d      	bne.n	8007a18 <_dtoa_r+0xa80>
 80079fc:	2b39      	cmp	r3, #57	; 0x39
 80079fe:	d029      	beq.n	8007a54 <_dtoa_r+0xabc>
 8007a00:	f1b9 0f00 	cmp.w	r9, #0
 8007a04:	dd01      	ble.n	8007a0a <_dtoa_r+0xa72>
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	3331      	adds	r3, #49	; 0x31
 8007a0a:	9a02      	ldr	r2, [sp, #8]
 8007a0c:	7013      	strb	r3, [r2, #0]
 8007a0e:	e774      	b.n	80078fa <_dtoa_r+0x962>
 8007a10:	4638      	mov	r0, r7
 8007a12:	e7b9      	b.n	8007988 <_dtoa_r+0x9f0>
 8007a14:	2201      	movs	r2, #1
 8007a16:	e7e2      	b.n	80079de <_dtoa_r+0xa46>
 8007a18:	f1b9 0f00 	cmp.w	r9, #0
 8007a1c:	db06      	blt.n	8007a2c <_dtoa_r+0xa94>
 8007a1e:	9905      	ldr	r1, [sp, #20]
 8007a20:	ea41 0909 	orr.w	r9, r1, r9
 8007a24:	9906      	ldr	r1, [sp, #24]
 8007a26:	ea59 0101 	orrs.w	r1, r9, r1
 8007a2a:	d120      	bne.n	8007a6e <_dtoa_r+0xad6>
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	ddec      	ble.n	8007a0a <_dtoa_r+0xa72>
 8007a30:	4659      	mov	r1, fp
 8007a32:	2201      	movs	r2, #1
 8007a34:	4620      	mov	r0, r4
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	f000 fce6 	bl	8008408 <__lshift>
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4683      	mov	fp, r0
 8007a40:	f000 fd4e 	bl	80084e0 <__mcmp>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	9b01      	ldr	r3, [sp, #4]
 8007a48:	dc02      	bgt.n	8007a50 <_dtoa_r+0xab8>
 8007a4a:	d1de      	bne.n	8007a0a <_dtoa_r+0xa72>
 8007a4c:	07da      	lsls	r2, r3, #31
 8007a4e:	d5dc      	bpl.n	8007a0a <_dtoa_r+0xa72>
 8007a50:	2b39      	cmp	r3, #57	; 0x39
 8007a52:	d1d8      	bne.n	8007a06 <_dtoa_r+0xa6e>
 8007a54:	9a02      	ldr	r2, [sp, #8]
 8007a56:	2339      	movs	r3, #57	; 0x39
 8007a58:	7013      	strb	r3, [r2, #0]
 8007a5a:	462b      	mov	r3, r5
 8007a5c:	461d      	mov	r5, r3
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a64:	2a39      	cmp	r2, #57	; 0x39
 8007a66:	d050      	beq.n	8007b0a <_dtoa_r+0xb72>
 8007a68:	3201      	adds	r2, #1
 8007a6a:	701a      	strb	r2, [r3, #0]
 8007a6c:	e745      	b.n	80078fa <_dtoa_r+0x962>
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	dd03      	ble.n	8007a7a <_dtoa_r+0xae2>
 8007a72:	2b39      	cmp	r3, #57	; 0x39
 8007a74:	d0ee      	beq.n	8007a54 <_dtoa_r+0xabc>
 8007a76:	3301      	adds	r3, #1
 8007a78:	e7c7      	b.n	8007a0a <_dtoa_r+0xa72>
 8007a7a:	9a01      	ldr	r2, [sp, #4]
 8007a7c:	9907      	ldr	r1, [sp, #28]
 8007a7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007a82:	428a      	cmp	r2, r1
 8007a84:	d02a      	beq.n	8007adc <_dtoa_r+0xb44>
 8007a86:	4659      	mov	r1, fp
 8007a88:	2300      	movs	r3, #0
 8007a8a:	220a      	movs	r2, #10
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f000 fb0b 	bl	80080a8 <__multadd>
 8007a92:	45b8      	cmp	r8, r7
 8007a94:	4683      	mov	fp, r0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	f04f 020a 	mov.w	r2, #10
 8007a9e:	4641      	mov	r1, r8
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	d107      	bne.n	8007ab4 <_dtoa_r+0xb1c>
 8007aa4:	f000 fb00 	bl	80080a8 <__multadd>
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	4607      	mov	r7, r0
 8007aac:	9b01      	ldr	r3, [sp, #4]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	e775      	b.n	80079a0 <_dtoa_r+0xa08>
 8007ab4:	f000 faf8 	bl	80080a8 <__multadd>
 8007ab8:	4639      	mov	r1, r7
 8007aba:	4680      	mov	r8, r0
 8007abc:	2300      	movs	r3, #0
 8007abe:	220a      	movs	r2, #10
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f000 faf1 	bl	80080a8 <__multadd>
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	e7f0      	b.n	8007aac <_dtoa_r+0xb14>
 8007aca:	f1b9 0f00 	cmp.w	r9, #0
 8007ace:	9a00      	ldr	r2, [sp, #0]
 8007ad0:	bfcc      	ite	gt
 8007ad2:	464d      	movgt	r5, r9
 8007ad4:	2501      	movle	r5, #1
 8007ad6:	4415      	add	r5, r2
 8007ad8:	f04f 0800 	mov.w	r8, #0
 8007adc:	4659      	mov	r1, fp
 8007ade:	2201      	movs	r2, #1
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	9301      	str	r3, [sp, #4]
 8007ae4:	f000 fc90 	bl	8008408 <__lshift>
 8007ae8:	4631      	mov	r1, r6
 8007aea:	4683      	mov	fp, r0
 8007aec:	f000 fcf8 	bl	80084e0 <__mcmp>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	dcb2      	bgt.n	8007a5a <_dtoa_r+0xac2>
 8007af4:	d102      	bne.n	8007afc <_dtoa_r+0xb64>
 8007af6:	9b01      	ldr	r3, [sp, #4]
 8007af8:	07db      	lsls	r3, r3, #31
 8007afa:	d4ae      	bmi.n	8007a5a <_dtoa_r+0xac2>
 8007afc:	462b      	mov	r3, r5
 8007afe:	461d      	mov	r5, r3
 8007b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b04:	2a30      	cmp	r2, #48	; 0x30
 8007b06:	d0fa      	beq.n	8007afe <_dtoa_r+0xb66>
 8007b08:	e6f7      	b.n	80078fa <_dtoa_r+0x962>
 8007b0a:	9a00      	ldr	r2, [sp, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d1a5      	bne.n	8007a5c <_dtoa_r+0xac4>
 8007b10:	f10a 0a01 	add.w	sl, sl, #1
 8007b14:	2331      	movs	r3, #49	; 0x31
 8007b16:	e779      	b.n	8007a0c <_dtoa_r+0xa74>
 8007b18:	4b13      	ldr	r3, [pc, #76]	; (8007b68 <_dtoa_r+0xbd0>)
 8007b1a:	f7ff baaf 	b.w	800707c <_dtoa_r+0xe4>
 8007b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f47f aa86 	bne.w	8007032 <_dtoa_r+0x9a>
 8007b26:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <_dtoa_r+0xbd4>)
 8007b28:	f7ff baa8 	b.w	800707c <_dtoa_r+0xe4>
 8007b2c:	f1b9 0f00 	cmp.w	r9, #0
 8007b30:	dc03      	bgt.n	8007b3a <_dtoa_r+0xba2>
 8007b32:	9b05      	ldr	r3, [sp, #20]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	f73f aec9 	bgt.w	80078cc <_dtoa_r+0x934>
 8007b3a:	9d00      	ldr	r5, [sp, #0]
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4658      	mov	r0, fp
 8007b40:	f7ff f99e 	bl	8006e80 <quorem>
 8007b44:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b48:	f805 3b01 	strb.w	r3, [r5], #1
 8007b4c:	9a00      	ldr	r2, [sp, #0]
 8007b4e:	1aaa      	subs	r2, r5, r2
 8007b50:	4591      	cmp	r9, r2
 8007b52:	ddba      	ble.n	8007aca <_dtoa_r+0xb32>
 8007b54:	4659      	mov	r1, fp
 8007b56:	2300      	movs	r3, #0
 8007b58:	220a      	movs	r2, #10
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 faa4 	bl	80080a8 <__multadd>
 8007b60:	4683      	mov	fp, r0
 8007b62:	e7eb      	b.n	8007b3c <_dtoa_r+0xba4>
 8007b64:	08008f5b 	.word	0x08008f5b
 8007b68:	08008eb4 	.word	0x08008eb4
 8007b6c:	08008ed8 	.word	0x08008ed8

08007b70 <__sflush_r>:
 8007b70:	898a      	ldrh	r2, [r1, #12]
 8007b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b76:	4605      	mov	r5, r0
 8007b78:	0710      	lsls	r0, r2, #28
 8007b7a:	460c      	mov	r4, r1
 8007b7c:	d458      	bmi.n	8007c30 <__sflush_r+0xc0>
 8007b7e:	684b      	ldr	r3, [r1, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dc05      	bgt.n	8007b90 <__sflush_r+0x20>
 8007b84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	dc02      	bgt.n	8007b90 <__sflush_r+0x20>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	d0f9      	beq.n	8007b8a <__sflush_r+0x1a>
 8007b96:	2300      	movs	r3, #0
 8007b98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b9c:	682f      	ldr	r7, [r5, #0]
 8007b9e:	602b      	str	r3, [r5, #0]
 8007ba0:	d032      	beq.n	8007c08 <__sflush_r+0x98>
 8007ba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	075a      	lsls	r2, r3, #29
 8007ba8:	d505      	bpl.n	8007bb6 <__sflush_r+0x46>
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	1ac0      	subs	r0, r0, r3
 8007bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bb0:	b10b      	cbz	r3, 8007bb6 <__sflush_r+0x46>
 8007bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bb4:	1ac0      	subs	r0, r0, r3
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4602      	mov	r2, r0
 8007bba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bbc:	6a21      	ldr	r1, [r4, #32]
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	47b0      	blx	r6
 8007bc2:	1c43      	adds	r3, r0, #1
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	d106      	bne.n	8007bd6 <__sflush_r+0x66>
 8007bc8:	6829      	ldr	r1, [r5, #0]
 8007bca:	291d      	cmp	r1, #29
 8007bcc:	d82c      	bhi.n	8007c28 <__sflush_r+0xb8>
 8007bce:	4a2a      	ldr	r2, [pc, #168]	; (8007c78 <__sflush_r+0x108>)
 8007bd0:	40ca      	lsrs	r2, r1
 8007bd2:	07d6      	lsls	r6, r2, #31
 8007bd4:	d528      	bpl.n	8007c28 <__sflush_r+0xb8>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6062      	str	r2, [r4, #4]
 8007bda:	04d9      	lsls	r1, r3, #19
 8007bdc:	6922      	ldr	r2, [r4, #16]
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	d504      	bpl.n	8007bec <__sflush_r+0x7c>
 8007be2:	1c42      	adds	r2, r0, #1
 8007be4:	d101      	bne.n	8007bea <__sflush_r+0x7a>
 8007be6:	682b      	ldr	r3, [r5, #0]
 8007be8:	b903      	cbnz	r3, 8007bec <__sflush_r+0x7c>
 8007bea:	6560      	str	r0, [r4, #84]	; 0x54
 8007bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bee:	602f      	str	r7, [r5, #0]
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	d0ca      	beq.n	8007b8a <__sflush_r+0x1a>
 8007bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bf8:	4299      	cmp	r1, r3
 8007bfa:	d002      	beq.n	8007c02 <__sflush_r+0x92>
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 fd7f 	bl	8008700 <_free_r>
 8007c02:	2000      	movs	r0, #0
 8007c04:	6360      	str	r0, [r4, #52]	; 0x34
 8007c06:	e7c1      	b.n	8007b8c <__sflush_r+0x1c>
 8007c08:	6a21      	ldr	r1, [r4, #32]
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b0      	blx	r6
 8007c10:	1c41      	adds	r1, r0, #1
 8007c12:	d1c7      	bne.n	8007ba4 <__sflush_r+0x34>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0c4      	beq.n	8007ba4 <__sflush_r+0x34>
 8007c1a:	2b1d      	cmp	r3, #29
 8007c1c:	d001      	beq.n	8007c22 <__sflush_r+0xb2>
 8007c1e:	2b16      	cmp	r3, #22
 8007c20:	d101      	bne.n	8007c26 <__sflush_r+0xb6>
 8007c22:	602f      	str	r7, [r5, #0]
 8007c24:	e7b1      	b.n	8007b8a <__sflush_r+0x1a>
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c2c:	81a3      	strh	r3, [r4, #12]
 8007c2e:	e7ad      	b.n	8007b8c <__sflush_r+0x1c>
 8007c30:	690f      	ldr	r7, [r1, #16]
 8007c32:	2f00      	cmp	r7, #0
 8007c34:	d0a9      	beq.n	8007b8a <__sflush_r+0x1a>
 8007c36:	0793      	lsls	r3, r2, #30
 8007c38:	680e      	ldr	r6, [r1, #0]
 8007c3a:	bf08      	it	eq
 8007c3c:	694b      	ldreq	r3, [r1, #20]
 8007c3e:	600f      	str	r7, [r1, #0]
 8007c40:	bf18      	it	ne
 8007c42:	2300      	movne	r3, #0
 8007c44:	eba6 0807 	sub.w	r8, r6, r7
 8007c48:	608b      	str	r3, [r1, #8]
 8007c4a:	f1b8 0f00 	cmp.w	r8, #0
 8007c4e:	dd9c      	ble.n	8007b8a <__sflush_r+0x1a>
 8007c50:	6a21      	ldr	r1, [r4, #32]
 8007c52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c54:	4643      	mov	r3, r8
 8007c56:	463a      	mov	r2, r7
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b0      	blx	r6
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	dc06      	bgt.n	8007c6e <__sflush_r+0xfe>
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c66:	81a3      	strh	r3, [r4, #12]
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e78e      	b.n	8007b8c <__sflush_r+0x1c>
 8007c6e:	4407      	add	r7, r0
 8007c70:	eba8 0800 	sub.w	r8, r8, r0
 8007c74:	e7e9      	b.n	8007c4a <__sflush_r+0xda>
 8007c76:	bf00      	nop
 8007c78:	20400001 	.word	0x20400001

08007c7c <_fflush_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	4605      	mov	r5, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	b913      	cbnz	r3, 8007c8c <_fflush_r+0x10>
 8007c86:	2500      	movs	r5, #0
 8007c88:	4628      	mov	r0, r5
 8007c8a:	bd38      	pop	{r3, r4, r5, pc}
 8007c8c:	b118      	cbz	r0, 8007c96 <_fflush_r+0x1a>
 8007c8e:	6983      	ldr	r3, [r0, #24]
 8007c90:	b90b      	cbnz	r3, 8007c96 <_fflush_r+0x1a>
 8007c92:	f000 f887 	bl	8007da4 <__sinit>
 8007c96:	4b14      	ldr	r3, [pc, #80]	; (8007ce8 <_fflush_r+0x6c>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	d11b      	bne.n	8007cd4 <_fflush_r+0x58>
 8007c9c:	686c      	ldr	r4, [r5, #4]
 8007c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d0ef      	beq.n	8007c86 <_fflush_r+0xa>
 8007ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ca8:	07d0      	lsls	r0, r2, #31
 8007caa:	d404      	bmi.n	8007cb6 <_fflush_r+0x3a>
 8007cac:	0599      	lsls	r1, r3, #22
 8007cae:	d402      	bmi.n	8007cb6 <_fflush_r+0x3a>
 8007cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cb2:	f000 f91a 	bl	8007eea <__retarget_lock_acquire_recursive>
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	4621      	mov	r1, r4
 8007cba:	f7ff ff59 	bl	8007b70 <__sflush_r>
 8007cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cc0:	07da      	lsls	r2, r3, #31
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	d4e0      	bmi.n	8007c88 <_fflush_r+0xc>
 8007cc6:	89a3      	ldrh	r3, [r4, #12]
 8007cc8:	059b      	lsls	r3, r3, #22
 8007cca:	d4dd      	bmi.n	8007c88 <_fflush_r+0xc>
 8007ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cce:	f000 f90d 	bl	8007eec <__retarget_lock_release_recursive>
 8007cd2:	e7d9      	b.n	8007c88 <_fflush_r+0xc>
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <_fflush_r+0x70>)
 8007cd6:	429c      	cmp	r4, r3
 8007cd8:	d101      	bne.n	8007cde <_fflush_r+0x62>
 8007cda:	68ac      	ldr	r4, [r5, #8]
 8007cdc:	e7df      	b.n	8007c9e <_fflush_r+0x22>
 8007cde:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <_fflush_r+0x74>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	bf08      	it	eq
 8007ce4:	68ec      	ldreq	r4, [r5, #12]
 8007ce6:	e7da      	b.n	8007c9e <_fflush_r+0x22>
 8007ce8:	08008f8c 	.word	0x08008f8c
 8007cec:	08008fac 	.word	0x08008fac
 8007cf0:	08008f6c 	.word	0x08008f6c

08007cf4 <std>:
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8007cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d02:	6083      	str	r3, [r0, #8]
 8007d04:	8181      	strh	r1, [r0, #12]
 8007d06:	6643      	str	r3, [r0, #100]	; 0x64
 8007d08:	81c2      	strh	r2, [r0, #14]
 8007d0a:	6183      	str	r3, [r0, #24]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	2208      	movs	r2, #8
 8007d10:	305c      	adds	r0, #92	; 0x5c
 8007d12:	f7fe faf5 	bl	8006300 <memset>
 8007d16:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <std+0x38>)
 8007d18:	6263      	str	r3, [r4, #36]	; 0x24
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <std+0x3c>)
 8007d1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <std+0x40>)
 8007d20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <std+0x44>)
 8007d24:	6224      	str	r4, [r4, #32]
 8007d26:	6323      	str	r3, [r4, #48]	; 0x30
 8007d28:	bd10      	pop	{r4, pc}
 8007d2a:	bf00      	nop
 8007d2c:	08008b29 	.word	0x08008b29
 8007d30:	08008b4b 	.word	0x08008b4b
 8007d34:	08008b83 	.word	0x08008b83
 8007d38:	08008ba7 	.word	0x08008ba7

08007d3c <_cleanup_r>:
 8007d3c:	4901      	ldr	r1, [pc, #4]	; (8007d44 <_cleanup_r+0x8>)
 8007d3e:	f000 b8af 	b.w	8007ea0 <_fwalk_reent>
 8007d42:	bf00      	nop
 8007d44:	08007c7d 	.word	0x08007c7d

08007d48 <__sfmoreglue>:
 8007d48:	b570      	push	{r4, r5, r6, lr}
 8007d4a:	1e4a      	subs	r2, r1, #1
 8007d4c:	2568      	movs	r5, #104	; 0x68
 8007d4e:	4355      	muls	r5, r2
 8007d50:	460e      	mov	r6, r1
 8007d52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d56:	f000 fd23 	bl	80087a0 <_malloc_r>
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	b140      	cbz	r0, 8007d70 <__sfmoreglue+0x28>
 8007d5e:	2100      	movs	r1, #0
 8007d60:	e9c0 1600 	strd	r1, r6, [r0]
 8007d64:	300c      	adds	r0, #12
 8007d66:	60a0      	str	r0, [r4, #8]
 8007d68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d6c:	f7fe fac8 	bl	8006300 <memset>
 8007d70:	4620      	mov	r0, r4
 8007d72:	bd70      	pop	{r4, r5, r6, pc}

08007d74 <__sfp_lock_acquire>:
 8007d74:	4801      	ldr	r0, [pc, #4]	; (8007d7c <__sfp_lock_acquire+0x8>)
 8007d76:	f000 b8b8 	b.w	8007eea <__retarget_lock_acquire_recursive>
 8007d7a:	bf00      	nop
 8007d7c:	20000394 	.word	0x20000394

08007d80 <__sfp_lock_release>:
 8007d80:	4801      	ldr	r0, [pc, #4]	; (8007d88 <__sfp_lock_release+0x8>)
 8007d82:	f000 b8b3 	b.w	8007eec <__retarget_lock_release_recursive>
 8007d86:	bf00      	nop
 8007d88:	20000394 	.word	0x20000394

08007d8c <__sinit_lock_acquire>:
 8007d8c:	4801      	ldr	r0, [pc, #4]	; (8007d94 <__sinit_lock_acquire+0x8>)
 8007d8e:	f000 b8ac 	b.w	8007eea <__retarget_lock_acquire_recursive>
 8007d92:	bf00      	nop
 8007d94:	2000038f 	.word	0x2000038f

08007d98 <__sinit_lock_release>:
 8007d98:	4801      	ldr	r0, [pc, #4]	; (8007da0 <__sinit_lock_release+0x8>)
 8007d9a:	f000 b8a7 	b.w	8007eec <__retarget_lock_release_recursive>
 8007d9e:	bf00      	nop
 8007da0:	2000038f 	.word	0x2000038f

08007da4 <__sinit>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	4604      	mov	r4, r0
 8007da8:	f7ff fff0 	bl	8007d8c <__sinit_lock_acquire>
 8007dac:	69a3      	ldr	r3, [r4, #24]
 8007dae:	b11b      	cbz	r3, 8007db8 <__sinit+0x14>
 8007db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007db4:	f7ff bff0 	b.w	8007d98 <__sinit_lock_release>
 8007db8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dbc:	6523      	str	r3, [r4, #80]	; 0x50
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <__sinit+0x68>)
 8007dc0:	4a13      	ldr	r2, [pc, #76]	; (8007e10 <__sinit+0x6c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007dc6:	42a3      	cmp	r3, r4
 8007dc8:	bf04      	itt	eq
 8007dca:	2301      	moveq	r3, #1
 8007dcc:	61a3      	streq	r3, [r4, #24]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 f820 	bl	8007e14 <__sfp>
 8007dd4:	6060      	str	r0, [r4, #4]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f000 f81c 	bl	8007e14 <__sfp>
 8007ddc:	60a0      	str	r0, [r4, #8]
 8007dde:	4620      	mov	r0, r4
 8007de0:	f000 f818 	bl	8007e14 <__sfp>
 8007de4:	2200      	movs	r2, #0
 8007de6:	60e0      	str	r0, [r4, #12]
 8007de8:	2104      	movs	r1, #4
 8007dea:	6860      	ldr	r0, [r4, #4]
 8007dec:	f7ff ff82 	bl	8007cf4 <std>
 8007df0:	68a0      	ldr	r0, [r4, #8]
 8007df2:	2201      	movs	r2, #1
 8007df4:	2109      	movs	r1, #9
 8007df6:	f7ff ff7d 	bl	8007cf4 <std>
 8007dfa:	68e0      	ldr	r0, [r4, #12]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	2112      	movs	r1, #18
 8007e00:	f7ff ff78 	bl	8007cf4 <std>
 8007e04:	2301      	movs	r3, #1
 8007e06:	61a3      	str	r3, [r4, #24]
 8007e08:	e7d2      	b.n	8007db0 <__sinit+0xc>
 8007e0a:	bf00      	nop
 8007e0c:	08008ea0 	.word	0x08008ea0
 8007e10:	08007d3d 	.word	0x08007d3d

08007e14 <__sfp>:
 8007e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e16:	4607      	mov	r7, r0
 8007e18:	f7ff ffac 	bl	8007d74 <__sfp_lock_acquire>
 8007e1c:	4b1e      	ldr	r3, [pc, #120]	; (8007e98 <__sfp+0x84>)
 8007e1e:	681e      	ldr	r6, [r3, #0]
 8007e20:	69b3      	ldr	r3, [r6, #24]
 8007e22:	b913      	cbnz	r3, 8007e2a <__sfp+0x16>
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff ffbd 	bl	8007da4 <__sinit>
 8007e2a:	3648      	adds	r6, #72	; 0x48
 8007e2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	d503      	bpl.n	8007e3c <__sfp+0x28>
 8007e34:	6833      	ldr	r3, [r6, #0]
 8007e36:	b30b      	cbz	r3, 8007e7c <__sfp+0x68>
 8007e38:	6836      	ldr	r6, [r6, #0]
 8007e3a:	e7f7      	b.n	8007e2c <__sfp+0x18>
 8007e3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e40:	b9d5      	cbnz	r5, 8007e78 <__sfp+0x64>
 8007e42:	4b16      	ldr	r3, [pc, #88]	; (8007e9c <__sfp+0x88>)
 8007e44:	60e3      	str	r3, [r4, #12]
 8007e46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e4a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e4c:	f000 f84c 	bl	8007ee8 <__retarget_lock_init_recursive>
 8007e50:	f7ff ff96 	bl	8007d80 <__sfp_lock_release>
 8007e54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e5c:	6025      	str	r5, [r4, #0]
 8007e5e:	61a5      	str	r5, [r4, #24]
 8007e60:	2208      	movs	r2, #8
 8007e62:	4629      	mov	r1, r5
 8007e64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e68:	f7fe fa4a 	bl	8006300 <memset>
 8007e6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e74:	4620      	mov	r0, r4
 8007e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e78:	3468      	adds	r4, #104	; 0x68
 8007e7a:	e7d9      	b.n	8007e30 <__sfp+0x1c>
 8007e7c:	2104      	movs	r1, #4
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f7ff ff62 	bl	8007d48 <__sfmoreglue>
 8007e84:	4604      	mov	r4, r0
 8007e86:	6030      	str	r0, [r6, #0]
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	d1d5      	bne.n	8007e38 <__sfp+0x24>
 8007e8c:	f7ff ff78 	bl	8007d80 <__sfp_lock_release>
 8007e90:	230c      	movs	r3, #12
 8007e92:	603b      	str	r3, [r7, #0]
 8007e94:	e7ee      	b.n	8007e74 <__sfp+0x60>
 8007e96:	bf00      	nop
 8007e98:	08008ea0 	.word	0x08008ea0
 8007e9c:	ffff0001 	.word	0xffff0001

08007ea0 <_fwalk_reent>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	4688      	mov	r8, r1
 8007ea8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007eac:	2700      	movs	r7, #0
 8007eae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007eb2:	f1b9 0901 	subs.w	r9, r9, #1
 8007eb6:	d505      	bpl.n	8007ec4 <_fwalk_reent+0x24>
 8007eb8:	6824      	ldr	r4, [r4, #0]
 8007eba:	2c00      	cmp	r4, #0
 8007ebc:	d1f7      	bne.n	8007eae <_fwalk_reent+0xe>
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec4:	89ab      	ldrh	r3, [r5, #12]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d907      	bls.n	8007eda <_fwalk_reent+0x3a>
 8007eca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	d003      	beq.n	8007eda <_fwalk_reent+0x3a>
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	47c0      	blx	r8
 8007ed8:	4307      	orrs	r7, r0
 8007eda:	3568      	adds	r5, #104	; 0x68
 8007edc:	e7e9      	b.n	8007eb2 <_fwalk_reent+0x12>
	...

08007ee0 <_localeconv_r>:
 8007ee0:	4800      	ldr	r0, [pc, #0]	; (8007ee4 <_localeconv_r+0x4>)
 8007ee2:	4770      	bx	lr
 8007ee4:	20000160 	.word	0x20000160

08007ee8 <__retarget_lock_init_recursive>:
 8007ee8:	4770      	bx	lr

08007eea <__retarget_lock_acquire_recursive>:
 8007eea:	4770      	bx	lr

08007eec <__retarget_lock_release_recursive>:
 8007eec:	4770      	bx	lr

08007eee <__swhatbuf_r>:
 8007eee:	b570      	push	{r4, r5, r6, lr}
 8007ef0:	460e      	mov	r6, r1
 8007ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef6:	2900      	cmp	r1, #0
 8007ef8:	b096      	sub	sp, #88	; 0x58
 8007efa:	4614      	mov	r4, r2
 8007efc:	461d      	mov	r5, r3
 8007efe:	da07      	bge.n	8007f10 <__swhatbuf_r+0x22>
 8007f00:	2300      	movs	r3, #0
 8007f02:	602b      	str	r3, [r5, #0]
 8007f04:	89b3      	ldrh	r3, [r6, #12]
 8007f06:	061a      	lsls	r2, r3, #24
 8007f08:	d410      	bmi.n	8007f2c <__swhatbuf_r+0x3e>
 8007f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0e:	e00e      	b.n	8007f2e <__swhatbuf_r+0x40>
 8007f10:	466a      	mov	r2, sp
 8007f12:	f000 fe9f 	bl	8008c54 <_fstat_r>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	dbf2      	blt.n	8007f00 <__swhatbuf_r+0x12>
 8007f1a:	9a01      	ldr	r2, [sp, #4]
 8007f1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f24:	425a      	negs	r2, r3
 8007f26:	415a      	adcs	r2, r3
 8007f28:	602a      	str	r2, [r5, #0]
 8007f2a:	e7ee      	b.n	8007f0a <__swhatbuf_r+0x1c>
 8007f2c:	2340      	movs	r3, #64	; 0x40
 8007f2e:	2000      	movs	r0, #0
 8007f30:	6023      	str	r3, [r4, #0]
 8007f32:	b016      	add	sp, #88	; 0x58
 8007f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f38 <__smakebuf_r>:
 8007f38:	898b      	ldrh	r3, [r1, #12]
 8007f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f3c:	079d      	lsls	r5, r3, #30
 8007f3e:	4606      	mov	r6, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	d507      	bpl.n	8007f54 <__smakebuf_r+0x1c>
 8007f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f48:	6023      	str	r3, [r4, #0]
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	6163      	str	r3, [r4, #20]
 8007f50:	b002      	add	sp, #8
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	ab01      	add	r3, sp, #4
 8007f56:	466a      	mov	r2, sp
 8007f58:	f7ff ffc9 	bl	8007eee <__swhatbuf_r>
 8007f5c:	9900      	ldr	r1, [sp, #0]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 fc1d 	bl	80087a0 <_malloc_r>
 8007f66:	b948      	cbnz	r0, 8007f7c <__smakebuf_r+0x44>
 8007f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6c:	059a      	lsls	r2, r3, #22
 8007f6e:	d4ef      	bmi.n	8007f50 <__smakebuf_r+0x18>
 8007f70:	f023 0303 	bic.w	r3, r3, #3
 8007f74:	f043 0302 	orr.w	r3, r3, #2
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	e7e3      	b.n	8007f44 <__smakebuf_r+0xc>
 8007f7c:	4b0d      	ldr	r3, [pc, #52]	; (8007fb4 <__smakebuf_r+0x7c>)
 8007f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f80:	89a3      	ldrh	r3, [r4, #12]
 8007f82:	6020      	str	r0, [r4, #0]
 8007f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f88:	81a3      	strh	r3, [r4, #12]
 8007f8a:	9b00      	ldr	r3, [sp, #0]
 8007f8c:	6163      	str	r3, [r4, #20]
 8007f8e:	9b01      	ldr	r3, [sp, #4]
 8007f90:	6120      	str	r0, [r4, #16]
 8007f92:	b15b      	cbz	r3, 8007fac <__smakebuf_r+0x74>
 8007f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f000 fe6d 	bl	8008c78 <_isatty_r>
 8007f9e:	b128      	cbz	r0, 8007fac <__smakebuf_r+0x74>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f023 0303 	bic.w	r3, r3, #3
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	89a0      	ldrh	r0, [r4, #12]
 8007fae:	4305      	orrs	r5, r0
 8007fb0:	81a5      	strh	r5, [r4, #12]
 8007fb2:	e7cd      	b.n	8007f50 <__smakebuf_r+0x18>
 8007fb4:	08007d3d 	.word	0x08007d3d

08007fb8 <malloc>:
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <malloc+0xc>)
 8007fba:	4601      	mov	r1, r0
 8007fbc:	6818      	ldr	r0, [r3, #0]
 8007fbe:	f000 bbef 	b.w	80087a0 <_malloc_r>
 8007fc2:	bf00      	nop
 8007fc4:	2000000c 	.word	0x2000000c

08007fc8 <memcpy>:
 8007fc8:	440a      	add	r2, r1
 8007fca:	4291      	cmp	r1, r2
 8007fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd0:	d100      	bne.n	8007fd4 <memcpy+0xc>
 8007fd2:	4770      	bx	lr
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fde:	4291      	cmp	r1, r2
 8007fe0:	d1f9      	bne.n	8007fd6 <memcpy+0xe>
 8007fe2:	bd10      	pop	{r4, pc}

08007fe4 <_Balloc>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	b976      	cbnz	r6, 800800c <_Balloc+0x28>
 8007fee:	2010      	movs	r0, #16
 8007ff0:	f7ff ffe2 	bl	8007fb8 <malloc>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ff8:	b920      	cbnz	r0, 8008004 <_Balloc+0x20>
 8007ffa:	4b18      	ldr	r3, [pc, #96]	; (800805c <_Balloc+0x78>)
 8007ffc:	4818      	ldr	r0, [pc, #96]	; (8008060 <_Balloc+0x7c>)
 8007ffe:	2166      	movs	r1, #102	; 0x66
 8008000:	f000 fde8 	bl	8008bd4 <__assert_func>
 8008004:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008008:	6006      	str	r6, [r0, #0]
 800800a:	60c6      	str	r6, [r0, #12]
 800800c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800800e:	68f3      	ldr	r3, [r6, #12]
 8008010:	b183      	cbz	r3, 8008034 <_Balloc+0x50>
 8008012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800801a:	b9b8      	cbnz	r0, 800804c <_Balloc+0x68>
 800801c:	2101      	movs	r1, #1
 800801e:	fa01 f605 	lsl.w	r6, r1, r5
 8008022:	1d72      	adds	r2, r6, #5
 8008024:	0092      	lsls	r2, r2, #2
 8008026:	4620      	mov	r0, r4
 8008028:	f000 fb5a 	bl	80086e0 <_calloc_r>
 800802c:	b160      	cbz	r0, 8008048 <_Balloc+0x64>
 800802e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008032:	e00e      	b.n	8008052 <_Balloc+0x6e>
 8008034:	2221      	movs	r2, #33	; 0x21
 8008036:	2104      	movs	r1, #4
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fb51 	bl	80086e0 <_calloc_r>
 800803e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008040:	60f0      	str	r0, [r6, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e4      	bne.n	8008012 <_Balloc+0x2e>
 8008048:	2000      	movs	r0, #0
 800804a:	bd70      	pop	{r4, r5, r6, pc}
 800804c:	6802      	ldr	r2, [r0, #0]
 800804e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008052:	2300      	movs	r3, #0
 8008054:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008058:	e7f7      	b.n	800804a <_Balloc+0x66>
 800805a:	bf00      	nop
 800805c:	08008ee5 	.word	0x08008ee5
 8008060:	08008fcc 	.word	0x08008fcc

08008064 <_Bfree>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008068:	4605      	mov	r5, r0
 800806a:	460c      	mov	r4, r1
 800806c:	b976      	cbnz	r6, 800808c <_Bfree+0x28>
 800806e:	2010      	movs	r0, #16
 8008070:	f7ff ffa2 	bl	8007fb8 <malloc>
 8008074:	4602      	mov	r2, r0
 8008076:	6268      	str	r0, [r5, #36]	; 0x24
 8008078:	b920      	cbnz	r0, 8008084 <_Bfree+0x20>
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <_Bfree+0x3c>)
 800807c:	4809      	ldr	r0, [pc, #36]	; (80080a4 <_Bfree+0x40>)
 800807e:	218a      	movs	r1, #138	; 0x8a
 8008080:	f000 fda8 	bl	8008bd4 <__assert_func>
 8008084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008088:	6006      	str	r6, [r0, #0]
 800808a:	60c6      	str	r6, [r0, #12]
 800808c:	b13c      	cbz	r4, 800809e <_Bfree+0x3a>
 800808e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008090:	6862      	ldr	r2, [r4, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008098:	6021      	str	r1, [r4, #0]
 800809a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	08008ee5 	.word	0x08008ee5
 80080a4:	08008fcc 	.word	0x08008fcc

080080a8 <__multadd>:
 80080a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ac:	690e      	ldr	r6, [r1, #16]
 80080ae:	4607      	mov	r7, r0
 80080b0:	4698      	mov	r8, r3
 80080b2:	460c      	mov	r4, r1
 80080b4:	f101 0014 	add.w	r0, r1, #20
 80080b8:	2300      	movs	r3, #0
 80080ba:	6805      	ldr	r5, [r0, #0]
 80080bc:	b2a9      	uxth	r1, r5
 80080be:	fb02 8101 	mla	r1, r2, r1, r8
 80080c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80080c6:	0c2d      	lsrs	r5, r5, #16
 80080c8:	fb02 c505 	mla	r5, r2, r5, ip
 80080cc:	b289      	uxth	r1, r1
 80080ce:	3301      	adds	r3, #1
 80080d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80080d4:	429e      	cmp	r6, r3
 80080d6:	f840 1b04 	str.w	r1, [r0], #4
 80080da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80080de:	dcec      	bgt.n	80080ba <__multadd+0x12>
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	d022      	beq.n	800812c <__multadd+0x84>
 80080e6:	68a3      	ldr	r3, [r4, #8]
 80080e8:	42b3      	cmp	r3, r6
 80080ea:	dc19      	bgt.n	8008120 <__multadd+0x78>
 80080ec:	6861      	ldr	r1, [r4, #4]
 80080ee:	4638      	mov	r0, r7
 80080f0:	3101      	adds	r1, #1
 80080f2:	f7ff ff77 	bl	8007fe4 <_Balloc>
 80080f6:	4605      	mov	r5, r0
 80080f8:	b928      	cbnz	r0, 8008106 <__multadd+0x5e>
 80080fa:	4602      	mov	r2, r0
 80080fc:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <__multadd+0x8c>)
 80080fe:	480e      	ldr	r0, [pc, #56]	; (8008138 <__multadd+0x90>)
 8008100:	21b5      	movs	r1, #181	; 0xb5
 8008102:	f000 fd67 	bl	8008bd4 <__assert_func>
 8008106:	6922      	ldr	r2, [r4, #16]
 8008108:	3202      	adds	r2, #2
 800810a:	f104 010c 	add.w	r1, r4, #12
 800810e:	0092      	lsls	r2, r2, #2
 8008110:	300c      	adds	r0, #12
 8008112:	f7ff ff59 	bl	8007fc8 <memcpy>
 8008116:	4621      	mov	r1, r4
 8008118:	4638      	mov	r0, r7
 800811a:	f7ff ffa3 	bl	8008064 <_Bfree>
 800811e:	462c      	mov	r4, r5
 8008120:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008124:	3601      	adds	r6, #1
 8008126:	f8c3 8014 	str.w	r8, [r3, #20]
 800812a:	6126      	str	r6, [r4, #16]
 800812c:	4620      	mov	r0, r4
 800812e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008132:	bf00      	nop
 8008134:	08008f5b 	.word	0x08008f5b
 8008138:	08008fcc 	.word	0x08008fcc

0800813c <__hi0bits>:
 800813c:	0c03      	lsrs	r3, r0, #16
 800813e:	041b      	lsls	r3, r3, #16
 8008140:	b9d3      	cbnz	r3, 8008178 <__hi0bits+0x3c>
 8008142:	0400      	lsls	r0, r0, #16
 8008144:	2310      	movs	r3, #16
 8008146:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800814a:	bf04      	itt	eq
 800814c:	0200      	lsleq	r0, r0, #8
 800814e:	3308      	addeq	r3, #8
 8008150:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008154:	bf04      	itt	eq
 8008156:	0100      	lsleq	r0, r0, #4
 8008158:	3304      	addeq	r3, #4
 800815a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800815e:	bf04      	itt	eq
 8008160:	0080      	lsleq	r0, r0, #2
 8008162:	3302      	addeq	r3, #2
 8008164:	2800      	cmp	r0, #0
 8008166:	db05      	blt.n	8008174 <__hi0bits+0x38>
 8008168:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800816c:	f103 0301 	add.w	r3, r3, #1
 8008170:	bf08      	it	eq
 8008172:	2320      	moveq	r3, #32
 8008174:	4618      	mov	r0, r3
 8008176:	4770      	bx	lr
 8008178:	2300      	movs	r3, #0
 800817a:	e7e4      	b.n	8008146 <__hi0bits+0xa>

0800817c <__lo0bits>:
 800817c:	6803      	ldr	r3, [r0, #0]
 800817e:	f013 0207 	ands.w	r2, r3, #7
 8008182:	4601      	mov	r1, r0
 8008184:	d00b      	beq.n	800819e <__lo0bits+0x22>
 8008186:	07da      	lsls	r2, r3, #31
 8008188:	d424      	bmi.n	80081d4 <__lo0bits+0x58>
 800818a:	0798      	lsls	r0, r3, #30
 800818c:	bf49      	itett	mi
 800818e:	085b      	lsrmi	r3, r3, #1
 8008190:	089b      	lsrpl	r3, r3, #2
 8008192:	2001      	movmi	r0, #1
 8008194:	600b      	strmi	r3, [r1, #0]
 8008196:	bf5c      	itt	pl
 8008198:	600b      	strpl	r3, [r1, #0]
 800819a:	2002      	movpl	r0, #2
 800819c:	4770      	bx	lr
 800819e:	b298      	uxth	r0, r3
 80081a0:	b9b0      	cbnz	r0, 80081d0 <__lo0bits+0x54>
 80081a2:	0c1b      	lsrs	r3, r3, #16
 80081a4:	2010      	movs	r0, #16
 80081a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80081aa:	bf04      	itt	eq
 80081ac:	0a1b      	lsreq	r3, r3, #8
 80081ae:	3008      	addeq	r0, #8
 80081b0:	071a      	lsls	r2, r3, #28
 80081b2:	bf04      	itt	eq
 80081b4:	091b      	lsreq	r3, r3, #4
 80081b6:	3004      	addeq	r0, #4
 80081b8:	079a      	lsls	r2, r3, #30
 80081ba:	bf04      	itt	eq
 80081bc:	089b      	lsreq	r3, r3, #2
 80081be:	3002      	addeq	r0, #2
 80081c0:	07da      	lsls	r2, r3, #31
 80081c2:	d403      	bmi.n	80081cc <__lo0bits+0x50>
 80081c4:	085b      	lsrs	r3, r3, #1
 80081c6:	f100 0001 	add.w	r0, r0, #1
 80081ca:	d005      	beq.n	80081d8 <__lo0bits+0x5c>
 80081cc:	600b      	str	r3, [r1, #0]
 80081ce:	4770      	bx	lr
 80081d0:	4610      	mov	r0, r2
 80081d2:	e7e8      	b.n	80081a6 <__lo0bits+0x2a>
 80081d4:	2000      	movs	r0, #0
 80081d6:	4770      	bx	lr
 80081d8:	2020      	movs	r0, #32
 80081da:	4770      	bx	lr

080081dc <__i2b>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	460c      	mov	r4, r1
 80081e0:	2101      	movs	r1, #1
 80081e2:	f7ff feff 	bl	8007fe4 <_Balloc>
 80081e6:	4602      	mov	r2, r0
 80081e8:	b928      	cbnz	r0, 80081f6 <__i2b+0x1a>
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <__i2b+0x24>)
 80081ec:	4805      	ldr	r0, [pc, #20]	; (8008204 <__i2b+0x28>)
 80081ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80081f2:	f000 fcef 	bl	8008bd4 <__assert_func>
 80081f6:	2301      	movs	r3, #1
 80081f8:	6144      	str	r4, [r0, #20]
 80081fa:	6103      	str	r3, [r0, #16]
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	bf00      	nop
 8008200:	08008f5b 	.word	0x08008f5b
 8008204:	08008fcc 	.word	0x08008fcc

08008208 <__multiply>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	4614      	mov	r4, r2
 800820e:	690a      	ldr	r2, [r1, #16]
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	429a      	cmp	r2, r3
 8008214:	bfb8      	it	lt
 8008216:	460b      	movlt	r3, r1
 8008218:	460d      	mov	r5, r1
 800821a:	bfbc      	itt	lt
 800821c:	4625      	movlt	r5, r4
 800821e:	461c      	movlt	r4, r3
 8008220:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008224:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008228:	68ab      	ldr	r3, [r5, #8]
 800822a:	6869      	ldr	r1, [r5, #4]
 800822c:	eb0a 0709 	add.w	r7, sl, r9
 8008230:	42bb      	cmp	r3, r7
 8008232:	b085      	sub	sp, #20
 8008234:	bfb8      	it	lt
 8008236:	3101      	addlt	r1, #1
 8008238:	f7ff fed4 	bl	8007fe4 <_Balloc>
 800823c:	b930      	cbnz	r0, 800824c <__multiply+0x44>
 800823e:	4602      	mov	r2, r0
 8008240:	4b42      	ldr	r3, [pc, #264]	; (800834c <__multiply+0x144>)
 8008242:	4843      	ldr	r0, [pc, #268]	; (8008350 <__multiply+0x148>)
 8008244:	f240 115d 	movw	r1, #349	; 0x15d
 8008248:	f000 fcc4 	bl	8008bd4 <__assert_func>
 800824c:	f100 0614 	add.w	r6, r0, #20
 8008250:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008254:	4633      	mov	r3, r6
 8008256:	2200      	movs	r2, #0
 8008258:	4543      	cmp	r3, r8
 800825a:	d31e      	bcc.n	800829a <__multiply+0x92>
 800825c:	f105 0c14 	add.w	ip, r5, #20
 8008260:	f104 0314 	add.w	r3, r4, #20
 8008264:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008268:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800826c:	9202      	str	r2, [sp, #8]
 800826e:	ebac 0205 	sub.w	r2, ip, r5
 8008272:	3a15      	subs	r2, #21
 8008274:	f022 0203 	bic.w	r2, r2, #3
 8008278:	3204      	adds	r2, #4
 800827a:	f105 0115 	add.w	r1, r5, #21
 800827e:	458c      	cmp	ip, r1
 8008280:	bf38      	it	cc
 8008282:	2204      	movcc	r2, #4
 8008284:	9201      	str	r2, [sp, #4]
 8008286:	9a02      	ldr	r2, [sp, #8]
 8008288:	9303      	str	r3, [sp, #12]
 800828a:	429a      	cmp	r2, r3
 800828c:	d808      	bhi.n	80082a0 <__multiply+0x98>
 800828e:	2f00      	cmp	r7, #0
 8008290:	dc55      	bgt.n	800833e <__multiply+0x136>
 8008292:	6107      	str	r7, [r0, #16]
 8008294:	b005      	add	sp, #20
 8008296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829a:	f843 2b04 	str.w	r2, [r3], #4
 800829e:	e7db      	b.n	8008258 <__multiply+0x50>
 80082a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80082a4:	f1ba 0f00 	cmp.w	sl, #0
 80082a8:	d020      	beq.n	80082ec <__multiply+0xe4>
 80082aa:	f105 0e14 	add.w	lr, r5, #20
 80082ae:	46b1      	mov	r9, r6
 80082b0:	2200      	movs	r2, #0
 80082b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80082b6:	f8d9 b000 	ldr.w	fp, [r9]
 80082ba:	b2a1      	uxth	r1, r4
 80082bc:	fa1f fb8b 	uxth.w	fp, fp
 80082c0:	fb0a b101 	mla	r1, sl, r1, fp
 80082c4:	4411      	add	r1, r2
 80082c6:	f8d9 2000 	ldr.w	r2, [r9]
 80082ca:	0c24      	lsrs	r4, r4, #16
 80082cc:	0c12      	lsrs	r2, r2, #16
 80082ce:	fb0a 2404 	mla	r4, sl, r4, r2
 80082d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80082d6:	b289      	uxth	r1, r1
 80082d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80082dc:	45f4      	cmp	ip, lr
 80082de:	f849 1b04 	str.w	r1, [r9], #4
 80082e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80082e6:	d8e4      	bhi.n	80082b2 <__multiply+0xaa>
 80082e8:	9901      	ldr	r1, [sp, #4]
 80082ea:	5072      	str	r2, [r6, r1]
 80082ec:	9a03      	ldr	r2, [sp, #12]
 80082ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80082f2:	3304      	adds	r3, #4
 80082f4:	f1b9 0f00 	cmp.w	r9, #0
 80082f8:	d01f      	beq.n	800833a <__multiply+0x132>
 80082fa:	6834      	ldr	r4, [r6, #0]
 80082fc:	f105 0114 	add.w	r1, r5, #20
 8008300:	46b6      	mov	lr, r6
 8008302:	f04f 0a00 	mov.w	sl, #0
 8008306:	880a      	ldrh	r2, [r1, #0]
 8008308:	f8be b002 	ldrh.w	fp, [lr, #2]
 800830c:	fb09 b202 	mla	r2, r9, r2, fp
 8008310:	4492      	add	sl, r2
 8008312:	b2a4      	uxth	r4, r4
 8008314:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008318:	f84e 4b04 	str.w	r4, [lr], #4
 800831c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008320:	f8be 2000 	ldrh.w	r2, [lr]
 8008324:	0c24      	lsrs	r4, r4, #16
 8008326:	fb09 2404 	mla	r4, r9, r4, r2
 800832a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800832e:	458c      	cmp	ip, r1
 8008330:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008334:	d8e7      	bhi.n	8008306 <__multiply+0xfe>
 8008336:	9a01      	ldr	r2, [sp, #4]
 8008338:	50b4      	str	r4, [r6, r2]
 800833a:	3604      	adds	r6, #4
 800833c:	e7a3      	b.n	8008286 <__multiply+0x7e>
 800833e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1a5      	bne.n	8008292 <__multiply+0x8a>
 8008346:	3f01      	subs	r7, #1
 8008348:	e7a1      	b.n	800828e <__multiply+0x86>
 800834a:	bf00      	nop
 800834c:	08008f5b 	.word	0x08008f5b
 8008350:	08008fcc 	.word	0x08008fcc

08008354 <__pow5mult>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	4615      	mov	r5, r2
 800835a:	f012 0203 	ands.w	r2, r2, #3
 800835e:	4606      	mov	r6, r0
 8008360:	460f      	mov	r7, r1
 8008362:	d007      	beq.n	8008374 <__pow5mult+0x20>
 8008364:	4c25      	ldr	r4, [pc, #148]	; (80083fc <__pow5mult+0xa8>)
 8008366:	3a01      	subs	r2, #1
 8008368:	2300      	movs	r3, #0
 800836a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800836e:	f7ff fe9b 	bl	80080a8 <__multadd>
 8008372:	4607      	mov	r7, r0
 8008374:	10ad      	asrs	r5, r5, #2
 8008376:	d03d      	beq.n	80083f4 <__pow5mult+0xa0>
 8008378:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800837a:	b97c      	cbnz	r4, 800839c <__pow5mult+0x48>
 800837c:	2010      	movs	r0, #16
 800837e:	f7ff fe1b 	bl	8007fb8 <malloc>
 8008382:	4602      	mov	r2, r0
 8008384:	6270      	str	r0, [r6, #36]	; 0x24
 8008386:	b928      	cbnz	r0, 8008394 <__pow5mult+0x40>
 8008388:	4b1d      	ldr	r3, [pc, #116]	; (8008400 <__pow5mult+0xac>)
 800838a:	481e      	ldr	r0, [pc, #120]	; (8008404 <__pow5mult+0xb0>)
 800838c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008390:	f000 fc20 	bl	8008bd4 <__assert_func>
 8008394:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008398:	6004      	str	r4, [r0, #0]
 800839a:	60c4      	str	r4, [r0, #12]
 800839c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80083a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083a4:	b94c      	cbnz	r4, 80083ba <__pow5mult+0x66>
 80083a6:	f240 2171 	movw	r1, #625	; 0x271
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7ff ff16 	bl	80081dc <__i2b>
 80083b0:	2300      	movs	r3, #0
 80083b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80083b6:	4604      	mov	r4, r0
 80083b8:	6003      	str	r3, [r0, #0]
 80083ba:	f04f 0900 	mov.w	r9, #0
 80083be:	07eb      	lsls	r3, r5, #31
 80083c0:	d50a      	bpl.n	80083d8 <__pow5mult+0x84>
 80083c2:	4639      	mov	r1, r7
 80083c4:	4622      	mov	r2, r4
 80083c6:	4630      	mov	r0, r6
 80083c8:	f7ff ff1e 	bl	8008208 <__multiply>
 80083cc:	4639      	mov	r1, r7
 80083ce:	4680      	mov	r8, r0
 80083d0:	4630      	mov	r0, r6
 80083d2:	f7ff fe47 	bl	8008064 <_Bfree>
 80083d6:	4647      	mov	r7, r8
 80083d8:	106d      	asrs	r5, r5, #1
 80083da:	d00b      	beq.n	80083f4 <__pow5mult+0xa0>
 80083dc:	6820      	ldr	r0, [r4, #0]
 80083de:	b938      	cbnz	r0, 80083f0 <__pow5mult+0x9c>
 80083e0:	4622      	mov	r2, r4
 80083e2:	4621      	mov	r1, r4
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff ff0f 	bl	8008208 <__multiply>
 80083ea:	6020      	str	r0, [r4, #0]
 80083ec:	f8c0 9000 	str.w	r9, [r0]
 80083f0:	4604      	mov	r4, r0
 80083f2:	e7e4      	b.n	80083be <__pow5mult+0x6a>
 80083f4:	4638      	mov	r0, r7
 80083f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083fa:	bf00      	nop
 80083fc:	08009120 	.word	0x08009120
 8008400:	08008ee5 	.word	0x08008ee5
 8008404:	08008fcc 	.word	0x08008fcc

08008408 <__lshift>:
 8008408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800840c:	460c      	mov	r4, r1
 800840e:	6849      	ldr	r1, [r1, #4]
 8008410:	6923      	ldr	r3, [r4, #16]
 8008412:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008416:	68a3      	ldr	r3, [r4, #8]
 8008418:	4607      	mov	r7, r0
 800841a:	4691      	mov	r9, r2
 800841c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008420:	f108 0601 	add.w	r6, r8, #1
 8008424:	42b3      	cmp	r3, r6
 8008426:	db0b      	blt.n	8008440 <__lshift+0x38>
 8008428:	4638      	mov	r0, r7
 800842a:	f7ff fddb 	bl	8007fe4 <_Balloc>
 800842e:	4605      	mov	r5, r0
 8008430:	b948      	cbnz	r0, 8008446 <__lshift+0x3e>
 8008432:	4602      	mov	r2, r0
 8008434:	4b28      	ldr	r3, [pc, #160]	; (80084d8 <__lshift+0xd0>)
 8008436:	4829      	ldr	r0, [pc, #164]	; (80084dc <__lshift+0xd4>)
 8008438:	f240 11d9 	movw	r1, #473	; 0x1d9
 800843c:	f000 fbca 	bl	8008bd4 <__assert_func>
 8008440:	3101      	adds	r1, #1
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	e7ee      	b.n	8008424 <__lshift+0x1c>
 8008446:	2300      	movs	r3, #0
 8008448:	f100 0114 	add.w	r1, r0, #20
 800844c:	f100 0210 	add.w	r2, r0, #16
 8008450:	4618      	mov	r0, r3
 8008452:	4553      	cmp	r3, sl
 8008454:	db33      	blt.n	80084be <__lshift+0xb6>
 8008456:	6920      	ldr	r0, [r4, #16]
 8008458:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800845c:	f104 0314 	add.w	r3, r4, #20
 8008460:	f019 091f 	ands.w	r9, r9, #31
 8008464:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008468:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800846c:	d02b      	beq.n	80084c6 <__lshift+0xbe>
 800846e:	f1c9 0e20 	rsb	lr, r9, #32
 8008472:	468a      	mov	sl, r1
 8008474:	2200      	movs	r2, #0
 8008476:	6818      	ldr	r0, [r3, #0]
 8008478:	fa00 f009 	lsl.w	r0, r0, r9
 800847c:	4302      	orrs	r2, r0
 800847e:	f84a 2b04 	str.w	r2, [sl], #4
 8008482:	f853 2b04 	ldr.w	r2, [r3], #4
 8008486:	459c      	cmp	ip, r3
 8008488:	fa22 f20e 	lsr.w	r2, r2, lr
 800848c:	d8f3      	bhi.n	8008476 <__lshift+0x6e>
 800848e:	ebac 0304 	sub.w	r3, ip, r4
 8008492:	3b15      	subs	r3, #21
 8008494:	f023 0303 	bic.w	r3, r3, #3
 8008498:	3304      	adds	r3, #4
 800849a:	f104 0015 	add.w	r0, r4, #21
 800849e:	4584      	cmp	ip, r0
 80084a0:	bf38      	it	cc
 80084a2:	2304      	movcc	r3, #4
 80084a4:	50ca      	str	r2, [r1, r3]
 80084a6:	b10a      	cbz	r2, 80084ac <__lshift+0xa4>
 80084a8:	f108 0602 	add.w	r6, r8, #2
 80084ac:	3e01      	subs	r6, #1
 80084ae:	4638      	mov	r0, r7
 80084b0:	612e      	str	r6, [r5, #16]
 80084b2:	4621      	mov	r1, r4
 80084b4:	f7ff fdd6 	bl	8008064 <_Bfree>
 80084b8:	4628      	mov	r0, r5
 80084ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084be:	f842 0f04 	str.w	r0, [r2, #4]!
 80084c2:	3301      	adds	r3, #1
 80084c4:	e7c5      	b.n	8008452 <__lshift+0x4a>
 80084c6:	3904      	subs	r1, #4
 80084c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80084d0:	459c      	cmp	ip, r3
 80084d2:	d8f9      	bhi.n	80084c8 <__lshift+0xc0>
 80084d4:	e7ea      	b.n	80084ac <__lshift+0xa4>
 80084d6:	bf00      	nop
 80084d8:	08008f5b 	.word	0x08008f5b
 80084dc:	08008fcc 	.word	0x08008fcc

080084e0 <__mcmp>:
 80084e0:	b530      	push	{r4, r5, lr}
 80084e2:	6902      	ldr	r2, [r0, #16]
 80084e4:	690c      	ldr	r4, [r1, #16]
 80084e6:	1b12      	subs	r2, r2, r4
 80084e8:	d10e      	bne.n	8008508 <__mcmp+0x28>
 80084ea:	f100 0314 	add.w	r3, r0, #20
 80084ee:	3114      	adds	r1, #20
 80084f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008500:	42a5      	cmp	r5, r4
 8008502:	d003      	beq.n	800850c <__mcmp+0x2c>
 8008504:	d305      	bcc.n	8008512 <__mcmp+0x32>
 8008506:	2201      	movs	r2, #1
 8008508:	4610      	mov	r0, r2
 800850a:	bd30      	pop	{r4, r5, pc}
 800850c:	4283      	cmp	r3, r0
 800850e:	d3f3      	bcc.n	80084f8 <__mcmp+0x18>
 8008510:	e7fa      	b.n	8008508 <__mcmp+0x28>
 8008512:	f04f 32ff 	mov.w	r2, #4294967295
 8008516:	e7f7      	b.n	8008508 <__mcmp+0x28>

08008518 <__mdiff>:
 8008518:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	460c      	mov	r4, r1
 800851e:	4606      	mov	r6, r0
 8008520:	4611      	mov	r1, r2
 8008522:	4620      	mov	r0, r4
 8008524:	4617      	mov	r7, r2
 8008526:	f7ff ffdb 	bl	80084e0 <__mcmp>
 800852a:	1e05      	subs	r5, r0, #0
 800852c:	d110      	bne.n	8008550 <__mdiff+0x38>
 800852e:	4629      	mov	r1, r5
 8008530:	4630      	mov	r0, r6
 8008532:	f7ff fd57 	bl	8007fe4 <_Balloc>
 8008536:	b930      	cbnz	r0, 8008546 <__mdiff+0x2e>
 8008538:	4b39      	ldr	r3, [pc, #228]	; (8008620 <__mdiff+0x108>)
 800853a:	4602      	mov	r2, r0
 800853c:	f240 2132 	movw	r1, #562	; 0x232
 8008540:	4838      	ldr	r0, [pc, #224]	; (8008624 <__mdiff+0x10c>)
 8008542:	f000 fb47 	bl	8008bd4 <__assert_func>
 8008546:	2301      	movs	r3, #1
 8008548:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800854c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008550:	bfa4      	itt	ge
 8008552:	463b      	movge	r3, r7
 8008554:	4627      	movge	r7, r4
 8008556:	4630      	mov	r0, r6
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	bfa6      	itte	ge
 800855c:	461c      	movge	r4, r3
 800855e:	2500      	movge	r5, #0
 8008560:	2501      	movlt	r5, #1
 8008562:	f7ff fd3f 	bl	8007fe4 <_Balloc>
 8008566:	b920      	cbnz	r0, 8008572 <__mdiff+0x5a>
 8008568:	4b2d      	ldr	r3, [pc, #180]	; (8008620 <__mdiff+0x108>)
 800856a:	4602      	mov	r2, r0
 800856c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008570:	e7e6      	b.n	8008540 <__mdiff+0x28>
 8008572:	693e      	ldr	r6, [r7, #16]
 8008574:	60c5      	str	r5, [r0, #12]
 8008576:	6925      	ldr	r5, [r4, #16]
 8008578:	f107 0114 	add.w	r1, r7, #20
 800857c:	f104 0914 	add.w	r9, r4, #20
 8008580:	f100 0e14 	add.w	lr, r0, #20
 8008584:	f107 0210 	add.w	r2, r7, #16
 8008588:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800858c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008590:	46f2      	mov	sl, lr
 8008592:	2700      	movs	r7, #0
 8008594:	f859 3b04 	ldr.w	r3, [r9], #4
 8008598:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800859c:	fa1f f883 	uxth.w	r8, r3
 80085a0:	fa17 f78b 	uxtah	r7, r7, fp
 80085a4:	0c1b      	lsrs	r3, r3, #16
 80085a6:	eba7 0808 	sub.w	r8, r7, r8
 80085aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80085ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80085b2:	fa1f f888 	uxth.w	r8, r8
 80085b6:	141f      	asrs	r7, r3, #16
 80085b8:	454d      	cmp	r5, r9
 80085ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80085be:	f84a 3b04 	str.w	r3, [sl], #4
 80085c2:	d8e7      	bhi.n	8008594 <__mdiff+0x7c>
 80085c4:	1b2b      	subs	r3, r5, r4
 80085c6:	3b15      	subs	r3, #21
 80085c8:	f023 0303 	bic.w	r3, r3, #3
 80085cc:	3304      	adds	r3, #4
 80085ce:	3415      	adds	r4, #21
 80085d0:	42a5      	cmp	r5, r4
 80085d2:	bf38      	it	cc
 80085d4:	2304      	movcc	r3, #4
 80085d6:	4419      	add	r1, r3
 80085d8:	4473      	add	r3, lr
 80085da:	469e      	mov	lr, r3
 80085dc:	460d      	mov	r5, r1
 80085de:	4565      	cmp	r5, ip
 80085e0:	d30e      	bcc.n	8008600 <__mdiff+0xe8>
 80085e2:	f10c 0203 	add.w	r2, ip, #3
 80085e6:	1a52      	subs	r2, r2, r1
 80085e8:	f022 0203 	bic.w	r2, r2, #3
 80085ec:	3903      	subs	r1, #3
 80085ee:	458c      	cmp	ip, r1
 80085f0:	bf38      	it	cc
 80085f2:	2200      	movcc	r2, #0
 80085f4:	441a      	add	r2, r3
 80085f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085fa:	b17b      	cbz	r3, 800861c <__mdiff+0x104>
 80085fc:	6106      	str	r6, [r0, #16]
 80085fe:	e7a5      	b.n	800854c <__mdiff+0x34>
 8008600:	f855 8b04 	ldr.w	r8, [r5], #4
 8008604:	fa17 f488 	uxtah	r4, r7, r8
 8008608:	1422      	asrs	r2, r4, #16
 800860a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800860e:	b2a4      	uxth	r4, r4
 8008610:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008614:	f84e 4b04 	str.w	r4, [lr], #4
 8008618:	1417      	asrs	r7, r2, #16
 800861a:	e7e0      	b.n	80085de <__mdiff+0xc6>
 800861c:	3e01      	subs	r6, #1
 800861e:	e7ea      	b.n	80085f6 <__mdiff+0xde>
 8008620:	08008f5b 	.word	0x08008f5b
 8008624:	08008fcc 	.word	0x08008fcc

08008628 <__d2b>:
 8008628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800862c:	4689      	mov	r9, r1
 800862e:	2101      	movs	r1, #1
 8008630:	ec57 6b10 	vmov	r6, r7, d0
 8008634:	4690      	mov	r8, r2
 8008636:	f7ff fcd5 	bl	8007fe4 <_Balloc>
 800863a:	4604      	mov	r4, r0
 800863c:	b930      	cbnz	r0, 800864c <__d2b+0x24>
 800863e:	4602      	mov	r2, r0
 8008640:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <__d2b+0xb0>)
 8008642:	4826      	ldr	r0, [pc, #152]	; (80086dc <__d2b+0xb4>)
 8008644:	f240 310a 	movw	r1, #778	; 0x30a
 8008648:	f000 fac4 	bl	8008bd4 <__assert_func>
 800864c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008654:	bb35      	cbnz	r5, 80086a4 <__d2b+0x7c>
 8008656:	2e00      	cmp	r6, #0
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	d028      	beq.n	80086ae <__d2b+0x86>
 800865c:	4668      	mov	r0, sp
 800865e:	9600      	str	r6, [sp, #0]
 8008660:	f7ff fd8c 	bl	800817c <__lo0bits>
 8008664:	9900      	ldr	r1, [sp, #0]
 8008666:	b300      	cbz	r0, 80086aa <__d2b+0x82>
 8008668:	9a01      	ldr	r2, [sp, #4]
 800866a:	f1c0 0320 	rsb	r3, r0, #32
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	430b      	orrs	r3, r1
 8008674:	40c2      	lsrs	r2, r0
 8008676:	6163      	str	r3, [r4, #20]
 8008678:	9201      	str	r2, [sp, #4]
 800867a:	9b01      	ldr	r3, [sp, #4]
 800867c:	61a3      	str	r3, [r4, #24]
 800867e:	2b00      	cmp	r3, #0
 8008680:	bf14      	ite	ne
 8008682:	2202      	movne	r2, #2
 8008684:	2201      	moveq	r2, #1
 8008686:	6122      	str	r2, [r4, #16]
 8008688:	b1d5      	cbz	r5, 80086c0 <__d2b+0x98>
 800868a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800868e:	4405      	add	r5, r0
 8008690:	f8c9 5000 	str.w	r5, [r9]
 8008694:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008698:	f8c8 0000 	str.w	r0, [r8]
 800869c:	4620      	mov	r0, r4
 800869e:	b003      	add	sp, #12
 80086a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086a8:	e7d5      	b.n	8008656 <__d2b+0x2e>
 80086aa:	6161      	str	r1, [r4, #20]
 80086ac:	e7e5      	b.n	800867a <__d2b+0x52>
 80086ae:	a801      	add	r0, sp, #4
 80086b0:	f7ff fd64 	bl	800817c <__lo0bits>
 80086b4:	9b01      	ldr	r3, [sp, #4]
 80086b6:	6163      	str	r3, [r4, #20]
 80086b8:	2201      	movs	r2, #1
 80086ba:	6122      	str	r2, [r4, #16]
 80086bc:	3020      	adds	r0, #32
 80086be:	e7e3      	b.n	8008688 <__d2b+0x60>
 80086c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80086c8:	f8c9 0000 	str.w	r0, [r9]
 80086cc:	6918      	ldr	r0, [r3, #16]
 80086ce:	f7ff fd35 	bl	800813c <__hi0bits>
 80086d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086d6:	e7df      	b.n	8008698 <__d2b+0x70>
 80086d8:	08008f5b 	.word	0x08008f5b
 80086dc:	08008fcc 	.word	0x08008fcc

080086e0 <_calloc_r>:
 80086e0:	b513      	push	{r0, r1, r4, lr}
 80086e2:	434a      	muls	r2, r1
 80086e4:	4611      	mov	r1, r2
 80086e6:	9201      	str	r2, [sp, #4]
 80086e8:	f000 f85a 	bl	80087a0 <_malloc_r>
 80086ec:	4604      	mov	r4, r0
 80086ee:	b118      	cbz	r0, 80086f8 <_calloc_r+0x18>
 80086f0:	9a01      	ldr	r2, [sp, #4]
 80086f2:	2100      	movs	r1, #0
 80086f4:	f7fd fe04 	bl	8006300 <memset>
 80086f8:	4620      	mov	r0, r4
 80086fa:	b002      	add	sp, #8
 80086fc:	bd10      	pop	{r4, pc}
	...

08008700 <_free_r>:
 8008700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008702:	2900      	cmp	r1, #0
 8008704:	d048      	beq.n	8008798 <_free_r+0x98>
 8008706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800870a:	9001      	str	r0, [sp, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	f1a1 0404 	sub.w	r4, r1, #4
 8008712:	bfb8      	it	lt
 8008714:	18e4      	addlt	r4, r4, r3
 8008716:	f000 fae3 	bl	8008ce0 <__malloc_lock>
 800871a:	4a20      	ldr	r2, [pc, #128]	; (800879c <_free_r+0x9c>)
 800871c:	9801      	ldr	r0, [sp, #4]
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	4615      	mov	r5, r2
 8008722:	b933      	cbnz	r3, 8008732 <_free_r+0x32>
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	6014      	str	r4, [r2, #0]
 8008728:	b003      	add	sp, #12
 800872a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800872e:	f000 badd 	b.w	8008cec <__malloc_unlock>
 8008732:	42a3      	cmp	r3, r4
 8008734:	d90b      	bls.n	800874e <_free_r+0x4e>
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	1862      	adds	r2, r4, r1
 800873a:	4293      	cmp	r3, r2
 800873c:	bf04      	itt	eq
 800873e:	681a      	ldreq	r2, [r3, #0]
 8008740:	685b      	ldreq	r3, [r3, #4]
 8008742:	6063      	str	r3, [r4, #4]
 8008744:	bf04      	itt	eq
 8008746:	1852      	addeq	r2, r2, r1
 8008748:	6022      	streq	r2, [r4, #0]
 800874a:	602c      	str	r4, [r5, #0]
 800874c:	e7ec      	b.n	8008728 <_free_r+0x28>
 800874e:	461a      	mov	r2, r3
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	b10b      	cbz	r3, 8008758 <_free_r+0x58>
 8008754:	42a3      	cmp	r3, r4
 8008756:	d9fa      	bls.n	800874e <_free_r+0x4e>
 8008758:	6811      	ldr	r1, [r2, #0]
 800875a:	1855      	adds	r5, r2, r1
 800875c:	42a5      	cmp	r5, r4
 800875e:	d10b      	bne.n	8008778 <_free_r+0x78>
 8008760:	6824      	ldr	r4, [r4, #0]
 8008762:	4421      	add	r1, r4
 8008764:	1854      	adds	r4, r2, r1
 8008766:	42a3      	cmp	r3, r4
 8008768:	6011      	str	r1, [r2, #0]
 800876a:	d1dd      	bne.n	8008728 <_free_r+0x28>
 800876c:	681c      	ldr	r4, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	6053      	str	r3, [r2, #4]
 8008772:	4421      	add	r1, r4
 8008774:	6011      	str	r1, [r2, #0]
 8008776:	e7d7      	b.n	8008728 <_free_r+0x28>
 8008778:	d902      	bls.n	8008780 <_free_r+0x80>
 800877a:	230c      	movs	r3, #12
 800877c:	6003      	str	r3, [r0, #0]
 800877e:	e7d3      	b.n	8008728 <_free_r+0x28>
 8008780:	6825      	ldr	r5, [r4, #0]
 8008782:	1961      	adds	r1, r4, r5
 8008784:	428b      	cmp	r3, r1
 8008786:	bf04      	itt	eq
 8008788:	6819      	ldreq	r1, [r3, #0]
 800878a:	685b      	ldreq	r3, [r3, #4]
 800878c:	6063      	str	r3, [r4, #4]
 800878e:	bf04      	itt	eq
 8008790:	1949      	addeq	r1, r1, r5
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	6054      	str	r4, [r2, #4]
 8008796:	e7c7      	b.n	8008728 <_free_r+0x28>
 8008798:	b003      	add	sp, #12
 800879a:	bd30      	pop	{r4, r5, pc}
 800879c:	2000025c 	.word	0x2000025c

080087a0 <_malloc_r>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	1ccd      	adds	r5, r1, #3
 80087a4:	f025 0503 	bic.w	r5, r5, #3
 80087a8:	3508      	adds	r5, #8
 80087aa:	2d0c      	cmp	r5, #12
 80087ac:	bf38      	it	cc
 80087ae:	250c      	movcc	r5, #12
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	4606      	mov	r6, r0
 80087b4:	db01      	blt.n	80087ba <_malloc_r+0x1a>
 80087b6:	42a9      	cmp	r1, r5
 80087b8:	d903      	bls.n	80087c2 <_malloc_r+0x22>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	2000      	movs	r0, #0
 80087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c2:	f000 fa8d 	bl	8008ce0 <__malloc_lock>
 80087c6:	4921      	ldr	r1, [pc, #132]	; (800884c <_malloc_r+0xac>)
 80087c8:	680a      	ldr	r2, [r1, #0]
 80087ca:	4614      	mov	r4, r2
 80087cc:	b99c      	cbnz	r4, 80087f6 <_malloc_r+0x56>
 80087ce:	4f20      	ldr	r7, [pc, #128]	; (8008850 <_malloc_r+0xb0>)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	b923      	cbnz	r3, 80087de <_malloc_r+0x3e>
 80087d4:	4621      	mov	r1, r4
 80087d6:	4630      	mov	r0, r6
 80087d8:	f000 f996 	bl	8008b08 <_sbrk_r>
 80087dc:	6038      	str	r0, [r7, #0]
 80087de:	4629      	mov	r1, r5
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 f991 	bl	8008b08 <_sbrk_r>
 80087e6:	1c43      	adds	r3, r0, #1
 80087e8:	d123      	bne.n	8008832 <_malloc_r+0x92>
 80087ea:	230c      	movs	r3, #12
 80087ec:	6033      	str	r3, [r6, #0]
 80087ee:	4630      	mov	r0, r6
 80087f0:	f000 fa7c 	bl	8008cec <__malloc_unlock>
 80087f4:	e7e3      	b.n	80087be <_malloc_r+0x1e>
 80087f6:	6823      	ldr	r3, [r4, #0]
 80087f8:	1b5b      	subs	r3, r3, r5
 80087fa:	d417      	bmi.n	800882c <_malloc_r+0x8c>
 80087fc:	2b0b      	cmp	r3, #11
 80087fe:	d903      	bls.n	8008808 <_malloc_r+0x68>
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	441c      	add	r4, r3
 8008804:	6025      	str	r5, [r4, #0]
 8008806:	e004      	b.n	8008812 <_malloc_r+0x72>
 8008808:	6863      	ldr	r3, [r4, #4]
 800880a:	42a2      	cmp	r2, r4
 800880c:	bf0c      	ite	eq
 800880e:	600b      	streq	r3, [r1, #0]
 8008810:	6053      	strne	r3, [r2, #4]
 8008812:	4630      	mov	r0, r6
 8008814:	f000 fa6a 	bl	8008cec <__malloc_unlock>
 8008818:	f104 000b 	add.w	r0, r4, #11
 800881c:	1d23      	adds	r3, r4, #4
 800881e:	f020 0007 	bic.w	r0, r0, #7
 8008822:	1ac2      	subs	r2, r0, r3
 8008824:	d0cc      	beq.n	80087c0 <_malloc_r+0x20>
 8008826:	1a1b      	subs	r3, r3, r0
 8008828:	50a3      	str	r3, [r4, r2]
 800882a:	e7c9      	b.n	80087c0 <_malloc_r+0x20>
 800882c:	4622      	mov	r2, r4
 800882e:	6864      	ldr	r4, [r4, #4]
 8008830:	e7cc      	b.n	80087cc <_malloc_r+0x2c>
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d0e3      	beq.n	8008804 <_malloc_r+0x64>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f962 	bl	8008b08 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d1dd      	bne.n	8008804 <_malloc_r+0x64>
 8008848:	e7cf      	b.n	80087ea <_malloc_r+0x4a>
 800884a:	bf00      	nop
 800884c:	2000025c 	.word	0x2000025c
 8008850:	20000260 	.word	0x20000260

08008854 <__sfputc_r>:
 8008854:	6893      	ldr	r3, [r2, #8]
 8008856:	3b01      	subs	r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	b410      	push	{r4}
 800885c:	6093      	str	r3, [r2, #8]
 800885e:	da08      	bge.n	8008872 <__sfputc_r+0x1e>
 8008860:	6994      	ldr	r4, [r2, #24]
 8008862:	42a3      	cmp	r3, r4
 8008864:	db01      	blt.n	800886a <__sfputc_r+0x16>
 8008866:	290a      	cmp	r1, #10
 8008868:	d103      	bne.n	8008872 <__sfputc_r+0x1e>
 800886a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886e:	f7fe ba47 	b.w	8006d00 <__swbuf_r>
 8008872:	6813      	ldr	r3, [r2, #0]
 8008874:	1c58      	adds	r0, r3, #1
 8008876:	6010      	str	r0, [r2, #0]
 8008878:	7019      	strb	r1, [r3, #0]
 800887a:	4608      	mov	r0, r1
 800887c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008880:	4770      	bx	lr

08008882 <__sfputs_r>:
 8008882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	4614      	mov	r4, r2
 800888a:	18d5      	adds	r5, r2, r3
 800888c:	42ac      	cmp	r4, r5
 800888e:	d101      	bne.n	8008894 <__sfputs_r+0x12>
 8008890:	2000      	movs	r0, #0
 8008892:	e007      	b.n	80088a4 <__sfputs_r+0x22>
 8008894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008898:	463a      	mov	r2, r7
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ffda 	bl	8008854 <__sfputc_r>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d1f3      	bne.n	800888c <__sfputs_r+0xa>
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088a8 <_vfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460d      	mov	r5, r1
 80088ae:	b09d      	sub	sp, #116	; 0x74
 80088b0:	4614      	mov	r4, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	4606      	mov	r6, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_vfiprintf_r+0x18>
 80088b8:	6983      	ldr	r3, [r0, #24]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x18>
 80088bc:	f7ff fa72 	bl	8007da4 <__sinit>
 80088c0:	4b89      	ldr	r3, [pc, #548]	; (8008ae8 <_vfiprintf_r+0x240>)
 80088c2:	429d      	cmp	r5, r3
 80088c4:	d11b      	bne.n	80088fe <_vfiprintf_r+0x56>
 80088c6:	6875      	ldr	r5, [r6, #4]
 80088c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088ca:	07d9      	lsls	r1, r3, #31
 80088cc:	d405      	bmi.n	80088da <_vfiprintf_r+0x32>
 80088ce:	89ab      	ldrh	r3, [r5, #12]
 80088d0:	059a      	lsls	r2, r3, #22
 80088d2:	d402      	bmi.n	80088da <_vfiprintf_r+0x32>
 80088d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088d6:	f7ff fb08 	bl	8007eea <__retarget_lock_acquire_recursive>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	071b      	lsls	r3, r3, #28
 80088de:	d501      	bpl.n	80088e4 <_vfiprintf_r+0x3c>
 80088e0:	692b      	ldr	r3, [r5, #16]
 80088e2:	b9eb      	cbnz	r3, 8008920 <_vfiprintf_r+0x78>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4630      	mov	r0, r6
 80088e8:	f7fe fa5c 	bl	8006da4 <__swsetup_r>
 80088ec:	b1c0      	cbz	r0, 8008920 <_vfiprintf_r+0x78>
 80088ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088f0:	07dc      	lsls	r4, r3, #31
 80088f2:	d50e      	bpl.n	8008912 <_vfiprintf_r+0x6a>
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295
 80088f8:	b01d      	add	sp, #116	; 0x74
 80088fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fe:	4b7b      	ldr	r3, [pc, #492]	; (8008aec <_vfiprintf_r+0x244>)
 8008900:	429d      	cmp	r5, r3
 8008902:	d101      	bne.n	8008908 <_vfiprintf_r+0x60>
 8008904:	68b5      	ldr	r5, [r6, #8]
 8008906:	e7df      	b.n	80088c8 <_vfiprintf_r+0x20>
 8008908:	4b79      	ldr	r3, [pc, #484]	; (8008af0 <_vfiprintf_r+0x248>)
 800890a:	429d      	cmp	r5, r3
 800890c:	bf08      	it	eq
 800890e:	68f5      	ldreq	r5, [r6, #12]
 8008910:	e7da      	b.n	80088c8 <_vfiprintf_r+0x20>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	0598      	lsls	r0, r3, #22
 8008916:	d4ed      	bmi.n	80088f4 <_vfiprintf_r+0x4c>
 8008918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800891a:	f7ff fae7 	bl	8007eec <__retarget_lock_release_recursive>
 800891e:	e7e9      	b.n	80088f4 <_vfiprintf_r+0x4c>
 8008920:	2300      	movs	r3, #0
 8008922:	9309      	str	r3, [sp, #36]	; 0x24
 8008924:	2320      	movs	r3, #32
 8008926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800892a:	f8cd 800c 	str.w	r8, [sp, #12]
 800892e:	2330      	movs	r3, #48	; 0x30
 8008930:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008af4 <_vfiprintf_r+0x24c>
 8008934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008938:	f04f 0901 	mov.w	r9, #1
 800893c:	4623      	mov	r3, r4
 800893e:	469a      	mov	sl, r3
 8008940:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008944:	b10a      	cbz	r2, 800894a <_vfiprintf_r+0xa2>
 8008946:	2a25      	cmp	r2, #37	; 0x25
 8008948:	d1f9      	bne.n	800893e <_vfiprintf_r+0x96>
 800894a:	ebba 0b04 	subs.w	fp, sl, r4
 800894e:	d00b      	beq.n	8008968 <_vfiprintf_r+0xc0>
 8008950:	465b      	mov	r3, fp
 8008952:	4622      	mov	r2, r4
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f7ff ff93 	bl	8008882 <__sfputs_r>
 800895c:	3001      	adds	r0, #1
 800895e:	f000 80aa 	beq.w	8008ab6 <_vfiprintf_r+0x20e>
 8008962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008964:	445a      	add	r2, fp
 8008966:	9209      	str	r2, [sp, #36]	; 0x24
 8008968:	f89a 3000 	ldrb.w	r3, [sl]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80a2 	beq.w	8008ab6 <_vfiprintf_r+0x20e>
 8008972:	2300      	movs	r3, #0
 8008974:	f04f 32ff 	mov.w	r2, #4294967295
 8008978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800897c:	f10a 0a01 	add.w	sl, sl, #1
 8008980:	9304      	str	r3, [sp, #16]
 8008982:	9307      	str	r3, [sp, #28]
 8008984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008988:	931a      	str	r3, [sp, #104]	; 0x68
 800898a:	4654      	mov	r4, sl
 800898c:	2205      	movs	r2, #5
 800898e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008992:	4858      	ldr	r0, [pc, #352]	; (8008af4 <_vfiprintf_r+0x24c>)
 8008994:	f7f7 fc24 	bl	80001e0 <memchr>
 8008998:	9a04      	ldr	r2, [sp, #16]
 800899a:	b9d8      	cbnz	r0, 80089d4 <_vfiprintf_r+0x12c>
 800899c:	06d1      	lsls	r1, r2, #27
 800899e:	bf44      	itt	mi
 80089a0:	2320      	movmi	r3, #32
 80089a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089a6:	0713      	lsls	r3, r2, #28
 80089a8:	bf44      	itt	mi
 80089aa:	232b      	movmi	r3, #43	; 0x2b
 80089ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089b0:	f89a 3000 	ldrb.w	r3, [sl]
 80089b4:	2b2a      	cmp	r3, #42	; 0x2a
 80089b6:	d015      	beq.n	80089e4 <_vfiprintf_r+0x13c>
 80089b8:	9a07      	ldr	r2, [sp, #28]
 80089ba:	4654      	mov	r4, sl
 80089bc:	2000      	movs	r0, #0
 80089be:	f04f 0c0a 	mov.w	ip, #10
 80089c2:	4621      	mov	r1, r4
 80089c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089c8:	3b30      	subs	r3, #48	; 0x30
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d94e      	bls.n	8008a6c <_vfiprintf_r+0x1c4>
 80089ce:	b1b0      	cbz	r0, 80089fe <_vfiprintf_r+0x156>
 80089d0:	9207      	str	r2, [sp, #28]
 80089d2:	e014      	b.n	80089fe <_vfiprintf_r+0x156>
 80089d4:	eba0 0308 	sub.w	r3, r0, r8
 80089d8:	fa09 f303 	lsl.w	r3, r9, r3
 80089dc:	4313      	orrs	r3, r2
 80089de:	9304      	str	r3, [sp, #16]
 80089e0:	46a2      	mov	sl, r4
 80089e2:	e7d2      	b.n	800898a <_vfiprintf_r+0xe2>
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	1d19      	adds	r1, r3, #4
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	9103      	str	r1, [sp, #12]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bfbb      	ittet	lt
 80089f0:	425b      	neglt	r3, r3
 80089f2:	f042 0202 	orrlt.w	r2, r2, #2
 80089f6:	9307      	strge	r3, [sp, #28]
 80089f8:	9307      	strlt	r3, [sp, #28]
 80089fa:	bfb8      	it	lt
 80089fc:	9204      	strlt	r2, [sp, #16]
 80089fe:	7823      	ldrb	r3, [r4, #0]
 8008a00:	2b2e      	cmp	r3, #46	; 0x2e
 8008a02:	d10c      	bne.n	8008a1e <_vfiprintf_r+0x176>
 8008a04:	7863      	ldrb	r3, [r4, #1]
 8008a06:	2b2a      	cmp	r3, #42	; 0x2a
 8008a08:	d135      	bne.n	8008a76 <_vfiprintf_r+0x1ce>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	1d1a      	adds	r2, r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9203      	str	r2, [sp, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bfb8      	it	lt
 8008a16:	f04f 33ff 	movlt.w	r3, #4294967295
 8008a1a:	3402      	adds	r4, #2
 8008a1c:	9305      	str	r3, [sp, #20]
 8008a1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b04 <_vfiprintf_r+0x25c>
 8008a22:	7821      	ldrb	r1, [r4, #0]
 8008a24:	2203      	movs	r2, #3
 8008a26:	4650      	mov	r0, sl
 8008a28:	f7f7 fbda 	bl	80001e0 <memchr>
 8008a2c:	b140      	cbz	r0, 8008a40 <_vfiprintf_r+0x198>
 8008a2e:	2340      	movs	r3, #64	; 0x40
 8008a30:	eba0 000a 	sub.w	r0, r0, sl
 8008a34:	fa03 f000 	lsl.w	r0, r3, r0
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	4303      	orrs	r3, r0
 8008a3c:	3401      	adds	r4, #1
 8008a3e:	9304      	str	r3, [sp, #16]
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	482c      	ldr	r0, [pc, #176]	; (8008af8 <_vfiprintf_r+0x250>)
 8008a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a4a:	2206      	movs	r2, #6
 8008a4c:	f7f7 fbc8 	bl	80001e0 <memchr>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d03f      	beq.n	8008ad4 <_vfiprintf_r+0x22c>
 8008a54:	4b29      	ldr	r3, [pc, #164]	; (8008afc <_vfiprintf_r+0x254>)
 8008a56:	bb1b      	cbnz	r3, 8008aa0 <_vfiprintf_r+0x1f8>
 8008a58:	9b03      	ldr	r3, [sp, #12]
 8008a5a:	3307      	adds	r3, #7
 8008a5c:	f023 0307 	bic.w	r3, r3, #7
 8008a60:	3308      	adds	r3, #8
 8008a62:	9303      	str	r3, [sp, #12]
 8008a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a66:	443b      	add	r3, r7
 8008a68:	9309      	str	r3, [sp, #36]	; 0x24
 8008a6a:	e767      	b.n	800893c <_vfiprintf_r+0x94>
 8008a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a70:	460c      	mov	r4, r1
 8008a72:	2001      	movs	r0, #1
 8008a74:	e7a5      	b.n	80089c2 <_vfiprintf_r+0x11a>
 8008a76:	2300      	movs	r3, #0
 8008a78:	3401      	adds	r4, #1
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	f04f 0c0a 	mov.w	ip, #10
 8008a82:	4620      	mov	r0, r4
 8008a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a88:	3a30      	subs	r2, #48	; 0x30
 8008a8a:	2a09      	cmp	r2, #9
 8008a8c:	d903      	bls.n	8008a96 <_vfiprintf_r+0x1ee>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d0c5      	beq.n	8008a1e <_vfiprintf_r+0x176>
 8008a92:	9105      	str	r1, [sp, #20]
 8008a94:	e7c3      	b.n	8008a1e <_vfiprintf_r+0x176>
 8008a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e7f0      	b.n	8008a82 <_vfiprintf_r+0x1da>
 8008aa0:	ab03      	add	r3, sp, #12
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4b16      	ldr	r3, [pc, #88]	; (8008b00 <_vfiprintf_r+0x258>)
 8008aa8:	a904      	add	r1, sp, #16
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f7fd fcd0 	bl	8006450 <_printf_float>
 8008ab0:	4607      	mov	r7, r0
 8008ab2:	1c78      	adds	r0, r7, #1
 8008ab4:	d1d6      	bne.n	8008a64 <_vfiprintf_r+0x1bc>
 8008ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ab8:	07d9      	lsls	r1, r3, #31
 8008aba:	d405      	bmi.n	8008ac8 <_vfiprintf_r+0x220>
 8008abc:	89ab      	ldrh	r3, [r5, #12]
 8008abe:	059a      	lsls	r2, r3, #22
 8008ac0:	d402      	bmi.n	8008ac8 <_vfiprintf_r+0x220>
 8008ac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac4:	f7ff fa12 	bl	8007eec <__retarget_lock_release_recursive>
 8008ac8:	89ab      	ldrh	r3, [r5, #12]
 8008aca:	065b      	lsls	r3, r3, #25
 8008acc:	f53f af12 	bmi.w	80088f4 <_vfiprintf_r+0x4c>
 8008ad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ad2:	e711      	b.n	80088f8 <_vfiprintf_r+0x50>
 8008ad4:	ab03      	add	r3, sp, #12
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <_vfiprintf_r+0x258>)
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7fd ff5a 	bl	8006998 <_printf_i>
 8008ae4:	e7e4      	b.n	8008ab0 <_vfiprintf_r+0x208>
 8008ae6:	bf00      	nop
 8008ae8:	08008f8c 	.word	0x08008f8c
 8008aec:	08008fac 	.word	0x08008fac
 8008af0:	08008f6c 	.word	0x08008f6c
 8008af4:	0800912c 	.word	0x0800912c
 8008af8:	08009136 	.word	0x08009136
 8008afc:	08006451 	.word	0x08006451
 8008b00:	08008883 	.word	0x08008883
 8008b04:	08009132 	.word	0x08009132

08008b08 <_sbrk_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4d06      	ldr	r5, [pc, #24]	; (8008b24 <_sbrk_r+0x1c>)
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	f7f9 ff48 	bl	80029a8 <_sbrk>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_sbrk_r+0x1a>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_sbrk_r+0x1a>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	20000398 	.word	0x20000398

08008b28 <__sread>:
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b30:	f000 f8e2 	bl	8008cf8 <_read_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	bfab      	itete	ge
 8008b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b3c:	181b      	addge	r3, r3, r0
 8008b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b42:	bfac      	ite	ge
 8008b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b46:	81a3      	strhlt	r3, [r4, #12]
 8008b48:	bd10      	pop	{r4, pc}

08008b4a <__swrite>:
 8008b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	461f      	mov	r7, r3
 8008b50:	898b      	ldrh	r3, [r1, #12]
 8008b52:	05db      	lsls	r3, r3, #23
 8008b54:	4605      	mov	r5, r0
 8008b56:	460c      	mov	r4, r1
 8008b58:	4616      	mov	r6, r2
 8008b5a:	d505      	bpl.n	8008b68 <__swrite+0x1e>
 8008b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b60:	2302      	movs	r3, #2
 8008b62:	2200      	movs	r2, #0
 8008b64:	f000 f898 	bl	8008c98 <_lseek_r>
 8008b68:	89a3      	ldrh	r3, [r4, #12]
 8008b6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b72:	81a3      	strh	r3, [r4, #12]
 8008b74:	4632      	mov	r2, r6
 8008b76:	463b      	mov	r3, r7
 8008b78:	4628      	mov	r0, r5
 8008b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b7e:	f000 b817 	b.w	8008bb0 <_write_r>

08008b82 <__sseek>:
 8008b82:	b510      	push	{r4, lr}
 8008b84:	460c      	mov	r4, r1
 8008b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b8a:	f000 f885 	bl	8008c98 <_lseek_r>
 8008b8e:	1c43      	adds	r3, r0, #1
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	bf15      	itete	ne
 8008b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b9e:	81a3      	strheq	r3, [r4, #12]
 8008ba0:	bf18      	it	ne
 8008ba2:	81a3      	strhne	r3, [r4, #12]
 8008ba4:	bd10      	pop	{r4, pc}

08008ba6 <__sclose>:
 8008ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008baa:	f000 b831 	b.w	8008c10 <_close_r>
	...

08008bb0 <_write_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_write_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f9 fea1 	bl	8002906 <_write>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_write_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_write_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000398 	.word	0x20000398

08008bd4 <__assert_func>:
 8008bd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bd6:	4614      	mov	r4, r2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <__assert_func+0x2c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4605      	mov	r5, r0
 8008be0:	68d8      	ldr	r0, [r3, #12]
 8008be2:	b14c      	cbz	r4, 8008bf8 <__assert_func+0x24>
 8008be4:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <__assert_func+0x30>)
 8008be6:	9100      	str	r1, [sp, #0]
 8008be8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bec:	4906      	ldr	r1, [pc, #24]	; (8008c08 <__assert_func+0x34>)
 8008bee:	462b      	mov	r3, r5
 8008bf0:	f000 f81e 	bl	8008c30 <fiprintf>
 8008bf4:	f000 f89f 	bl	8008d36 <abort>
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__assert_func+0x38>)
 8008bfa:	461c      	mov	r4, r3
 8008bfc:	e7f3      	b.n	8008be6 <__assert_func+0x12>
 8008bfe:	bf00      	nop
 8008c00:	2000000c 	.word	0x2000000c
 8008c04:	0800913d 	.word	0x0800913d
 8008c08:	0800914a 	.word	0x0800914a
 8008c0c:	08009178 	.word	0x08009178

08008c10 <_close_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d06      	ldr	r5, [pc, #24]	; (8008c2c <_close_r+0x1c>)
 8008c14:	2300      	movs	r3, #0
 8008c16:	4604      	mov	r4, r0
 8008c18:	4608      	mov	r0, r1
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	f7f9 fe8f 	bl	800293e <_close>
 8008c20:	1c43      	adds	r3, r0, #1
 8008c22:	d102      	bne.n	8008c2a <_close_r+0x1a>
 8008c24:	682b      	ldr	r3, [r5, #0]
 8008c26:	b103      	cbz	r3, 8008c2a <_close_r+0x1a>
 8008c28:	6023      	str	r3, [r4, #0]
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	20000398 	.word	0x20000398

08008c30 <fiprintf>:
 8008c30:	b40e      	push	{r1, r2, r3}
 8008c32:	b503      	push	{r0, r1, lr}
 8008c34:	4601      	mov	r1, r0
 8008c36:	ab03      	add	r3, sp, #12
 8008c38:	4805      	ldr	r0, [pc, #20]	; (8008c50 <fiprintf+0x20>)
 8008c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	f7ff fe31 	bl	80088a8 <_vfiprintf_r>
 8008c46:	b002      	add	sp, #8
 8008c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c4c:	b003      	add	sp, #12
 8008c4e:	4770      	bx	lr
 8008c50:	2000000c 	.word	0x2000000c

08008c54 <_fstat_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d07      	ldr	r5, [pc, #28]	; (8008c74 <_fstat_r+0x20>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	4611      	mov	r1, r2
 8008c60:	602b      	str	r3, [r5, #0]
 8008c62:	f7f9 fe78 	bl	8002956 <_fstat>
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d102      	bne.n	8008c70 <_fstat_r+0x1c>
 8008c6a:	682b      	ldr	r3, [r5, #0]
 8008c6c:	b103      	cbz	r3, 8008c70 <_fstat_r+0x1c>
 8008c6e:	6023      	str	r3, [r4, #0]
 8008c70:	bd38      	pop	{r3, r4, r5, pc}
 8008c72:	bf00      	nop
 8008c74:	20000398 	.word	0x20000398

08008c78 <_isatty_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4d06      	ldr	r5, [pc, #24]	; (8008c94 <_isatty_r+0x1c>)
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	4608      	mov	r0, r1
 8008c82:	602b      	str	r3, [r5, #0]
 8008c84:	f7f9 fe77 	bl	8002976 <_isatty>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_isatty_r+0x1a>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_isatty_r+0x1a>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	20000398 	.word	0x20000398

08008c98 <_lseek_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	; (8008cb8 <_lseek_r+0x20>)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f9 fe70 	bl	800298c <_lseek>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_lseek_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_lseek_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	20000398 	.word	0x20000398

08008cbc <__ascii_mbtowc>:
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	b901      	cbnz	r1, 8008cc2 <__ascii_mbtowc+0x6>
 8008cc0:	a901      	add	r1, sp, #4
 8008cc2:	b142      	cbz	r2, 8008cd6 <__ascii_mbtowc+0x1a>
 8008cc4:	b14b      	cbz	r3, 8008cda <__ascii_mbtowc+0x1e>
 8008cc6:	7813      	ldrb	r3, [r2, #0]
 8008cc8:	600b      	str	r3, [r1, #0]
 8008cca:	7812      	ldrb	r2, [r2, #0]
 8008ccc:	1e10      	subs	r0, r2, #0
 8008cce:	bf18      	it	ne
 8008cd0:	2001      	movne	r0, #1
 8008cd2:	b002      	add	sp, #8
 8008cd4:	4770      	bx	lr
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	e7fb      	b.n	8008cd2 <__ascii_mbtowc+0x16>
 8008cda:	f06f 0001 	mvn.w	r0, #1
 8008cde:	e7f8      	b.n	8008cd2 <__ascii_mbtowc+0x16>

08008ce0 <__malloc_lock>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__malloc_lock+0x8>)
 8008ce2:	f7ff b902 	b.w	8007eea <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	20000390 	.word	0x20000390

08008cec <__malloc_unlock>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__malloc_unlock+0x8>)
 8008cee:	f7ff b8fd 	b.w	8007eec <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	20000390 	.word	0x20000390

08008cf8 <_read_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d07      	ldr	r5, [pc, #28]	; (8008d18 <_read_r+0x20>)
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	4608      	mov	r0, r1
 8008d00:	4611      	mov	r1, r2
 8008d02:	2200      	movs	r2, #0
 8008d04:	602a      	str	r2, [r5, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	f7f9 fde0 	bl	80028cc <_read>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_read_r+0x1e>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_read_r+0x1e>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20000398 	.word	0x20000398

08008d1c <__ascii_wctomb>:
 8008d1c:	b149      	cbz	r1, 8008d32 <__ascii_wctomb+0x16>
 8008d1e:	2aff      	cmp	r2, #255	; 0xff
 8008d20:	bf85      	ittet	hi
 8008d22:	238a      	movhi	r3, #138	; 0x8a
 8008d24:	6003      	strhi	r3, [r0, #0]
 8008d26:	700a      	strbls	r2, [r1, #0]
 8008d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d2c:	bf98      	it	ls
 8008d2e:	2001      	movls	r0, #1
 8008d30:	4770      	bx	lr
 8008d32:	4608      	mov	r0, r1
 8008d34:	4770      	bx	lr

08008d36 <abort>:
 8008d36:	b508      	push	{r3, lr}
 8008d38:	2006      	movs	r0, #6
 8008d3a:	f000 f82b 	bl	8008d94 <raise>
 8008d3e:	2001      	movs	r0, #1
 8008d40:	f7f9 fdba 	bl	80028b8 <_exit>

08008d44 <_raise_r>:
 8008d44:	291f      	cmp	r1, #31
 8008d46:	b538      	push	{r3, r4, r5, lr}
 8008d48:	4604      	mov	r4, r0
 8008d4a:	460d      	mov	r5, r1
 8008d4c:	d904      	bls.n	8008d58 <_raise_r+0x14>
 8008d4e:	2316      	movs	r3, #22
 8008d50:	6003      	str	r3, [r0, #0]
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d5a:	b112      	cbz	r2, 8008d62 <_raise_r+0x1e>
 8008d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d60:	b94b      	cbnz	r3, 8008d76 <_raise_r+0x32>
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 f830 	bl	8008dc8 <_getpid_r>
 8008d68:	462a      	mov	r2, r5
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d72:	f000 b817 	b.w	8008da4 <_kill_r>
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d00a      	beq.n	8008d90 <_raise_r+0x4c>
 8008d7a:	1c59      	adds	r1, r3, #1
 8008d7c:	d103      	bne.n	8008d86 <_raise_r+0x42>
 8008d7e:	2316      	movs	r3, #22
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7e7      	b.n	8008d56 <_raise_r+0x12>
 8008d86:	2400      	movs	r4, #0
 8008d88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	4798      	blx	r3
 8008d90:	2000      	movs	r0, #0
 8008d92:	e7e0      	b.n	8008d56 <_raise_r+0x12>

08008d94 <raise>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	; (8008da0 <raise+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f7ff bfd3 	b.w	8008d44 <_raise_r>
 8008d9e:	bf00      	nop
 8008da0:	2000000c 	.word	0x2000000c

08008da4 <_kill_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d07      	ldr	r5, [pc, #28]	; (8008dc4 <_kill_r+0x20>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	f7f9 fd71 	bl	8002898 <_kill>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d102      	bne.n	8008dc0 <_kill_r+0x1c>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	b103      	cbz	r3, 8008dc0 <_kill_r+0x1c>
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000398 	.word	0x20000398

08008dc8 <_getpid_r>:
 8008dc8:	f7f9 bd5e 	b.w	8002888 <_getpid>

08008dcc <_init>:
 8008dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dce:	bf00      	nop
 8008dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dd2:	bc08      	pop	{r3}
 8008dd4:	469e      	mov	lr, r3
 8008dd6:	4770      	bx	lr

08008dd8 <_fini>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr
