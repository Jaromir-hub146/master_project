
health_monitoring_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a810  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012d4  0800a9a0  0800a9a0  0001a9a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc74  0800bc74  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc74  0800bc74  0001bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc7c  0800bc7c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc80  0800bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800bc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001e8  0800be6c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000938  0800be6c  00020938  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002127e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d9  00000000  00000000  00041496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00045570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  00046b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd61  00000000  00000000  00047fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8c7  00000000  00000000  00074d29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf1c  00000000  00000000  000915f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018c50c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e0c  00000000  00000000  0018c560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a988 	.word	0x0800a988

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a988 	.word	0x0800a988

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN21DFRobot_BloodOxygen_SC1Ev>:
    //   BAUT_RATE_38400 = 6,
    //   BAUT_RATE_57600 = 7,
    //   BAUT_RATE_115200 = 8
    // } ebautrate;

    DFRobot_BloodOxygen_S(void){};
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <_ZN21DFRobot_BloodOxygen_SC1Ev+0x1c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	0800aae4 	.word	0x0800aae4

08000f60 <_ZN21DFRobot_BloodOxygen_S16getHeartbeatSPO2Ev>:
  crc = ((crc & 0x00FF) << 8) | ((crc & 0xFF00) >> 8);
  return crc;
}

void DFRobot_BloodOxygen_S::getHeartbeatSPO2(void)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b087      	sub	sp, #28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint8_t SPO2Valid;
  int8_t HeartbeatValid;
  uint8_t rbuf[8];
  readReg(0x0C ,rbuf, 8);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	681c      	ldr	r4, [r3, #0]
 8000f70:	f107 0208 	add.w	r2, r7, #8
 8000f74:	2308      	movs	r3, #8
 8000f76:	210c      	movs	r1, #12
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	47a0      	blx	r4
  static uint8_t heartbeat_count;
  uint32_t SPO2_all_val=0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
  uint32_t heartbeat_all_val=0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
  _sHeartbeatSPO2.SPO2 = rbuf[0];
 8000f84:	7a3b      	ldrb	r3, [r7, #8]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	605a      	str	r2, [r3, #4]
  if(_sHeartbeatSPO2.SPO2 == 0)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d103      	bne.n	8000f9c <_ZN21DFRobot_BloodOxygen_S16getHeartbeatSPO2Ev+0x3c>
  {
    _sHeartbeatSPO2.SPO2 = -1;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9a:	605a      	str	r2, [r3, #4]
  }
  _sHeartbeatSPO2.Heartbeat = ((uint32_t)rbuf[2] << 24) | ((uint32_t)rbuf[3] << 16) | ((uint32_t)rbuf[4] << 8) | ((uint32_t)rbuf[5]);
 8000f9c:	7abb      	ldrb	r3, [r7, #10]
 8000f9e:	061a      	lsls	r2, r3, #24
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	7b3b      	ldrb	r3, [r7, #12]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	4313      	orrs	r3, r2
 8000fac:	7b7a      	ldrb	r2, [r7, #13]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  if (_sHeartbeatSPO2.Heartbeat == 0)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d103      	bne.n	8000fc6 <_ZN21DFRobot_BloodOxygen_S16getHeartbeatSPO2Ev+0x66>
  {
    _sHeartbeatSPO2.Heartbeat = -1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	609a      	str	r2, [r3, #8]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	371c      	adds	r7, #28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd90      	pop	{r4, r7, pc}
	...

08000fd0 <_ZN21DFRobot_BloodOxygen_S16getTemperature_CEv>:

float DFRobot_BloodOxygen_S::getTemperature_C(void)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint8_t temp_buf[2];
  readReg(0x14, temp_buf, 2);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	681c      	ldr	r4, [r3, #0]
 8000fe0:	f107 0208 	add.w	r2, r7, #8
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	2114      	movs	r1, #20
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	47a0      	blx	r4
  float Temperature = temp_buf[0] * 1.0 + temp_buf[1] / 100.0;
 8000fec:	7a3b      	ldrb	r3, [r7, #8]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa98 	bl	8000524 <__aeabi_i2d>
 8000ff4:	4604      	mov	r4, r0
 8000ff6:	460d      	mov	r5, r1
 8000ff8:	7a7b      	ldrb	r3, [r7, #9]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa92 	bl	8000524 <__aeabi_i2d>
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <_ZN21DFRobot_BloodOxygen_S16getTemperature_CEv+0x68>)
 8001006:	f7ff fc21 	bl	800084c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff f93b 	bl	800028c <__adddf3>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f7ff fdc3 	bl	8000ba8 <__aeabi_d2f>
 8001022:	4603      	mov	r3, r0
 8001024:	60fb      	str	r3, [r7, #12]
  return Temperature;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	ee07 3a90 	vmov	s15, r3
}
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bdb0      	pop	{r4, r5, r7, pc}
 8001036:	bf00      	nop
 8001038:	40590000 	.word	0x40590000

0800103c <_ZN21DFRobot_BloodOxygen_S18sensorStartCollectEv>:
//       break;
//   }
// }

void DFRobot_BloodOxygen_S::sensorStartCollect(void)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  // uint8_t wbuf[3] = {0x20, 0x00, 0x01};
  uint8_t wbuf[2] = {0x00, 0x01};
 8001044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001048:	81bb      	strh	r3, [r7, #12]
  writeReg(0x20, wbuf, 2);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681c      	ldr	r4, [r3, #0]
 8001050:	f107 020c 	add.w	r2, r7, #12
 8001054:	2302      	movs	r3, #2
 8001056:	2120      	movs	r1, #32
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	47a0      	blx	r4
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bd90      	pop	{r4, r7, pc}

08001064 <_ZN25DFRobot_BloodOxygen_S_I2CC1Eh>:
  uint8_t wbuf[2] = {0x00, 0x02};
  writeReg(0x20, wbuf, 2);
}

//I2C underlying communication
DFRobot_BloodOxygen_S_I2C::DFRobot_BloodOxygen_S_I2C(uint8_t addr) //(TwoWire *pWire, uint8_t addr)
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff64 	bl	8000f40 <_ZN21DFRobot_BloodOxygen_SC1Ev>
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_ZN25DFRobot_BloodOxygen_S_I2CC1Eh+0x2c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
{
  // _pWire = pWire;
  this->_I2C_addr = addr;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	731a      	strb	r2, [r3, #12]
}
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	0800aad4 	.word	0x0800aad4

08001094 <_ZN25DFRobot_BloodOxygen_S_I2C8writeRegEtPhh>:
//     return false;
//   }
// }

void DFRobot_BloodOxygen_S_I2C::writeReg(uint16_t reg_addr, uint8_t *data_buf, uint8_t len) // (uint16_t reg_addr, uint8_t *data_buf, uint8_t len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	817b      	strh	r3, [r7, #10]
 80010a4:	4613      	mov	r3, r2
 80010a6:	727b      	strb	r3, [r7, #9]
  // {
  //   _pWire->write(data_buf[i]);
  // }
  // _pWire->endTransmission();
  // HAL_I2C_Master_Transmit(&hi2c1, this->_I2C_addr << 1, data_buf, len, HAL_MAX_DELAY);
  HAL_I2C_Mem_Write(&hi2c1, this->_I2C_addr << 1, reg_addr, 1, data_buf, len, HAL_MAX_DELAY);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	7b1b      	ldrb	r3, [r3, #12]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	b299      	uxth	r1, r3
 80010b2:	7a7b      	ldrb	r3, [r7, #9]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	897a      	ldrh	r2, [r7, #10]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	9002      	str	r0, [sp, #8]
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <_ZN25DFRobot_BloodOxygen_S_I2C8writeRegEtPhh+0x40>)
 80010c8:	f003 fb3c 	bl	8004744 <HAL_I2C_Mem_Write>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000674 	.word	0x20000674

080010d8 <_ZN25DFRobot_BloodOxygen_S_I2C7readRegEtPhh>:

int16_t DFRobot_BloodOxygen_S_I2C::readReg(uint16_t reg_addr, uint8_t *data_buf, uint8_t len) // (uint16_t reg_addr, uint8_t *data_buf, uint8_t len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	817b      	strh	r3, [r7, #10]
 80010e8:	4613      	mov	r3, r2
 80010ea:	727b      	strb	r3, [r7, #9]
  // {
  //   data_buf[i++] = _pWire->read();
  // }
  // return len;
  // HAL_I2C_Master_Receive(&hi2c1, (uint16_t)((this->_I2C_addr) << 1), data_buf, len, HAL_MAX_DELAY);
  HAL_I2C_Mem_Read(&hi2c1, this->_I2C_addr << 1, reg_addr, 1, data_buf, len, HAL_MAX_DELAY);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b299      	uxth	r1, r3
 80010f6:	7a7b      	ldrb	r3, [r7, #9]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	897a      	ldrh	r2, [r7, #10]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	9002      	str	r0, [sp, #8]
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	4804      	ldr	r0, [pc, #16]	; (800111c <_ZN25DFRobot_BloodOxygen_S_I2C7readRegEtPhh+0x44>)
 800110c:	f003 fc2e 	bl	800496c <HAL_I2C_Mem_Read>
}
 8001110:	bf00      	nop
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000674 	.word	0x20000674

08001120 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8001128:	2305      	movs	r3, #5
 800112a:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f001 fa17 	bl	8002564 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d133      	bne.n	80011aa <bme280_init+0x8a>
    {
        while (try_count)
 8001142:	e028      	b.n	8001196 <bme280_init+0x76>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8001144:	f107 010d 	add.w	r1, r7, #13
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	20d0      	movs	r0, #208	; 0xd0
 800114e:	f000 f832 	bl	80011b6 <bme280_get_regs>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d114      	bne.n	8001188 <bme280_init+0x68>
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	2b60      	cmp	r3, #96	; 0x60
 8001162:	d111      	bne.n	8001188 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8001164:	7b7a      	ldrb	r2, [r7, #13]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f978 	bl	8001460 <bme280_soft_reset>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d110      	bne.n	800119e <bme280_init+0x7e>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f001 f867 	bl	8002250 <get_calib_data>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8001186:	e00a      	b.n	800119e <bme280_init+0x7e>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	2001      	movs	r0, #1
 800118e:	4798      	blx	r3
            --try_count;
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	3b01      	subs	r3, #1
 8001194:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8001196:	7bbb      	ldrb	r3, [r7, #14]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1d3      	bne.n	8001144 <bme280_init+0x24>
 800119c:	e000      	b.n	80011a0 <bme280_init+0x80>
                break;
 800119e:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <bme280_init+0x8a>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 80011a6:	23fe      	movs	r3, #254	; 0xfe
 80011a8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80011b6:	b590      	push	{r4, r7, lr}
 80011b8:	b087      	sub	sp, #28
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
 80011c4:	4613      	mov	r3, r2
 80011c6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f001 f9cb 	bl	8002564 <null_ptr_check>
 80011ce:	4603      	mov	r3, r0
 80011d0:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80011d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d117      	bne.n	800120a <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d003      	beq.n	80011ea <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011e8:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685c      	ldr	r4, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7858      	ldrb	r0, [r3, #1]
 80011f2:	89bb      	ldrh	r3, [r7, #12]
 80011f4:	7bf9      	ldrb	r1, [r7, #15]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	47a0      	blx	r4
 80011fa:	4603      	mov	r3, r0
 80011fc:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 80011fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8001206:	23fc      	movs	r3, #252	; 0xfc
 8001208:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800120a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800120e:	4618      	mov	r0, r3
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}

08001216 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001216:	b590      	push	{r4, r7, lr}
 8001218:	b08d      	sub	sp, #52	; 0x34
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4613      	mov	r3, r2
 8001224:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b0a      	cmp	r3, #10
 800122a:	d901      	bls.n	8001230 <bme280_set_regs+0x1a>
    {
        len = 10;
 800122c:	230a      	movs	r3, #10
 800122e:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f001 f997 	bl	8002564 <null_ptr_check>
 8001236:	4603      	mov	r3, r0
 8001238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800123c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001240:	2b00      	cmp	r3, #0
 8001242:	d156      	bne.n	80012f2 <bme280_set_regs+0xdc>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d053      	beq.n	80012f2 <bme280_set_regs+0xdc>
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d050      	beq.n	80012f2 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d049      	beq.n	80012ea <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d01a      	beq.n	800129a <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001264:	2300      	movs	r3, #0
 8001266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800126a:	e011      	b.n	8001290 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800126c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	781a      	ldrb	r2, [r3, #0]
 8001276:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800127a:	68f9      	ldr	r1, [r7, #12]
 800127c:	440b      	add	r3, r1
 800127e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800128a:	3301      	adds	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001290:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	429a      	cmp	r2, r3
 8001298:	d3e8      	bcc.n	800126c <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d90d      	bls.n	80012bc <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	f107 0114 	add.w	r1, r7, #20
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	68f8      	ldr	r0, [r7, #12]
 80012aa:	f001 f816 	bl	80022da <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80012ba:	e001      	b.n	80012c0 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689c      	ldr	r4, [r3, #8]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	7858      	ldrb	r0, [r3, #1]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	7819      	ldrb	r1, [r3, #0]
 80012cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80012ce:	f107 0214 	add.w	r2, r7, #20
 80012d2:	47a0      	blx	r4
 80012d4:	4603      	mov	r3, r0
 80012d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 80012da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 80012e2:	23fc      	movs	r3, #252	; 0xfc
 80012e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80012e8:	e007      	b.n	80012fa <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 80012ea:	23fd      	movs	r3, #253	; 0xfd
 80012ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 80012f0:	e003      	b.n	80012fa <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80012f2:	23ff      	movs	r3, #255	; 0xff
 80012f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80012f8:	e000      	b.n	80012fc <bme280_set_regs+0xe6>
        if (len != 0)
 80012fa:	bf00      	nop
    }

    return rslt;
 80012fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001300:	4618      	mov	r0, r3
 8001302:	3734      	adds	r7, #52	; 0x34
 8001304:	46bd      	mov	sp, r7
 8001306:	bd90      	pop	{r4, r7, pc}

08001308 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001314:	6838      	ldr	r0, [r7, #0]
 8001316:	f001 f925 	bl	8002564 <null_ptr_check>
 800131a:	4603      	mov	r3, r0
 800131c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d13f      	bne.n	80013a6 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001326:	f107 030e 	add.w	r3, r7, #14
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f874 	bl	800141a <bme280_get_sensor_mode>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d107      	bne.n	800134e <bme280_set_sensor_settings+0x46>
 800133e:	7bbb      	ldrb	r3, [r7, #14]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d004      	beq.n	800134e <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001344:	6838      	ldr	r0, [r7, #0]
 8001346:	f000 fb74 	bl	8001a32 <put_device_to_sleep>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d127      	bne.n	80013a6 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4619      	mov	r1, r3
 800135a:	2007      	movs	r0, #7
 800135c:	f001 f8e6 	bl	800252c <are_settings_changed>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f9b0 	bl	80016d6 <set_osr_settings>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d111      	bne.n	80013a6 <bme280_set_sensor_settings+0x9e>
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4619      	mov	r1, r3
 8001386:	2018      	movs	r0, #24
 8001388:	f001 f8d0 	bl	800252c <are_settings_changed>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fa37 	bl	8001810 <set_filter_standby_settings>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	4603      	mov	r3, r0
 80013ba:	6039      	str	r1, [r7, #0]
 80013bc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f001 f8d0 	bl	8002564 <null_ptr_check>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d11e      	bne.n	800140e <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80013d0:	f107 030e 	add.w	r3, r7, #14
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f81f 	bl	800141a <bme280_get_sensor_mode>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <bme280_set_sensor_mode+0x46>
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f000 fb1f 	bl	8001a32 <put_device_to_sleep>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 80013f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d106      	bne.n	800140e <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fae1 	bl	80019cc <write_power_mode>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001424:	6838      	ldr	r0, [r7, #0]
 8001426:	f001 f89d 	bl	8002564 <null_ptr_check>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d10e      	bne.n	8001454 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2201      	movs	r2, #1
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	20f4      	movs	r0, #244	; 0xf4
 800143e:	f7ff feba 	bl	80011b6 <bme280_get_regs>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001454:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001468:	23e0      	movs	r3, #224	; 0xe0
 800146a:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8001470:	2305      	movs	r3, #5
 8001472:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001474:	23b6      	movs	r3, #182	; 0xb6
 8001476:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f001 f873 	bl	8002564 <null_ptr_check>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8001482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d12f      	bne.n	80014ea <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800148a:	f107 010b 	add.w	r1, r7, #11
 800148e:	f107 000d 	add.w	r0, r7, #13
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f7ff febe 	bl	8001216 <bme280_set_regs>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d121      	bne.n	80014ea <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2002      	movs	r0, #2
 80014ac:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80014ae:	f107 010c 	add.w	r1, r7, #12
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	20f3      	movs	r0, #243	; 0xf3
 80014b8:	f7ff fe7d 	bl	80011b6 <bme280_get_regs>
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80014c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <bme280_soft_reset+0x7c>
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	73ba      	strb	r2, [r7, #14]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <bme280_soft_reset+0x7c>
 80014d2:	7b3b      	ldrb	r3, [r7, #12]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e4      	bne.n	80014a6 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80014dc:	7b3b      	ldrb	r3, [r7, #12]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 80014e6:	23fa      	movs	r3, #250	; 0xfa
 80014e8:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b08a      	sub	sp, #40	; 0x28
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800150c:	f107 0310 	add.w	r3, r7, #16
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f001 f823 	bl	8002564 <null_ptr_check>
 800151e:	4603      	mov	r3, r0
 8001520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001524:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001528:	2b00      	cmp	r3, #0
 800152a:	d124      	bne.n	8001576 <bme280_get_sensor_data+0x80>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d021      	beq.n	8001576 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001532:	f107 011c 	add.w	r1, r7, #28
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2208      	movs	r2, #8
 800153a:	20f7      	movs	r0, #247	; 0xf7
 800153c:	f7ff fe3b 	bl	80011b6 <bme280_get_regs>
 8001540:	4603      	mov	r3, r0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001546:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800154e:	f107 0210 	add.w	r2, r7, #16
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f000 f815 	bl	8001588 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3310      	adds	r3, #16
 8001562:	f107 0110 	add.w	r1, r7, #16
 8001566:	7bf8      	ldrb	r0, [r7, #15]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	f000 f853 	bl	8001614 <bme280_compensate_data>
 800156e:	4603      	mov	r3, r0
 8001570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001574:	e002      	b.n	800157c <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001576:	23ff      	movs	r3, #255	; 0xff
 8001578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800157c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001580:	4618      	mov	r0, r3
 8001582:	3728      	adds	r7, #40	; 0x28
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001588:	b480      	push	{r7}
 800158a:	b087      	sub	sp, #28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3301      	adds	r3, #1
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3302      	adds	r3, #2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3303      	adds	r3, #3
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	031b      	lsls	r3, r3, #12
 80015c6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3304      	adds	r3, #4
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	011b      	lsls	r3, r3, #4
 80015d0:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3305      	adds	r3, #5
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	431a      	orrs	r2, r3
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3306      	adds	r3, #6
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3307      	adds	r3, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	431a      	orrs	r2, r3
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	609a      	str	r2, [r3, #8]
}
 8001608:	bf00      	nop
 800160a:	371c      	adds	r7, #28
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d04b      	beq.n	80016c6 <bme280_compensate_data+0xb2>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d048      	beq.n	80016c6 <bme280_compensate_data+0xb2>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d045      	beq.n	80016c6 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800166e:	6839      	ldr	r1, [r7, #0]
 8001670:	68b8      	ldr	r0, [r7, #8]
 8001672:	f000 fa2b 	bl	8001acc <compensate_temperature>
 8001676:	eeb0 7a40 	vmov.f32	s14, s0
 800167a:	eef0 7a60 	vmov.f32	s15, s1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f000 faed 	bl	8001c70 <compensate_pressure>
 8001696:	eeb0 7a40 	vmov.f32	s14, s0
 800169a:	eef0 7a60 	vmov.f32	s15, s1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	f003 0304 	and.w	r3, r3, #4
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00d      	beq.n	80016ca <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80016ae:	6839      	ldr	r1, [r7, #0]
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f000 fcad 	bl	8002010 <compensate_humidity>
 80016b6:	eeb0 7a40 	vmov.f32	s14, s0
 80016ba:	eef0 7a60 	vmov.f32	s15, s1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 80016c4:	e001      	b.n	80016ca <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80016c6:	23ff      	movs	r3, #255	; 0xff
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80016e4:	2301      	movs	r3, #1
 80016e6:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	68b8      	ldr	r0, [r7, #8]
 80016f6:	f000 f815 	bl	8001724 <set_osr_humidity_settings>
 80016fa:	4603      	mov	r3, r0
 80016fc:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f842 	bl	8001798 <set_osr_press_temp_settings>
 8001714:	4603      	mov	r3, r0
 8001716:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001718:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800172e:	23f2      	movs	r3, #242	; 0xf2
 8001730:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	789b      	ldrb	r3, [r3, #2]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	b2db      	uxtb	r3, r3
 800173c:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800173e:	f107 010e 	add.w	r1, r7, #14
 8001742:	f107 000c 	add.w	r0, r7, #12
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2201      	movs	r2, #1
 800174a:	f7ff fd64 	bl	8001216 <bme280_set_regs>
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800175a:	23f4      	movs	r3, #244	; 0xf4
 800175c:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800175e:	7b38      	ldrb	r0, [r7, #12]
 8001760:	f107 010d 	add.w	r1, r7, #13
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	f7ff fd25 	bl	80011b6 <bme280_get_regs>
 800176c:	4603      	mov	r3, r0
 800176e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 8001770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d109      	bne.n	800178c <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001778:	f107 010d 	add.w	r1, r7, #13
 800177c:	f107 000c 	add.w	r0, r7, #12
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	2201      	movs	r2, #1
 8001784:	f7ff fd47 	bl	8001216 <bme280_set_regs>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
 80017a4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80017a6:	23f4      	movs	r3, #244	; 0xf4
 80017a8:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80017aa:	7db8      	ldrb	r0, [r7, #22]
 80017ac:	f107 0115 	add.w	r1, r7, #21
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f7ff fcff 	bl	80011b6 <bme280_get_regs>
 80017b8:	4603      	mov	r3, r0
 80017ba:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80017bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d11f      	bne.n	8001804 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d005      	beq.n	80017da <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 80017ce:	f107 0315 	add.w	r3, r7, #21
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 f88e 	bl	80018f6 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 80017e4:	f107 0315 	add.w	r3, r7, #21
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 f8a0 	bl	8001930 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80017f0:	f107 0115 	add.w	r1, r7, #21
 80017f4:	f107 0016 	add.w	r0, r7, #22
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f7ff fd0b 	bl	8001216 <bme280_set_regs>
 8001800:	4603      	mov	r3, r0
 8001802:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800181e:	23f5      	movs	r3, #245	; 0xf5
 8001820:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001822:	7db8      	ldrb	r0, [r7, #22]
 8001824:	f107 0115 	add.w	r1, r7, #21
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f7ff fcc3 	bl	80011b6 <bme280_get_regs>
 8001830:	4603      	mov	r3, r0
 8001832:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11f      	bne.n	800187c <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800183c:	7bfb      	ldrb	r3, [r7, #15]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001846:	f107 0315 	add.w	r3, r7, #21
 800184a:	68b9      	ldr	r1, [r7, #8]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f81b 	bl	8001888 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 800185c:	f107 0315 	add.w	r3, r7, #21
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f82d 	bl	80018c2 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001868:	f107 0115 	add.w	r1, r7, #21
 800186c:	f107 0016 	add.w	r0, r7, #22
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f7ff fccf 	bl	8001216 <bme280_set_regs>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800187c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b25b      	sxtb	r3, r3
 8001898:	f023 031c 	bic.w	r3, r3, #28
 800189c:	b25a      	sxtb	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	f003 031c 	and.w	r3, r3, #28
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	701a      	strb	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	f003 031f 	and.w	r3, r3, #31
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	791b      	ldrb	r3, [r3, #4]
 80018dc:	015b      	lsls	r3, r3, #5
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	701a      	strb	r2, [r3, #0]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b25b      	sxtb	r3, r3
 8001906:	f023 031c 	bic.w	r3, r3, #28
 800190a:	b25a      	sxtb	r2, r3
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f003 031c 	and.w	r3, r3, #28
 8001918:	b25b      	sxtb	r3, r3
 800191a:	4313      	orrs	r3, r2
 800191c:	b25b      	sxtb	r3, r3
 800191e:	b2da      	uxtb	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	701a      	strb	r2, [r3, #0]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b25b      	sxtb	r3, r3
 8001940:	f003 031f 	and.w	r3, r3, #31
 8001944:	b25a      	sxtb	r2, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	785b      	ldrb	r3, [r3, #1]
 800194a:	015b      	lsls	r3, r3, #5
 800194c:	b25b      	sxtb	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	b25b      	sxtb	r3, r3
 8001952:	b2da      	uxtb	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	701a      	strb	r2, [r3, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	b2da      	uxtb	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3302      	adds	r3, #2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	109b      	asrs	r3, r3, #2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	b2da      	uxtb	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3302      	adds	r3, #2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	b2da      	uxtb	r2, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3303      	adds	r3, #3
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	109b      	asrs	r3, r3, #2
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	3303      	adds	r3, #3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	095b      	lsrs	r3, r3, #5
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	711a      	strb	r2, [r3, #4]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80019d8:	23f4      	movs	r3, #244	; 0xf4
 80019da:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80019dc:	7bb8      	ldrb	r0, [r7, #14]
 80019de:	f107 010d 	add.w	r1, r7, #13
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f7ff fbe6 	bl	80011b6 <bme280_get_regs>
 80019ea:	4603      	mov	r3, r0
 80019ec:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d117      	bne.n	8001a26 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80019f6:	7b7b      	ldrb	r3, [r7, #13]
 80019f8:	b25b      	sxtb	r3, r3
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	b25b      	sxtb	r3, r3
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001a12:	f107 010d 	add.w	r1, r7, #13
 8001a16:	f107 000e 	add.w	r0, r7, #14
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f7ff fbfa 	bl	8001216 <bme280_set_regs>
 8001a22:	4603      	mov	r3, r0
 8001a24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8001a3a:	f107 0110 	add.w	r1, r7, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	20f2      	movs	r0, #242	; 0xf2
 8001a44:	f7ff fbb7 	bl	80011b6 <bme280_get_regs>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d118      	bne.n	8001a86 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001a54:	f107 0208 	add.w	r2, r7, #8
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff80 	bl	8001964 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fcfb 	bl	8001460 <bme280_soft_reset>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 8001a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d107      	bne.n	8001a86 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 f808 	bl	8001a92 <reload_device_settings>
 8001a82:	4603      	mov	r3, r0
 8001a84:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	201f      	movs	r0, #31
 8001aa2:	f7ff fe18 	bl	80016d6 <set_osr_settings>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	201f      	movs	r0, #31
 8001ab8:	f7ff feaa 	bl	8001810 <set_filter_standby_settings>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <compensate_temperature+0x18c>)
 8001adc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <compensate_temperature+0x190>)
 8001ae6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fd08 	bl	8000504 <__aeabi_ui2d>
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <compensate_temperature+0x194>)
 8001afa:	f7fe fea7 	bl	800084c <__aeabi_ddiv>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fcfa 	bl	8000504 <__aeabi_ui2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b53      	ldr	r3, [pc, #332]	; (8001c64 <compensate_temperature+0x198>)
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fbb1 	bl	8000288 <__aeabi_dsub>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_T2);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fcf5 	bl	8000524 <__aeabi_i2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b42:	f7fe fd59 	bl	80005f8 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcd6 	bl	8000504 <__aeabi_ui2d>
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001b60:	f7fe fe74 	bl	800084c <__aeabi_ddiv>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4614      	mov	r4, r2
 8001b6a:	461d      	mov	r5, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fcc7 	bl	8000504 <__aeabi_ui2d>
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <compensate_temperature+0x19c>)
 8001b7c:	f7fe fe66 	bl	800084c <__aeabi_ddiv>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb7e 	bl	8000288 <__aeabi_dsub>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b9c:	f7fe fd2c 	bl	80005f8 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4614      	mov	r4, r2
 8001ba6:	461d      	mov	r5, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcb8 	bl	8000524 <__aeabi_i2d>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4620      	mov	r0, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7fe fd1c 	bl	80005f8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bcc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bd0:	f7fe fb5c 	bl	800028c <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ffbc 	bl	8000b58 <__aeabi_d2iz>
 8001be0:	4602      	mov	r2, r0
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001bee:	f7fe fb4d 	bl	800028c <__adddf3>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f04f 0200 	mov.w	r2, #0
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <compensate_temperature+0x1a0>)
 8001c00:	f7fe fe24 	bl	800084c <__aeabi_ddiv>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 8001c0c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c10:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c14:	f7fe ff62 	bl	8000adc <__aeabi_dcmplt>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8001c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c22:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001c26:	e00c      	b.n	8001c42 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c2c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c30:	f7fe ff72 	bl	8000b18 <__aeabi_dcmpgt>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8001c3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 8001c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c46:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001c4e:	eef0 0a67 	vmov.f32	s1, s15
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}
 8001c58:	c0440000 	.word	0xc0440000
 8001c5c:	40554000 	.word	0x40554000
 8001c60:	40d00000 	.word	0x40d00000
 8001c64:	40900000 	.word	0x40900000
 8001c68:	40c00000 	.word	0x40c00000
 8001c6c:	40b40000 	.word	0x40b40000

08001c70 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001c7a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001fe0 <compensate_pressure+0x370>)
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8001c84:	a3d8      	add	r3, pc, #864	; (adr r3, 8001fe8 <compensate_pressure+0x378>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc46 	bl	8000524 <__aeabi_i2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca0:	f7fe fdd4 	bl	800084c <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	4bc1      	ldr	r3, [pc, #772]	; (8001fb8 <compensate_pressure+0x348>)
 8001cb2:	f7fe fae9 	bl	8000288 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4614      	mov	r4, r2
 8001cd0:	461d      	mov	r5, r3
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc23 	bl	8000524 <__aeabi_i2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f7fe fc87 	bl	80005f8 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4bb1      	ldr	r3, [pc, #708]	; (8001fbc <compensate_pressure+0x34c>)
 8001cf8:	f7fe fda8 	bl	800084c <__aeabi_ddiv>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fc0a 	bl	8000524 <__aeabi_i2d>
 8001d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d14:	f7fe fc70 	bl	80005f8 <__aeabi_dmul>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	f7fe fab2 	bl	800028c <__adddf3>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d30:	f7fe faac 	bl	800028c <__adddf3>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b9f      	ldr	r3, [pc, #636]	; (8001fc0 <compensate_pressure+0x350>)
 8001d42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d46:	f7fe fd81 	bl	800084c <__aeabi_ddiv>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4614      	mov	r4, r2
 8001d50:	461d      	mov	r5, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbe3 	bl	8000524 <__aeabi_i2d>
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	4b98      	ldr	r3, [pc, #608]	; (8001fc4 <compensate_pressure+0x354>)
 8001d64:	f7fe fc48 	bl	80005f8 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4620      	mov	r0, r4
 8001d6e:	4629      	mov	r1, r5
 8001d70:	f7fe fa8c 	bl	800028c <__adddf3>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fbce 	bl	8000524 <__aeabi_i2d>
 8001d88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d8c:	f7fe fc34 	bl	80005f8 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	4b86      	ldr	r3, [pc, #536]	; (8001fc8 <compensate_pressure+0x358>)
 8001dae:	f7fe fd4d 	bl	800084c <__aeabi_ddiv>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fbaf 	bl	8000524 <__aeabi_i2d>
 8001dc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dca:	f7fe fc15 	bl	80005f8 <__aeabi_dmul>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dda:	f7fe fa57 	bl	800028c <__adddf3>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <compensate_pressure+0x358>)
 8001dec:	f7fe fd2e 	bl	800084c <__aeabi_ddiv>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <compensate_pressure+0x34c>)
 8001dfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e02:	f7fe fd23 	bl	800084c <__aeabi_ddiv>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b6e      	ldr	r3, [pc, #440]	; (8001fcc <compensate_pressure+0x35c>)
 8001e14:	f7fe fa3a 	bl	800028c <__adddf3>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4614      	mov	r4, r2
 8001e1e:	461d      	mov	r5, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	88db      	ldrh	r3, [r3, #6]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb6d 	bl	8000504 <__aeabi_ui2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe fbe1 	bl	80005f8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e4a:	f7fe fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f040 80cd 	bne.w	8001ff0 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fb52 	bl	8000504 <__aeabi_ui2d>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	4959      	ldr	r1, [pc, #356]	; (8001fd0 <compensate_pressure+0x360>)
 8001e6a:	f7fe fa0d 	bl	8000288 <__aeabi_dsub>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <compensate_pressure+0x364>)
 8001e7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e80:	f7fe fce4 	bl	800084c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e8c:	f7fe f9fc 	bl	8000288 <__aeabi_dsub>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	a345      	add	r3, pc, #276	; (adr r3, 8001fb0 <compensate_pressure+0x340>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fbab 	bl	80005f8 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eae:	f7fe fccd 	bl	800084c <__aeabi_ddiv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb2f 	bl	8000524 <__aeabi_i2d>
 8001ec6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eca:	f7fe fb95 	bl	80005f8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eda:	f7fe fb8d 	bl	80005f8 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <compensate_pressure+0x368>)
 8001eec:	f7fe fcae 	bl	800084c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fb10 	bl	8000524 <__aeabi_i2d>
 8001f04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f08:	f7fe fb76 	bl	80005f8 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <compensate_pressure+0x34c>)
 8001f1a:	f7fe fc97 	bl	800084c <__aeabi_ddiv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001f26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4614      	mov	r4, r2
 8001f38:	461d      	mov	r5, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	f7fe f99d 	bl	800028c <__adddf3>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <compensate_pressure+0x36c>)
 8001f60:	f7fe fc74 	bl	800084c <__aeabi_ddiv>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f6c:	f7fe f98e 	bl	800028c <__adddf3>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 8001f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f7c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f80:	f7fe fdac 	bl	8000adc <__aeabi_dcmplt>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8001f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001f92:	e031      	b.n	8001ff8 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 8001f94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001f9c:	f7fe fdbc 	bl	8000b18 <__aeabi_dcmpgt>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d028      	beq.n	8001ff8 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 8001fa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001faa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001fae:	e023      	b.n	8001ff8 <compensate_pressure+0x388>
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40b86a00 	.word	0x40b86a00
 8001fb8:	40ef4000 	.word	0x40ef4000
 8001fbc:	40e00000 	.word	0x40e00000
 8001fc0:	40100000 	.word	0x40100000
 8001fc4:	40f00000 	.word	0x40f00000
 8001fc8:	41200000 	.word	0x41200000
 8001fcc:	3ff00000 	.word	0x3ff00000
 8001fd0:	41300000 	.word	0x41300000
 8001fd4:	40b00000 	.word	0x40b00000
 8001fd8:	41e00000 	.word	0x41e00000
 8001fdc:	40300000 	.word	0x40300000
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	40dd4c00 	.word	0x40dd4c00
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ff4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8001ff8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ffc:	ec43 2b17 	vmov	d7, r2, r3
}
 8002000:	eeb0 0a47 	vmov.f32	s0, s14
 8002004:	eef0 0a67 	vmov.f32	s1, s15
 8002008:	3738      	adds	r7, #56	; 0x38
 800200a:	46bd      	mov	sp, r7
 800200c:	bdb0      	pop	{r4, r5, r7, pc}
 800200e:	bf00      	nop

08002010 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b094      	sub	sp, #80	; 0x50
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	4b81      	ldr	r3, [pc, #516]	; (8002230 <compensate_humidity+0x220>)
 800202c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa75 	bl	8000524 <__aeabi_i2d>
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <compensate_humidity+0x224>)
 8002040:	f7fe f922 	bl	8000288 <__aeabi_dsub>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fa66 	bl	8000524 <__aeabi_i2d>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b76      	ldr	r3, [pc, #472]	; (8002238 <compensate_humidity+0x228>)
 800205e:	f7fe facb 	bl	80005f8 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4614      	mov	r4, r2
 8002068:	461d      	mov	r5, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa57 	bl	8000524 <__aeabi_i2d>
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b70      	ldr	r3, [pc, #448]	; (800223c <compensate_humidity+0x22c>)
 800207c:	f7fe fbe6 	bl	800084c <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800208c:	f7fe fab4 	bl	80005f8 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe f8f8 	bl	800028c <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa2b 	bl	8000504 <__aeabi_ui2d>
 80020ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020b2:	f7fe f8e9 	bl	8000288 <__aeabi_dsub>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_H2) / 65536.0;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa2d 	bl	8000524 <__aeabi_i2d>
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	4b5c      	ldr	r3, [pc, #368]	; (8002240 <compensate_humidity+0x230>)
 80020d0:	f7fe fbbc 	bl	800084c <__aeabi_ddiv>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	7f1b      	ldrb	r3, [r3, #28]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa0f 	bl	8000504 <__aeabi_ui2d>
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b56      	ldr	r3, [pc, #344]	; (8002244 <compensate_humidity+0x234>)
 80020ec:	f7fe fbae 	bl	800084c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80020fc:	f7fe fa7c 	bl	80005f8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	4b4e      	ldr	r3, [pc, #312]	; (8002248 <compensate_humidity+0x238>)
 800210e:	f7fe f8bd 	bl	800028c <__adddf3>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f9ff 	bl	8000524 <__aeabi_i2d>
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <compensate_humidity+0x234>)
 800212c:	f7fe fb8e 	bl	800084c <__aeabi_ddiv>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800213c:	f7fe fa5c 	bl	80005f8 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800214c:	f7fe fa54 	bl	80005f8 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	4b3a      	ldr	r3, [pc, #232]	; (8002248 <compensate_humidity+0x238>)
 800215e:	f7fe f895 	bl	800028c <__adddf3>
 8002162:	4602      	mov	r2, r0
 8002164:	460b      	mov	r3, r1
 8002166:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 800216a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800216e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002172:	f7fe fa41 	bl	80005f8 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4614      	mov	r4, r2
 800217c:	461d      	mov	r5, r3
 800217e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002186:	f7fe fa37 	bl	80005f8 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4620      	mov	r0, r4
 8002190:	4629      	mov	r1, r5
 8002192:	f7fe fa31 	bl	80005f8 <__aeabi_dmul>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	7e1b      	ldrb	r3, [r3, #24]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9ae 	bl	8000504 <__aeabi_ui2d>
 80021a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021ac:	f7fe fa24 	bl	80005f8 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <compensate_humidity+0x23c>)
 80021be:	f7fe fb45 	bl	800084c <__aeabi_ddiv>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	f04f 0000 	mov.w	r0, #0
 80021ca:	491f      	ldr	r1, [pc, #124]	; (8002248 <compensate_humidity+0x238>)
 80021cc:	f7fe f85c 	bl	8000288 <__aeabi_dsub>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d8:	f7fe fa0e 	bl	80005f8 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if (humidity > humidity_max)
 80021e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021ec:	f7fe fc94 	bl	8000b18 <__aeabi_dcmpgt>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 80021f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021fa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80021fe:	e00c      	b.n	800221a <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8002200:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002204:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002208:	f7fe fc68 	bl	8000adc <__aeabi_dcmplt>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8002212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002216:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 800221a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800221e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002222:	eeb0 0a47 	vmov.f32	s0, s14
 8002226:	eef0 0a67 	vmov.f32	s1, s15
 800222a:	3750      	adds	r7, #80	; 0x50
 800222c:	46bd      	mov	sp, r7
 800222e:	bdb0      	pop	{r4, r5, r7, pc}
 8002230:	40590000 	.word	0x40590000
 8002234:	40f2c000 	.word	0x40f2c000
 8002238:	40500000 	.word	0x40500000
 800223c:	40d00000 	.word	0x40d00000
 8002240:	40f00000 	.word	0x40f00000
 8002244:	41900000 	.word	0x41900000
 8002248:	3ff00000 	.word	0x3ff00000
 800224c:	41200000 	.word	0x41200000

08002250 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08a      	sub	sp, #40	; 0x28
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002258:	2388      	movs	r3, #136	; 0x88
 800225a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]
 8002272:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002274:	f107 010c 	add.w	r1, r7, #12
 8002278:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	221a      	movs	r2, #26
 8002280:	f7fe ff99 	bl	80011b6 <bme280_get_regs>
 8002284:	4603      	mov	r3, r0
 8002286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 800228a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11d      	bne.n	80022ce <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f84a 	bl	8002332 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800229e:	23e1      	movs	r3, #225	; 0xe1
 80022a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80022a4:	f107 010c 	add.w	r1, r7, #12
 80022a8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2207      	movs	r2, #7
 80022b0:	f7fe ff81 	bl	80011b6 <bme280_get_regs>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80022ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f8e1 	bl	8002490 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80022ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80022da:	b480      	push	{r7}
 80022dc:	b087      	sub	sp, #28
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 80022e8:	2301      	movs	r3, #1
 80022ea:	75fb      	strb	r3, [r7, #23]
 80022ec:	e016      	b.n	800231c <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	441a      	add	r2, r3
 80022f4:	7dfb      	ldrb	r3, [r7, #23]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	3b01      	subs	r3, #1
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	440b      	add	r3, r1
 80022fe:	7812      	ldrb	r2, [r2, #0]
 8002300:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	441a      	add	r2, r3
 8002308:	7dfb      	ldrb	r3, [r7, #23]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4619      	mov	r1, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	440b      	add	r3, r1
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	3301      	adds	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
 800231c:	7dfa      	ldrb	r2, [r7, #23]
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	429a      	cmp	r2, r3
 8002322:	d3e4      	bcc.n	80022ee <interleave_reg_addr+0x14>
    }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3310      	adds	r3, #16
 8002340:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3301      	adds	r3, #1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b21a      	sxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b21b      	sxth	r3, r3
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3303      	adds	r3, #3
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21a      	sxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3305      	adds	r3, #5
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3304      	adds	r3, #4
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b21b      	sxth	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	b21a      	sxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3307      	adds	r3, #7
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	b21a      	sxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3306      	adds	r3, #6
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b21b      	sxth	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3309      	adds	r3, #9
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	021b      	lsls	r3, r3, #8
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	3308      	adds	r3, #8
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	4313      	orrs	r3, r2
 80023c0:	b21a      	sxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	330b      	adds	r3, #11
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	021b      	lsls	r3, r3, #8
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	330a      	adds	r3, #10
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21a      	sxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	330d      	adds	r3, #13
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	330c      	adds	r3, #12
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b21a      	sxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	330f      	adds	r3, #15
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	b21a      	sxth	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	330e      	adds	r3, #14
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b21b      	sxth	r3, r3
 800240c:	4313      	orrs	r3, r2
 800240e:	b21a      	sxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3311      	adds	r3, #17
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	021b      	lsls	r3, r3, #8
 800241c:	b21a      	sxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3310      	adds	r3, #16
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b21b      	sxth	r3, r3
 8002426:	4313      	orrs	r3, r2
 8002428:	b21a      	sxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3313      	adds	r3, #19
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3312      	adds	r3, #18
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	b21b      	sxth	r3, r3
 8002440:	4313      	orrs	r3, r2
 8002442:	b21a      	sxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3315      	adds	r3, #21
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	b21a      	sxth	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3314      	adds	r3, #20
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	b21b      	sxth	r3, r3
 800245a:	4313      	orrs	r3, r2
 800245c:	b21a      	sxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	3317      	adds	r3, #23
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	021b      	lsls	r3, r3, #8
 800246a:	b21a      	sxth	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3316      	adds	r3, #22
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	b21a      	sxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e5a      	ldrb	r2, [r3, #25]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	761a      	strb	r2, [r3, #24]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3310      	adds	r3, #16
 800249e:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3301      	adds	r3, #1
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	4313      	orrs	r3, r2
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	789a      	ldrb	r2, [r3, #2]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3303      	adds	r3, #3
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b25b      	sxtb	r3, r3
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	827b      	strh	r3, [r7, #18]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	823b      	strh	r3, [r7, #16]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80024de:	8a7a      	ldrh	r2, [r7, #18]
 80024e0:	8a3b      	ldrh	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3305      	adds	r3, #5
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	81fb      	strh	r3, [r7, #14]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	b2db      	uxtb	r3, r3
 8002504:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002506:	89fa      	ldrh	r2, [r7, #14]
 8002508:	89bb      	ldrh	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	b21a      	sxth	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3306      	adds	r3, #6
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b25a      	sxtb	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	460a      	mov	r2, r1
 8002536:	71fb      	strb	r3, [r7, #7]
 8002538:	4613      	mov	r3, r2
 800253a:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	79bb      	ldrb	r3, [r7, #6]
 8002544:	4013      	ands	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e001      	b.n	8002556 <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <null_ptr_check+0x26>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <null_ptr_check+0x26>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <null_ptr_check+0x26>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800258a:	23ff      	movs	r3, #255	; 0xff
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e001      	b.n	8002594 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002594:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <I2C_Read>:
 * If success function returns 0.
 *
 * @param
 */
int8_t I2C_Read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af04      	add	r7, sp, #16
 80025aa:	603a      	str	r2, [r7, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
 80025b2:	460b      	mov	r3, r1
 80025b4:	71bb      	strb	r3, [r7, #6]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80bb      	strh	r3, [r7, #4]
	int8_t status = BME280_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, dev_id, reg_addr, 1, reg_data, length, 100);
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	b299      	uxth	r1, r3
 80025c2:	79bb      	ldrb	r3, [r7, #6]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	2364      	movs	r3, #100	; 0x64
 80025c8:	9302      	str	r3, [sp, #8]
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2301      	movs	r3, #1
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <I2C_Read+0x44>)
 80025d6:	f002 f9c9 	bl	800496c <HAL_I2C_Mem_Read>
	return status;
 80025da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000674 	.word	0x20000674

080025ec <I2C_Write>:

int8_t I2C_Write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t length)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af04      	add	r7, sp, #16
 80025f2:	603a      	str	r2, [r7, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
 80025fa:	460b      	mov	r3, r1
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	4613      	mov	r3, r2
 8002600:	80bb      	strh	r3, [r7, #4]
	int8_t status = BME280_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, dev_id, reg_addr, 1, reg_data, length, 100);
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	b299      	uxth	r1, r3
 800260a:	79bb      	ldrb	r3, [r7, #6]
 800260c:	b29a      	uxth	r2, r3
 800260e:	2364      	movs	r3, #100	; 0x64
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	88bb      	ldrh	r3, [r7, #4]
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2301      	movs	r3, #1
 800261c:	4804      	ldr	r0, [pc, #16]	; (8002630 <I2C_Write+0x44>)
 800261e:	f002 f891 	bl	8004744 <HAL_I2C_Mem_Write>
	return status;
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000674 	.word	0x20000674

08002634 <BME280_Init>:

int8_t BME280_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
	int8_t status = BME280_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	71fb      	strb	r3, [r7, #7]
	uint8_t dev_settings;

	bme_dev.dev_id = (BME280_I2C_ADDR_PRIM<<1);
 800263e:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <BME280_Init+0xb4>)
 8002640:	22ec      	movs	r2, #236	; 0xec
 8002642:	705a      	strb	r2, [r3, #1]
	bme_dev.intf = BME280_I2C_INTF;
 8002644:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <BME280_Init+0xb4>)
 8002646:	2201      	movs	r2, #1
 8002648:	709a      	strb	r2, [r3, #2]
	bme_dev.read = I2C_Read;
 800264a:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <BME280_Init+0xb4>)
 800264c:	4a27      	ldr	r2, [pc, #156]	; (80026ec <BME280_Init+0xb8>)
 800264e:	605a      	str	r2, [r3, #4]
	bme_dev.write = I2C_Write;
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <BME280_Init+0xb4>)
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <BME280_Init+0xbc>)
 8002654:	609a      	str	r2, [r3, #8]
	bme_dev.delay_ms = DELAY_ms;
 8002656:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <BME280_Init+0xb4>)
 8002658:	4a26      	ldr	r2, [pc, #152]	; (80026f4 <BME280_Init+0xc0>)
 800265a:	60da      	str	r2, [r3, #12]

	status = bme280_init(&bme_dev);
 800265c:	4822      	ldr	r0, [pc, #136]	; (80026e8 <BME280_Init+0xb4>)
 800265e:	f7fe fd5f 	bl	8001120 <bme280_init>
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]

	if(status == BME280_OK)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d136      	bne.n	80026dc <BME280_Init+0xa8>
	{

		/* Recommended mode of operation: Indoor navigation */
		bme_dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <BME280_Init+0xb4>)
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		bme_dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <BME280_Init+0xb4>)
 8002678:	2205      	movs	r2, #5
 800267a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		bme_dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 800267e:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <BME280_Init+0xb4>)
 8002680:	2202      	movs	r2, #2
 8002682:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		bme_dev.settings.filter = BME280_FILTER_COEFF_16;
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <BME280_Init+0xb4>)
 8002688:	2204      	movs	r2, #4
 800268a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		bme_dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <BME280_Init+0xb4>)
 8002690:	2201      	movs	r2, #1
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		dev_settings = BME280_OSR_PRESS_SEL;
 8002696:	2301      	movs	r3, #1
 8002698:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_OSR_TEMP_SEL;
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_OSR_HUM_SEL;
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_STANDBY_SEL;
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	f043 0310 	orr.w	r3, r3, #16
 80026b0:	71bb      	strb	r3, [r7, #6]
		dev_settings |= BME280_FILTER_SEL;
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	f043 0308 	orr.w	r3, r3, #8
 80026b8:	71bb      	strb	r3, [r7, #6]

		status = bme280_set_sensor_settings(dev_settings, &bme_dev);
 80026ba:	79bb      	ldrb	r3, [r7, #6]
 80026bc:	490a      	ldr	r1, [pc, #40]	; (80026e8 <BME280_Init+0xb4>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fe22 	bl	8001308 <bme280_set_sensor_settings>
 80026c4:	4603      	mov	r3, r0
 80026c6:	71fb      	strb	r3, [r7, #7]

		if(status == BME280_OK)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <BME280_Init+0xa8>
		{
			status = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme_dev);
 80026d0:	4905      	ldr	r1, [pc, #20]	; (80026e8 <BME280_Init+0xb4>)
 80026d2:	2003      	movs	r0, #3
 80026d4:	f7fe fe6d 	bl	80013b2 <bme280_set_sensor_mode>
 80026d8:	4603      	mov	r3, r0
 80026da:	71fb      	strb	r3, [r7, #7]
		}
	}

	return status;
 80026dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000204 	.word	0x20000204
 80026ec:	080025a5 	.word	0x080025a5
 80026f0:	080025ed 	.word	0x080025ed
 80026f4:	08002e61 	.word	0x08002e61

080026f8 <BME280_Read_Data>:

int8_t BME280_Read_Data(struct bme280_data *received_data)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	int8_t status = BME280_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]

	status = bme280_get_sensor_data(BME280_ALL, received_data, &bme_dev);
 8002704:	4a08      	ldr	r2, [pc, #32]	; (8002728 <BME280_Read_Data+0x30>)
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	2007      	movs	r0, #7
 800270a:	f7fe fef4 	bl	80014f6 <bme280_get_sensor_data>
 800270e:	4603      	mov	r3, r0
 8002710:	73fb      	strb	r3, [r7, #15]
	bme_dev.delay_ms(100);
 8002712:	4b05      	ldr	r3, [pc, #20]	; (8002728 <BME280_Read_Data+0x30>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2064      	movs	r0, #100	; 0x64
 8002718:	4798      	blx	r3

	return status;
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000204 	.word	0x20000204

0800272c <BME280_Print_Data>:

void BME280_Print_Data(struct bme280_data *bme_data)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af04      	add	r7, sp, #16
 8002732:	6078      	str	r0, [r7, #4]
	printf("Temperature, Pressure, Humidity\r\n");
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <BME280_Print_Data+0x3c>)
 8002736:	f005 fef9 	bl	800852c <puts>
#ifdef BME280_FLOAT_ENABLE
	printf("%0.2f, %0.2f, %0.2f\r\n", bme_data->temperature, bme_data->pressure, bme_data->humidity);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800274c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002750:	e9cd 2300 	strd	r2, r3, [sp]
 8002754:	4622      	mov	r2, r4
 8002756:	462b      	mov	r3, r5
 8002758:	4804      	ldr	r0, [pc, #16]	; (800276c <BME280_Print_Data+0x40>)
 800275a:	f005 fe61 	bl	8008420 <iprintf>
#else
	printf("%d, %u, %u\r\n", bme_data->temperature, bme_data->pressure, bme_data->humidity);
#endif
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bdb0      	pop	{r4, r5, r7, pc}
 8002766:	bf00      	nop
 8002768:	0800a9a0 	.word	0x0800a9a0
 800276c:	0800a9c4 	.word	0x0800a9c4

08002770 <DS18B20_Read_Address>:
 *
 * @param
 */

HAL_StatusTypeDef DS18B20_Read_Address(uint8_t* rom_code)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  int status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
  uint8_t crc;

  if (Wire_Reset() != HAL_OK)
 800277c:	f001 fa02 	bl	8003b84 <Wire_Reset>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <DS18B20_Read_Address+0x1a>
    status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	617b      	str	r3, [r7, #20]

  if (status != HAL_ERROR) {
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d026      	beq.n	80027de <DS18B20_Read_Address+0x6e>
    Wire_Write(DS18B20_READ_ROM);
 8002790:	2033      	movs	r0, #51	; 0x33
 8002792:	f001 fa81 	bl	8003c98 <Wire_Write>

    for (int i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002796:	2300      	movs	r3, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	e009      	b.n	80027b0 <DS18B20_Read_Address+0x40>
    {
      rom_code[i] = Wire_Read();
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	18d4      	adds	r4, r2, r3
 80027a2:	f001 fa37 	bl	8003c14 <Wire_Read>
 80027a6:	4603      	mov	r3, r0
 80027a8:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	3301      	adds	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b07      	cmp	r3, #7
 80027b4:	ddf2      	ble.n	800279c <DS18B20_Read_Address+0x2c>
    }

    crc = Wire_Crc(rom_code, DS18B20_ROM_CODE_SIZE - 1);
 80027b6:	2107      	movs	r1, #7
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f001 fa89 	bl	8003cd0 <Wire_Crc>
 80027be:	4603      	mov	r3, r0
 80027c0:	73fb      	strb	r3, [r7, #15]
    
    if(rom_code[DS18B20_ROM_CODE_SIZE - 1] == crc)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3307      	adds	r3, #7
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	7bfa      	ldrb	r2, [r7, #15]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d102      	bne.n	80027d4 <DS18B20_Read_Address+0x64>
      status = HAL_OK;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e001      	b.n	80027d8 <DS18B20_Read_Address+0x68>
    else 
      status = HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
    
    return status;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	e001      	b.n	80027e2 <DS18B20_Read_Address+0x72>
  }

  return status;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	b2db      	uxtb	r3, r3
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd90      	pop	{r4, r7, pc}

080027ea <Send_CMD>:

static HAL_StatusTypeDef Send_CMD(const uint8_t* rom_code, uint8_t command)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	70fb      	strb	r3, [r7, #3]
  int status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]

  if (Wire_Reset() != HAL_OK)
 80027fa:	f001 f9c3 	bl	8003b84 <Wire_Reset>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <Send_CMD+0x1e>
    status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	60fb      	str	r3, [r7, #12]

  if (status != HAL_ERROR) {
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d020      	beq.n	8002850 <Send_CMD+0x66>

    if(rom_code == NULL) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d103      	bne.n	800281c <Send_CMD+0x32>
      Wire_Write(DS18B20_SKIP_ROM);
 8002814:	20cc      	movs	r0, #204	; 0xcc
 8002816:	f001 fa3f 	bl	8003c98 <Wire_Write>
 800281a:	e012      	b.n	8002842 <Send_CMD+0x58>
    } else {
      Wire_Write(DS18B20_MATCH_ROM);
 800281c:	2055      	movs	r0, #85	; 0x55
 800281e:	f001 fa3b 	bl	8003c98 <Wire_Write>
      
      for (int i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	e009      	b.n	800283c <Send_CMD+0x52>
        Wire_Write(rom_code[i]);
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f001 fa31 	bl	8003c98 <Wire_Write>
      for (int i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b07      	cmp	r3, #7
 8002840:	ddf2      	ble.n	8002828 <Send_CMD+0x3e>
    }

    Wire_Write(command);
 8002842:	78fb      	ldrb	r3, [r7, #3]
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fa27 	bl	8003c98 <Wire_Write>
    
    return status;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e001      	b.n	8002854 <Send_CMD+0x6a>
  }

  return status;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	b2db      	uxtb	r3, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <DS18B20_Start_Measure>:

HAL_StatusTypeDef DS18B20_Start_Measure(const uint8_t* rom_code)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  return Send_CMD(rom_code, DS18B20_CONVERT_T);
 8002864:	2144      	movs	r1, #68	; 0x44
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffbf 	bl	80027ea <Send_CMD>
 800286c:	4603      	mov	r3, r0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <DS18B20_Read_Scratchpad>:

static HAL_StatusTypeDef DS18B20_Read_Scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8002876:	b590      	push	{r4, r7, lr}
 8002878:	b087      	sub	sp, #28
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
  int status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  uint8_t crc;

  if (Send_CMD(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8002884:	21be      	movs	r1, #190	; 0xbe
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffaf 	bl	80027ea <Send_CMD>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <DS18B20_Read_Scratchpad+0x20>
    status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	617b      	str	r3, [r7, #20]

  if (status != HAL_ERROR) {
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d023      	beq.n	80028e4 <DS18B20_Read_Scratchpad+0x6e>

    for (int i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	e009      	b.n	80028b6 <DS18B20_Read_Scratchpad+0x40>
    {
      scratchpad[i] = Wire_Read();
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	18d4      	adds	r4, r2, r3
 80028a8:	f001 f9b4 	bl	8003c14 <Wire_Read>
 80028ac:	4603      	mov	r3, r0
 80028ae:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	3301      	adds	r3, #1
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	ddf2      	ble.n	80028a2 <DS18B20_Read_Scratchpad+0x2c>
    }

    crc = Wire_Crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 80028bc:	2108      	movs	r1, #8
 80028be:	6838      	ldr	r0, [r7, #0]
 80028c0:	f001 fa06 	bl	8003cd0 <Wire_Crc>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]
    
    if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	3308      	adds	r3, #8
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d102      	bne.n	80028da <DS18B20_Read_Scratchpad+0x64>
      status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e001      	b.n	80028de <DS18B20_Read_Scratchpad+0x68>
    else 
      status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
    
    return status;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e001      	b.n	80028e8 <DS18B20_Read_Scratchpad+0x72>
  }

  return status;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	b2db      	uxtb	r3, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd90      	pop	{r4, r7, pc}

080028f0 <DS18B20_Get_Temp>:

float DS18B20_Get_Temp(const uint8_t* rom_code)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (DS18B20_Read_Scratchpad(rom_code, scratchpad) != HAL_OK)
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff ffb9 	bl	8002876 <DS18B20_Read_Scratchpad>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <DS18B20_Get_Temp+0x20>
    return 85.0f; // default wrong value
 800290a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002938 <DS18B20_Get_Temp+0x48>
 800290e:	e00b      	b.n	8002928 <DS18B20_Get_Temp+0x38>
 8002910:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8002912:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8002914:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002918:	ee07 3a90 	vmov	s15, r3
 800291c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002920:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002924:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002928:	eef0 7a47 	vmov.f32	s15, s14
}
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	42aa0000 	.word	0x42aa0000

0800293c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <MX_GPIO_Init+0xac>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	4a1e      	ldr	r2, [pc, #120]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <MX_GPIO_Init+0xac>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002992:	f003 0304 	and.w	r3, r3, #4
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	4b13      	ldr	r3, [pc, #76]	; (80029e8 <MX_GPIO_Init+0xac>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299e:	4a12      	ldr	r2, [pc, #72]	; (80029e8 <MX_GPIO_Init+0xac>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <MX_GPIO_Init+0xac>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c2:	f107 0314 	add.w	r3, r7, #20
 80029c6:	4619      	mov	r1, r3
 80029c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029cc:	f001 fb6a 	bl	80040a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2017      	movs	r0, #23
 80029d6:	f001 fb2e 	bl	8004036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029da:	2017      	movs	r0, #23
 80029dc:	f001 fb47 	bl	800406e <HAL_NVIC_EnableIRQ>

}
 80029e0:	bf00      	nop
 80029e2:	3728      	adds	r7, #40	; 0x28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000

080029ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <MX_I2C1_Init+0x74>)
 80029f2:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <MX_I2C1_Init+0x78>)
 80029f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <MX_I2C1_Init+0x74>)
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <MX_I2C1_Init+0x7c>)
 80029fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80029fc:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <MX_I2C1_Init+0x74>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a02:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a26:	480e      	ldr	r0, [pc, #56]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a28:	f001 fd09 	bl	800443e <HAL_I2C_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002a32:	f000 f8d9 	bl	8002be8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a36:	2100      	movs	r1, #0
 8002a38:	4809      	ldr	r0, [pc, #36]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a3a:	f002 fc5f 	bl	80052fc <HAL_I2CEx_ConfigAnalogFilter>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002a44:	f000 f8d0 	bl	8002be8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <MX_I2C1_Init+0x74>)
 8002a4c:	f002 fca1 	bl	8005392 <HAL_I2CEx_ConfigDigitalFilter>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002a56:	f000 f8c7 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000674 	.word	0x20000674
 8002a64:	40005400 	.word	0x40005400
 8002a68:	00702991 	.word	0x00702991

08002a6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0ac      	sub	sp, #176	; 0xb0
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	605a      	str	r2, [r3, #4]
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2288      	movs	r2, #136	; 0x88
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f005 f855 	bl	8007b3c <memset>
  if(i2cHandle->Instance==I2C1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_I2C_MspInit+0xb0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d13b      	bne.n	8002b14 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a9c:	2340      	movs	r3, #64	; 0x40
 8002a9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fb21 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ab4:	f000 f898 	bl	8002be8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_I2C_MspInit+0xb4>)
 8002aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_I2C_MspInit+0xb4>)
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <HAL_I2C_MspInit+0xb4>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad8:	2312      	movs	r3, #18
 8002ada:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aea:	2304      	movs	r3, #4
 8002aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002af4:	4619      	mov	r1, r3
 8002af6:	480b      	ldr	r0, [pc, #44]	; (8002b24 <HAL_I2C_MspInit+0xb8>)
 8002af8:	f001 fad4 	bl	80040a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_I2C_MspInit+0xb4>)
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <HAL_I2C_MspInit+0xb4>)
 8002b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b06:	6593      	str	r3, [r2, #88]	; 0x58
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <HAL_I2C_MspInit+0xb4>)
 8002b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002b14:	bf00      	nop
 8002b16:	37b0      	adds	r7, #176	; 0xb0
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	40021000 	.word	0x40021000
 8002b24:	48000400 	.word	0x48000400

08002b28 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b096      	sub	sp, #88	; 0x58
 8002b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2e:	f107 0314 	add.w	r3, r7, #20
 8002b32:	2244      	movs	r2, #68	; 0x44
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 f800 	bl	8007b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b4a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b4e:	f002 fc7b 	bl	8005448 <HAL_PWREx_ControlVoltageScaling>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf14      	ite	ne
 8002b58:	2301      	movne	r3, #1
 8002b5a:	2300      	moveq	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8002b62:	f000 f841 	bl	8002be8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b66:	2302      	movs	r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b70:	2310      	movs	r3, #16
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b74:	2302      	movs	r3, #2
 8002b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b80:	230a      	movs	r3, #10
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b84:	2307      	movs	r3, #7
 8002b86:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fcad 	bl	80054f4 <HAL_RCC_OscConfig>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8002baa:	f000 f81d 	bl	8002be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bae:	230f      	movs	r3, #15
 8002bb0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 f86e 	bl	8005ca8 <HAL_RCC_ClockConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8002bdc:	f000 f804 	bl	8002be8 <Error_Handler>
  }
}
 8002be0:	bf00      	nop
 8002be2:	3758      	adds	r7, #88	; 0x58
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bec:	b672      	cpsid	i
}
 8002bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <Error_Handler+0x8>
	...

08002bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b094      	sub	sp, #80	; 0x50
 8002bf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bfa:	f001 f8cc 	bl	8003d96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bfe:	f7ff ff93 	bl	8002b28 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c02:	f7ff fe9b 	bl	800293c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002c06:	f7ff fef1 	bl	80029ec <MX_I2C1_Init>
  MX_TIM6_Init();
 8002c0a:	f000 fd8f 	bl	800372c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8002c0e:	f000 fe29 	bl	8003864 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002c12:	f000 fdf3 	bl	80037fc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
// TIMER
  HAL_TIM_Base_Start(&htim6);
 8002c16:	4876      	ldr	r0, [pc, #472]	; (8002df0 <main+0x1fc>)
 8002c18:	f003 ff7e 	bl	8006b18 <HAL_TIM_Base_Start>
// MAX30102
  DFRobot_BloodOxygen_S_I2C MAX30102(0x57);
 8002c1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c20:	2157      	movs	r1, #87	; 0x57
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fa1e 	bl	8001064 <_ZN25DFRobot_BloodOxygen_S_I2CC1Eh>
  MAX30102.sensorStartCollect();
 8002c28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fa05 	bl	800103c <_ZN21DFRobot_BloodOxygen_S18sensorStartCollectEv>
// BME280
  if(BME280_Init() != BME280_OK)
 8002c32:	f7ff fcff 	bl	8002634 <BME280_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <main+0x58>
  {
	  printf("Blad inicjalizacji BME280!\n");
 8002c46:	486b      	ldr	r0, [pc, #428]	; (8002df4 <main+0x200>)
 8002c48:	f005 fc70 	bl	800852c <puts>
  }
// DS18B20
  uint8_t ds18b20_rom_code[DS18B20_ROM_CODE_SIZE];
  if (DS18B20_Read_Address(ds18b20_rom_code) != HAL_OK) {
 8002c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fd8d 	bl	8002770 <DS18B20_Read_Address>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf14      	ite	ne
 8002c5c:	2301      	movne	r3, #1
 8002c5e:	2300      	moveq	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <main+0x7c>
    printf("Blad inicjalizacji DS18B20!\r\n");
 8002c66:	4864      	ldr	r0, [pc, #400]	; (8002df8 <main+0x204>)
 8002c68:	f005 fc60 	bl	800852c <puts>
    Error_Handler();
 8002c6c:	f7ff ffbc 	bl	8002be8 <Error_Handler>
  }
//SSD1306
  SSD1306_Init();
 8002c70:	f000 f984 	bl	8002f7c <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 8002c74:	2100      	movs	r1, #0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f000 faea 	bl	8003250 <SSD1306_GotoXY>
  SSD1306_Puts("STARTING", &Font_11x18, (SSD1306_COLOR_t)1);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	495f      	ldr	r1, [pc, #380]	; (8002dfc <main+0x208>)
 8002c80:	485f      	ldr	r0, [pc, #380]	; (8002e00 <main+0x20c>)
 8002c82:	f000 fb7b 	bl	800337c <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8002c86:	211e      	movs	r1, #30
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f000 fae1 	bl	8003250 <SSD1306_GotoXY>
  SSD1306_Puts("DEVICE", &Font_11x18, (SSD1306_COLOR_t)1);
 8002c8e:	2201      	movs	r2, #1
 8002c90:	495a      	ldr	r1, [pc, #360]	; (8002dfc <main+0x208>)
 8002c92:	485c      	ldr	r0, [pc, #368]	; (8002e04 <main+0x210>)
 8002c94:	f000 fb72 	bl	800337c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8002c98:	f000 fa34 	bl	8003104 <SSD1306_UpdateScreen>
  DELAY_ms (1000);
 8002c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ca0:	f000 f8de 	bl	8002e60 <DELAY_ms>
  SSD1306_ScrollRight(0,7);
 8002ca4:	2107      	movs	r1, #7
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 f8f2 	bl	8002e90 <SSD1306_ScrollRight>
  DELAY_ms(3000);
 8002cac:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cb0:	f000 f8d6 	bl	8002e60 <DELAY_ms>
  SSD1306_ScrollLeft(0,7);
 8002cb4:	2107      	movs	r1, #7
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f000 f920 	bl	8002efc <SSD1306_ScrollLeft>
  DELAY_ms(3000);
 8002cbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cc0:	f000 f8ce 	bl	8002e60 <DELAY_ms>
  SSD1306_Stopscroll();
 8002cc4:	f000 f950 	bl	8002f68 <SSD1306_Stopscroll>
  SSD1306_Clear();
 8002cc8:	f000 fb7d 	bl	80033c6 <SSD1306_Clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
// MAX30102
  MAX30102.getHeartbeatSPO2();
 8002ccc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f945 	bl	8000f60 <_ZN21DFRobot_BloodOxygen_S16getHeartbeatSPO2Ev>
  printf("SpO2 = %d, Heart Rate: %d, Board temperature: %0.2f \r\n", MAX30102._sHeartbeatSPO2.SPO2, MAX30102._sHeartbeatSPO2.Heartbeat, MAX30102.getTemperature_C());
 8002cd6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002cd8:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8002cda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe f976 	bl	8000fd0 <_ZN21DFRobot_BloodOxygen_S16getTemperature_CEv>
 8002ce4:	ee10 3a10 	vmov	r3, s0
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc2d 	bl	8000548 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	e9cd 2300 	strd	r2, r3, [sp]
 8002cf6:	462a      	mov	r2, r5
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	4843      	ldr	r0, [pc, #268]	; (8002e08 <main+0x214>)
 8002cfc:	f005 fb90 	bl	8008420 <iprintf>
  DELAY_ms(2000);
 8002d00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d04:	f000 f8ac 	bl	8002e60 <DELAY_ms>

// DS18B20
  DS18B20_Start_Measure(NULL);
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f7ff fda7 	bl	800285c <DS18B20_Start_Measure>

  DELAY_ms(750);
 8002d0e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002d12:	f000 f8a5 	bl	8002e60 <DELAY_ms>

  float temperature = DS18B20_Get_Temp(NULL);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7ff fdea 	bl	80028f0 <DS18B20_Get_Temp>
 8002d1c:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

  if (temperature >= 80.0f) {
 8002d20:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d24:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002e0c <main+0x218>
 8002d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	db03      	blt.n	8002d3a <main+0x146>
    printf("DS18B20 ERROR!\r\n");
 8002d32:	4837      	ldr	r0, [pc, #220]	; (8002e10 <main+0x21c>)
 8002d34:	f005 fbfa 	bl	800852c <puts>
 8002d38:	e007      	b.n	8002d4a <main+0x156>
  } else {
    printf("Temperature = %0.2fC\r\n", temperature);
 8002d3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d3c:	f7fd fc04 	bl	8000548 <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4833      	ldr	r0, [pc, #204]	; (8002e14 <main+0x220>)
 8002d46:	f005 fb6b 	bl	8008420 <iprintf>
  }
//SSD1306
  char max30102_oled_sp02[12];
  sprintf(max30102_oled_sp02, "SpO2: %d", MAX30102._sHeartbeatSPO2.SPO2);
 8002d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4c:	f107 0320 	add.w	r3, r7, #32
 8002d50:	4931      	ldr	r1, [pc, #196]	; (8002e18 <main+0x224>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f005 fc36 	bl	80085c4 <siprintf>

  char max30102_oled_hr[15];
  sprintf(max30102_oled_hr, "Pulse: %d", MAX30102._sHeartbeatSPO2.Heartbeat);
 8002d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d5a:	f107 0310 	add.w	r3, r7, #16
 8002d5e:	492f      	ldr	r1, [pc, #188]	; (8002e1c <main+0x228>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f005 fc2f 	bl	80085c4 <siprintf>

  char temp_oled[15];
  sprintf(temp_oled, "Temp: %0.2fC", temperature);
 8002d66:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d68:	f7fd fbee 	bl	8000548 <__aeabi_f2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4638      	mov	r0, r7
 8002d72:	492b      	ldr	r1, [pc, #172]	; (8002e20 <main+0x22c>)
 8002d74:	f005 fc26 	bl	80085c4 <siprintf>

  SSD1306_Clear();
 8002d78:	f000 fb25 	bl	80033c6 <SSD1306_Clear>
  SSD1306_GotoXY (0,0);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2000      	movs	r0, #0
 8002d80:	f000 fa66 	bl	8003250 <SSD1306_GotoXY>
  SSD1306_Puts(max30102_oled_sp02, &Font_11x18, (SSD1306_COLOR_t)1);
 8002d84:	f107 0320 	add.w	r3, r7, #32
 8002d88:	2201      	movs	r2, #1
 8002d8a:	491c      	ldr	r1, [pc, #112]	; (8002dfc <main+0x208>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 faf5 	bl	800337c <SSD1306_Puts>
  SSD1306_GotoXY (0, 24);
 8002d92:	2118      	movs	r1, #24
 8002d94:	2000      	movs	r0, #0
 8002d96:	f000 fa5b 	bl	8003250 <SSD1306_GotoXY>
  SSD1306_Puts(max30102_oled_hr, &Font_11x18, (SSD1306_COLOR_t)1);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4916      	ldr	r1, [pc, #88]	; (8002dfc <main+0x208>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 faea 	bl	800337c <SSD1306_Puts>
  SSD1306_GotoXY (0, 45);
 8002da8:	212d      	movs	r1, #45	; 0x2d
 8002daa:	2000      	movs	r0, #0
 8002dac:	f000 fa50 	bl	8003250 <SSD1306_GotoXY>
  SSD1306_Puts(temp_oled, &Font_11x18, (SSD1306_COLOR_t)1);
 8002db0:	463b      	mov	r3, r7
 8002db2:	2201      	movs	r2, #1
 8002db4:	4911      	ldr	r1, [pc, #68]	; (8002dfc <main+0x208>)
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fae0 	bl	800337c <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8002dbc:	f000 f9a2 	bl	8003104 <SSD1306_UpdateScreen>

// BME280
	if(BME280_Read_Data(&bme_received_data) != BME280_OK)
 8002dc0:	4818      	ldr	r0, [pc, #96]	; (8002e24 <main+0x230>)
 8002dc2:	f7ff fc99 	bl	80026f8 <BME280_Read_Data>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <main+0x1ea>
	{
		printf("Blad odczytu BME280!\r\n");
 8002dd6:	4814      	ldr	r0, [pc, #80]	; (8002e28 <main+0x234>)
 8002dd8:	f005 fba8 	bl	800852c <puts>
 8002ddc:	e002      	b.n	8002de4 <main+0x1f0>
	}
	else
	{
		BME280_Print_Data(&bme_received_data);
 8002dde:	4811      	ldr	r0, [pc, #68]	; (8002e24 <main+0x230>)
 8002de0:	f7ff fca4 	bl	800272c <BME280_Print_Data>
	}

	DELAY_ms(1000);
 8002de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002de8:	f000 f83a 	bl	8002e60 <DELAY_ms>
   }
 8002dec:	e76e      	b.n	8002ccc <main+0xd8>
 8002dee:	bf00      	nop
 8002df0:	200006c8 	.word	0x200006c8
 8002df4:	0800a9dc 	.word	0x0800a9dc
 8002df8:	0800a9f8 	.word	0x0800a9f8
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	0800aa18 	.word	0x0800aa18
 8002e04:	0800aa24 	.word	0x0800aa24
 8002e08:	0800aa2c 	.word	0x0800aa2c
 8002e0c:	42a00000 	.word	0x42a00000
 8002e10:	0800aa64 	.word	0x0800aa64
 8002e14:	0800aa74 	.word	0x0800aa74
 8002e18:	0800aa8c 	.word	0x0800aa8c
 8002e1c:	0800aa98 	.word	0x0800aa98
 8002e20:	0800aaa4 	.word	0x0800aaa4
 8002e24:	20000248 	.word	0x20000248
 8002e28:	0800aab4 	.word	0x0800aab4

08002e2c <DELAY_us>:

#include "my_delay.h"
#include "tim.h"

void DELAY_us(uint16_t us)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8002e36:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <DELAY_us+0x30>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6) < us) {}
 8002e3e:	bf00      	nop
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <DELAY_us+0x30>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d3f9      	bcc.n	8002e40 <DELAY_us+0x14>
}
 8002e4c:	bf00      	nop
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200006c8 	.word	0x200006c8

08002e60 <DELAY_ms>:

void DELAY_ms(uint16_t ms)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	81fb      	strh	r3, [r7, #14]

	while (counter < ms)
 8002e6e:	e006      	b.n	8002e7e <DELAY_ms+0x1e>
	{
		DELAY_us(1000);
 8002e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e74:	f7ff ffda 	bl	8002e2c <DELAY_us>
		counter++;
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	81fb      	strh	r3, [r7, #14]
	while (counter < ms)
 8002e7e:	89fa      	ldrh	r2, [r7, #14]
 8002e80:	88fb      	ldrh	r3, [r7, #6]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d3f4      	bcc.n	8002e70 <DELAY_ms+0x10>
	}
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	460a      	mov	r2, r1
 8002e9a:	71fb      	strb	r3, [r7, #7]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8002ea0:	2226      	movs	r2, #38	; 0x26
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	2078      	movs	r0, #120	; 0x78
 8002ea6:	f000 faf5 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2078      	movs	r0, #120	; 0x78
 8002eb0:	f000 faf0 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2078      	movs	r0, #120	; 0x78
 8002ebc:	f000 faea 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	2078      	movs	r0, #120	; 0x78
 8002ec6:	f000 fae5 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002eca:	79bb      	ldrb	r3, [r7, #6]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2078      	movs	r0, #120	; 0x78
 8002ed2:	f000 fadf 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	2078      	movs	r0, #120	; 0x78
 8002edc:	f000 fada 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8002ee0:	22ff      	movs	r2, #255	; 0xff
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2078      	movs	r0, #120	; 0x78
 8002ee6:	f000 fad5 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002eea:	222f      	movs	r2, #47	; 0x2f
 8002eec:	2100      	movs	r1, #0
 8002eee:	2078      	movs	r0, #120	; 0x78
 8002ef0:	f000 fad0 	bl	8003494 <ssd1306_I2C_Write>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	460a      	mov	r2, r1
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8002f0c:	2227      	movs	r2, #39	; 0x27
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2078      	movs	r0, #120	; 0x78
 8002f12:	f000 fabf 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	2078      	movs	r0, #120	; 0x78
 8002f1c:	f000 faba 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	461a      	mov	r2, r3
 8002f24:	2100      	movs	r1, #0
 8002f26:	2078      	movs	r0, #120	; 0x78
 8002f28:	f000 fab4 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	2078      	movs	r0, #120	; 0x78
 8002f32:	f000 faaf 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002f36:	79bb      	ldrb	r3, [r7, #6]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	2078      	movs	r0, #120	; 0x78
 8002f3e:	f000 faa9 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	2078      	movs	r0, #120	; 0x78
 8002f48:	f000 faa4 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8002f4c:	22ff      	movs	r2, #255	; 0xff
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2078      	movs	r0, #120	; 0x78
 8002f52:	f000 fa9f 	bl	8003494 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002f56:	222f      	movs	r2, #47	; 0x2f
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2078      	movs	r0, #120	; 0x78
 8002f5c:	f000 fa9a 	bl	8003494 <ssd1306_I2C_Write>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002f6c:	222e      	movs	r2, #46	; 0x2e
 8002f6e:	2100      	movs	r1, #0
 8002f70:	2078      	movs	r0, #120	; 0x78
 8002f72:	f000 fa8f 	bl	8003494 <ssd1306_I2C_Write>
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002f82:	f000 fa29 	bl	80033d8 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002f86:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2178      	movs	r1, #120	; 0x78
 8002f8e:	485b      	ldr	r0, [pc, #364]	; (80030fc <SSD1306_Init+0x180>)
 8002f90:	f001 fe06 	bl	8004ba0 <HAL_I2C_IsDeviceReady>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e0a9      	b.n	80030f2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002f9e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002fa2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fa4:	e002      	b.n	8002fac <SSD1306_Init+0x30>
		p--;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002fb2:	22ae      	movs	r2, #174	; 0xae
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	2078      	movs	r0, #120	; 0x78
 8002fb8:	f000 fa6c 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2078      	movs	r0, #120	; 0x78
 8002fc2:	f000 fa67 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2078      	movs	r0, #120	; 0x78
 8002fcc:	f000 fa62 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002fd0:	22b0      	movs	r2, #176	; 0xb0
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	2078      	movs	r0, #120	; 0x78
 8002fd6:	f000 fa5d 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002fda:	22c8      	movs	r2, #200	; 0xc8
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2078      	movs	r0, #120	; 0x78
 8002fe0:	f000 fa58 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	2078      	movs	r0, #120	; 0x78
 8002fea:	f000 fa53 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002fee:	2210      	movs	r2, #16
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	2078      	movs	r0, #120	; 0x78
 8002ff4:	f000 fa4e 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2078      	movs	r0, #120	; 0x78
 8002ffe:	f000 fa49 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003002:	2281      	movs	r2, #129	; 0x81
 8003004:	2100      	movs	r1, #0
 8003006:	2078      	movs	r0, #120	; 0x78
 8003008:	f000 fa44 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800300c:	22ff      	movs	r2, #255	; 0xff
 800300e:	2100      	movs	r1, #0
 8003010:	2078      	movs	r0, #120	; 0x78
 8003012:	f000 fa3f 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003016:	22a1      	movs	r2, #161	; 0xa1
 8003018:	2100      	movs	r1, #0
 800301a:	2078      	movs	r0, #120	; 0x78
 800301c:	f000 fa3a 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003020:	22a6      	movs	r2, #166	; 0xa6
 8003022:	2100      	movs	r1, #0
 8003024:	2078      	movs	r0, #120	; 0x78
 8003026:	f000 fa35 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800302a:	22a8      	movs	r2, #168	; 0xa8
 800302c:	2100      	movs	r1, #0
 800302e:	2078      	movs	r0, #120	; 0x78
 8003030:	f000 fa30 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003034:	223f      	movs	r2, #63	; 0x3f
 8003036:	2100      	movs	r1, #0
 8003038:	2078      	movs	r0, #120	; 0x78
 800303a:	f000 fa2b 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800303e:	22a4      	movs	r2, #164	; 0xa4
 8003040:	2100      	movs	r1, #0
 8003042:	2078      	movs	r0, #120	; 0x78
 8003044:	f000 fa26 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003048:	22d3      	movs	r2, #211	; 0xd3
 800304a:	2100      	movs	r1, #0
 800304c:	2078      	movs	r0, #120	; 0x78
 800304e:	f000 fa21 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	2078      	movs	r0, #120	; 0x78
 8003058:	f000 fa1c 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800305c:	22d5      	movs	r2, #213	; 0xd5
 800305e:	2100      	movs	r1, #0
 8003060:	2078      	movs	r0, #120	; 0x78
 8003062:	f000 fa17 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003066:	22f0      	movs	r2, #240	; 0xf0
 8003068:	2100      	movs	r1, #0
 800306a:	2078      	movs	r0, #120	; 0x78
 800306c:	f000 fa12 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003070:	22d9      	movs	r2, #217	; 0xd9
 8003072:	2100      	movs	r1, #0
 8003074:	2078      	movs	r0, #120	; 0x78
 8003076:	f000 fa0d 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800307a:	2222      	movs	r2, #34	; 0x22
 800307c:	2100      	movs	r1, #0
 800307e:	2078      	movs	r0, #120	; 0x78
 8003080:	f000 fa08 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003084:	22da      	movs	r2, #218	; 0xda
 8003086:	2100      	movs	r1, #0
 8003088:	2078      	movs	r0, #120	; 0x78
 800308a:	f000 fa03 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800308e:	2212      	movs	r2, #18
 8003090:	2100      	movs	r1, #0
 8003092:	2078      	movs	r0, #120	; 0x78
 8003094:	f000 f9fe 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003098:	22db      	movs	r2, #219	; 0xdb
 800309a:	2100      	movs	r1, #0
 800309c:	2078      	movs	r0, #120	; 0x78
 800309e:	f000 f9f9 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80030a2:	2220      	movs	r2, #32
 80030a4:	2100      	movs	r1, #0
 80030a6:	2078      	movs	r0, #120	; 0x78
 80030a8:	f000 f9f4 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80030ac:	228d      	movs	r2, #141	; 0x8d
 80030ae:	2100      	movs	r1, #0
 80030b0:	2078      	movs	r0, #120	; 0x78
 80030b2:	f000 f9ef 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80030b6:	2214      	movs	r2, #20
 80030b8:	2100      	movs	r1, #0
 80030ba:	2078      	movs	r0, #120	; 0x78
 80030bc:	f000 f9ea 	bl	8003494 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80030c0:	22af      	movs	r2, #175	; 0xaf
 80030c2:	2100      	movs	r1, #0
 80030c4:	2078      	movs	r0, #120	; 0x78
 80030c6:	f000 f9e5 	bl	8003494 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80030ca:	222e      	movs	r2, #46	; 0x2e
 80030cc:	2100      	movs	r1, #0
 80030ce:	2078      	movs	r0, #120	; 0x78
 80030d0:	f000 f9e0 	bl	8003494 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80030d4:	2000      	movs	r0, #0
 80030d6:	f000 f843 	bl	8003160 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80030da:	f000 f813 	bl	8003104 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <SSD1306_Init+0x184>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <SSD1306_Init+0x184>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <SSD1306_Init+0x184>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80030f0:	2301      	movs	r3, #1
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000674 	.word	0x20000674
 8003100:	20000660 	.word	0x20000660

08003104 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800310a:	2300      	movs	r3, #0
 800310c:	71fb      	strb	r3, [r7, #7]
 800310e:	e01d      	b.n	800314c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	3b50      	subs	r3, #80	; 0x50
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	2100      	movs	r1, #0
 800311a:	2078      	movs	r0, #120	; 0x78
 800311c:	f000 f9ba 	bl	8003494 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003120:	2200      	movs	r2, #0
 8003122:	2100      	movs	r1, #0
 8003124:	2078      	movs	r0, #120	; 0x78
 8003126:	f000 f9b5 	bl	8003494 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800312a:	2210      	movs	r2, #16
 800312c:	2100      	movs	r1, #0
 800312e:	2078      	movs	r0, #120	; 0x78
 8003130:	f000 f9b0 	bl	8003494 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	01db      	lsls	r3, r3, #7
 8003138:	4a08      	ldr	r2, [pc, #32]	; (800315c <SSD1306_UpdateScreen+0x58>)
 800313a:	441a      	add	r2, r3
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	2078      	movs	r0, #120	; 0x78
 8003142:	f000 f95f 	bl	8003404 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	3301      	adds	r3, #1
 800314a:	71fb      	strb	r3, [r7, #7]
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	2b07      	cmp	r3, #7
 8003150:	d9de      	bls.n	8003110 <SSD1306_UpdateScreen+0xc>
	}
}
 8003152:	bf00      	nop
 8003154:	bf00      	nop
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20000260 	.word	0x20000260

08003160 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <SSD1306_Fill+0x14>
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <SSD1306_Fill+0x16>
 8003174:	23ff      	movs	r3, #255	; 0xff
 8003176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317a:	4619      	mov	r1, r3
 800317c:	4803      	ldr	r0, [pc, #12]	; (800318c <SSD1306_Fill+0x2c>)
 800317e:	f004 fcdd 	bl	8007b3c <memset>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000260 	.word	0x20000260

08003190 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
 800319a:	460b      	mov	r3, r1
 800319c:	80bb      	strh	r3, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	70fb      	strb	r3, [r7, #3]
	if (
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	2b7f      	cmp	r3, #127	; 0x7f
 80031a6:	d848      	bhi.n	800323a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80031a8:	88bb      	ldrh	r3, [r7, #4]
 80031aa:	2b3f      	cmp	r3, #63	; 0x3f
 80031ac:	d845      	bhi.n	800323a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80031ae:	4b26      	ldr	r3, [pc, #152]	; (8003248 <SSD1306_DrawPixel+0xb8>)
 80031b0:	791b      	ldrb	r3, [r3, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d006      	beq.n	80031c4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf0c      	ite	eq
 80031bc:	2301      	moveq	r3, #1
 80031be:	2300      	movne	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d11a      	bne.n	8003200 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80031ca:	88fa      	ldrh	r2, [r7, #6]
 80031cc:	88bb      	ldrh	r3, [r7, #4]
 80031ce:	08db      	lsrs	r3, r3, #3
 80031d0:	b298      	uxth	r0, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	01db      	lsls	r3, r3, #7
 80031d6:	4413      	add	r3, r2
 80031d8:	4a1c      	ldr	r2, [pc, #112]	; (800324c <SSD1306_DrawPixel+0xbc>)
 80031da:	5cd3      	ldrb	r3, [r2, r3]
 80031dc:	b25a      	sxtb	r2, r3
 80031de:	88bb      	ldrh	r3, [r7, #4]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b259      	sxtb	r1, r3
 80031f0:	88fa      	ldrh	r2, [r7, #6]
 80031f2:	4603      	mov	r3, r0
 80031f4:	01db      	lsls	r3, r3, #7
 80031f6:	4413      	add	r3, r2
 80031f8:	b2c9      	uxtb	r1, r1
 80031fa:	4a14      	ldr	r2, [pc, #80]	; (800324c <SSD1306_DrawPixel+0xbc>)
 80031fc:	54d1      	strb	r1, [r2, r3]
 80031fe:	e01d      	b.n	800323c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	88bb      	ldrh	r3, [r7, #4]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	b298      	uxth	r0, r3
 8003208:	4603      	mov	r3, r0
 800320a:	01db      	lsls	r3, r3, #7
 800320c:	4413      	add	r3, r2
 800320e:	4a0f      	ldr	r2, [pc, #60]	; (800324c <SSD1306_DrawPixel+0xbc>)
 8003210:	5cd3      	ldrb	r3, [r2, r3]
 8003212:	b25a      	sxtb	r2, r3
 8003214:	88bb      	ldrh	r3, [r7, #4]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	2101      	movs	r1, #1
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	b25b      	sxtb	r3, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	b25b      	sxtb	r3, r3
 8003226:	4013      	ands	r3, r2
 8003228:	b259      	sxtb	r1, r3
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	4603      	mov	r3, r0
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	4413      	add	r3, r2
 8003232:	b2c9      	uxtb	r1, r1
 8003234:	4a05      	ldr	r2, [pc, #20]	; (800324c <SSD1306_DrawPixel+0xbc>)
 8003236:	54d1      	strb	r1, [r2, r3]
 8003238:	e000      	b.n	800323c <SSD1306_DrawPixel+0xac>
		return;
 800323a:	bf00      	nop
	}
}
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000660 	.word	0x20000660
 800324c:	20000260 	.word	0x20000260

08003250 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	460a      	mov	r2, r1
 800325a:	80fb      	strh	r3, [r7, #6]
 800325c:	4613      	mov	r3, r2
 800325e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003260:	4a05      	ldr	r2, [pc, #20]	; (8003278 <SSD1306_GotoXY+0x28>)
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003266:	4a04      	ldr	r2, [pc, #16]	; (8003278 <SSD1306_GotoXY+0x28>)
 8003268:	88bb      	ldrh	r3, [r7, #4]
 800326a:	8053      	strh	r3, [r2, #2]
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	20000660 	.word	0x20000660

0800327c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
 8003288:	4613      	mov	r3, r2
 800328a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800328c:	4b3a      	ldr	r3, [pc, #232]	; (8003378 <SSD1306_Putc+0xfc>)
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	461a      	mov	r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
	if (
 8003298:	2b7f      	cmp	r3, #127	; 0x7f
 800329a:	dc07      	bgt.n	80032ac <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <SSD1306_Putc+0xfc>)
 800329e:	885b      	ldrh	r3, [r3, #2]
 80032a0:	461a      	mov	r2, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80032a8:	2b3f      	cmp	r3, #63	; 0x3f
 80032aa:	dd01      	ble.n	80032b0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e05e      	b.n	800336e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	e04b      	b.n	800334e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	3b20      	subs	r3, #32
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	7849      	ldrb	r1, [r1, #1]
 80032c2:	fb01 f303 	mul.w	r3, r1, r3
 80032c6:	4619      	mov	r1, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	440b      	add	r3, r1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e030      	b.n	800333c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d010      	beq.n	800330c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80032ea:	4b23      	ldr	r3, [pc, #140]	; (8003378 <SSD1306_Putc+0xfc>)
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	4413      	add	r3, r2
 80032f4:	b298      	uxth	r0, r3
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <SSD1306_Putc+0xfc>)
 80032f8:	885a      	ldrh	r2, [r3, #2]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4413      	add	r3, r2
 8003300:	b29b      	uxth	r3, r3
 8003302:	79ba      	ldrb	r2, [r7, #6]
 8003304:	4619      	mov	r1, r3
 8003306:	f7ff ff43 	bl	8003190 <SSD1306_DrawPixel>
 800330a:	e014      	b.n	8003336 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800330c:	4b1a      	ldr	r3, [pc, #104]	; (8003378 <SSD1306_Putc+0xfc>)
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4413      	add	r3, r2
 8003316:	b298      	uxth	r0, r3
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <SSD1306_Putc+0xfc>)
 800331a:	885a      	ldrh	r2, [r3, #2]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	b29b      	uxth	r3, r3
 8003320:	4413      	add	r3, r2
 8003322:	b299      	uxth	r1, r3
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	f7ff ff2d 	bl	8003190 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3301      	adds	r3, #1
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4293      	cmp	r3, r2
 8003346:	d3c8      	bcc.n	80032da <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	3301      	adds	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	785b      	ldrb	r3, [r3, #1]
 8003352:	461a      	mov	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	4293      	cmp	r3, r2
 8003358:	d3ad      	bcc.n	80032b6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <SSD1306_Putc+0xfc>)
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	4413      	add	r3, r2
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <SSD1306_Putc+0xfc>)
 800336a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800336c:	79fb      	ldrb	r3, [r7, #7]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000660 	.word	0x20000660

0800337c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	4613      	mov	r3, r2
 8003388:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800338a:	e012      	b.n	80033b2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff ff71 	bl	800327c <SSD1306_Putc>
 800339a:	4603      	mov	r3, r0
 800339c:	461a      	mov	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d002      	beq.n	80033ac <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	e008      	b.n	80033be <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3301      	adds	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1e8      	bne.n	800338c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	781b      	ldrb	r3, [r3, #0]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7ff fec8 	bl	8003160 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80033d0:	f7ff fe98 	bl	8003104 <SSD1306_UpdateScreen>
}
 80033d4:	bf00      	nop
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <ssd1306_I2C_Init+0x28>)
 80033e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033e2:	e002      	b.n	80033ea <ssd1306_I2C_Init+0x12>
		p--;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3b01      	subs	r3, #1
 80033e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f9      	bne.n	80033e4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80033f0:	bf00      	nop
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	0003d090 	.word	0x0003d090

08003404 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b0c7      	sub	sp, #284	; 0x11c
 8003408:	af02      	add	r7, sp, #8
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	4639      	mov	r1, r7
 8003410:	600a      	str	r2, [r1, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	1dfb      	adds	r3, r7, #7
 8003416:	4622      	mov	r2, r4
 8003418:	701a      	strb	r2, [r3, #0]
 800341a:	1dbb      	adds	r3, r7, #6
 800341c:	4602      	mov	r2, r0
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	460a      	mov	r2, r1
 8003424:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003426:	f107 030c 	add.w	r3, r7, #12
 800342a:	1dba      	adds	r2, r7, #6
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003430:	2300      	movs	r3, #0
 8003432:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003436:	e010      	b.n	800345a <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8003438:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800343c:	463a      	mov	r2, r7
 800343e:	6812      	ldr	r2, [r2, #0]
 8003440:	441a      	add	r2, r3
 8003442:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003446:	3301      	adds	r3, #1
 8003448:	7811      	ldrb	r1, [r2, #0]
 800344a:	f107 020c 	add.w	r2, r7, #12
 800344e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003450:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003454:	3301      	adds	r3, #1
 8003456:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800345a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800345e:	b29b      	uxth	r3, r3
 8003460:	1d3a      	adds	r2, r7, #4
 8003462:	8812      	ldrh	r2, [r2, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d8e7      	bhi.n	8003438 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b299      	uxth	r1, r3
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	b29b      	uxth	r3, r3
 8003476:	f107 020c 	add.w	r2, r7, #12
 800347a:	200a      	movs	r0, #10
 800347c:	9000      	str	r0, [sp, #0]
 800347e:	4804      	ldr	r0, [pc, #16]	; (8003490 <ssd1306_I2C_WriteMulti+0x8c>)
 8003480:	f001 f86c 	bl	800455c <HAL_I2C_Master_Transmit>
}
 8003484:	bf00      	nop
 8003486:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800348a:	46bd      	mov	sp, r7
 800348c:	bd90      	pop	{r4, r7, pc}
 800348e:	bf00      	nop
 8003490:	20000674 	.word	0x20000674

08003494 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af02      	add	r7, sp, #8
 800349a:	4603      	mov	r3, r0
 800349c:	71fb      	strb	r3, [r7, #7]
 800349e:	460b      	mov	r3, r1
 80034a0:	71bb      	strb	r3, [r7, #6]
 80034a2:	4613      	mov	r3, r2
 80034a4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80034a6:	79bb      	ldrb	r3, [r7, #6]
 80034a8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80034aa:	797b      	ldrb	r3, [r7, #5]
 80034ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	b299      	uxth	r1, r3
 80034b2:	f107 020c 	add.w	r2, r7, #12
 80034b6:	230a      	movs	r3, #10
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2302      	movs	r3, #2
 80034bc:	4803      	ldr	r0, [pc, #12]	; (80034cc <ssd1306_I2C_Write+0x38>)
 80034be:	f001 f84d 	bl	800455c <HAL_I2C_Master_Transmit>
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000674 	.word	0x20000674

080034d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <HAL_MspInit+0x44>)
 80034d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <HAL_MspInit+0x44>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	6613      	str	r3, [r2, #96]	; 0x60
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <HAL_MspInit+0x44>)
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	607b      	str	r3, [r7, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_MspInit+0x44>)
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	4a08      	ldr	r2, [pc, #32]	; (8003514 <HAL_MspInit+0x44>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6593      	str	r3, [r2, #88]	; 0x58
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_MspInit+0x44>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40021000 	.word	0x40021000

08003518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800351c:	e7fe      	b.n	800351c <NMI_Handler+0x4>

0800351e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003522:	e7fe      	b.n	8003522 <HardFault_Handler+0x4>

08003524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <MemManage_Handler+0x4>

0800352a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800352e:	e7fe      	b.n	800352e <BusFault_Handler+0x4>

08003530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003534:	e7fe      	b.n	8003534 <UsageFault_Handler+0x4>

08003536 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003564:	f000 fc6c 	bl	8003e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003568:	bf00      	nop
 800356a:	bd80      	pop	{r7, pc}

0800356c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003570:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003574:	f000 ff40 	bl	80043f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003578:	bf00      	nop
 800357a:	bd80      	pop	{r7, pc}

0800357c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
	return 1;
 8003580:	2301      	movs	r3, #1
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <_kill>:

int _kill(int pid, int sig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003596:	f004 faa7 	bl	8007ae8 <__errno>
 800359a:	4603      	mov	r3, r0
 800359c:	2216      	movs	r2, #22
 800359e:	601a      	str	r2, [r3, #0]
	return -1;
 80035a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_exit>:

void _exit (int status)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ffe7 	bl	800358c <_kill>
	while (1) {}		/* Make sure we hang here */
 80035be:	e7fe      	b.n	80035be <_exit+0x12>

080035c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	e00a      	b.n	80035e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035d2:	f3af 8000 	nop.w
 80035d6:	4601      	mov	r1, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	60ba      	str	r2, [r7, #8]
 80035de:	b2ca      	uxtb	r2, r1
 80035e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	3301      	adds	r3, #1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	dbf0      	blt.n	80035d2 <_read+0x12>
	}

return len;
 80035f0:	687b      	ldr	r3, [r7, #4]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	e009      	b.n	8003620 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	1c5a      	adds	r2, r3, #1
 8003610:	60ba      	str	r2, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 f8df 	bl	80037d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	dbf1      	blt.n	800360c <_write+0x12>
	}
	return len;
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_close>:

int _close(int file)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
	return -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800365a:	605a      	str	r2, [r3, #4]
	return 0;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <_isatty>:

int _isatty(int file)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
	return 1;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
	return 0;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <_sbrk+0x5c>)
 80036a6:	4b15      	ldr	r3, [pc, #84]	; (80036fc <_sbrk+0x60>)
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <_sbrk+0x64>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <_sbrk+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d207      	bcs.n	80036dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036cc:	f004 fa0c 	bl	8007ae8 <__errno>
 80036d0:	4603      	mov	r3, r0
 80036d2:	220c      	movs	r2, #12
 80036d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e009      	b.n	80036f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <_sbrk+0x64>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e2:	4b07      	ldr	r3, [pc, #28]	; (8003700 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	4a05      	ldr	r2, [pc, #20]	; (8003700 <_sbrk+0x64>)
 80036ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20018000 	.word	0x20018000
 80036fc:	00000400 	.word	0x00000400
 8003700:	20000668 	.word	0x20000668
 8003704:	20000938 	.word	0x20000938

08003708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <SystemInit+0x20>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <SystemInit+0x20>)
 8003714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003732:	1d3b      	adds	r3, r7, #4
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <MX_TIM6_Init+0x64>)
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <MX_TIM6_Init+0x68>)
 8003740:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8003742:	4b13      	ldr	r3, [pc, #76]	; (8003790 <MX_TIM6_Init+0x64>)
 8003744:	224f      	movs	r2, #79	; 0x4f
 8003746:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <MX_TIM6_Init+0x64>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <MX_TIM6_Init+0x64>)
 8003750:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003754:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <MX_TIM6_Init+0x64>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800375c:	480c      	ldr	r0, [pc, #48]	; (8003790 <MX_TIM6_Init+0x64>)
 800375e:	f003 f983 	bl	8006a68 <HAL_TIM_Base_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003768:	f7ff fa3e 	bl	8002be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800376c:	2300      	movs	r3, #0
 800376e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003774:	1d3b      	adds	r3, r7, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4805      	ldr	r0, [pc, #20]	; (8003790 <MX_TIM6_Init+0x64>)
 800377a:	f003 facf 	bl	8006d1c <HAL_TIMEx_MasterConfigSynchronization>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003784:	f7ff fa30 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200006c8 	.word	0x200006c8
 8003794:	40001000 	.word	0x40001000

08003798 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_TIM_Base_MspInit+0x38>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10b      	bne.n	80037c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_TIM_Base_MspInit+0x3c>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <HAL_TIM_Base_MspInit+0x3c>)
 80037b0:	f043 0310 	orr.w	r3, r3, #16
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_TIM_Base_MspInit+0x3c>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80037c2:	bf00      	nop
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40001000 	.word	0x40001000
 80037d4:	40021000 	.word	0x40021000

080037d8 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 1000);
 80037e0:	1d39      	adds	r1, r7, #4
 80037e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037e6:	2201      	movs	r2, #1
 80037e8:	4803      	ldr	r0, [pc, #12]	; (80037f8 <__io_putchar+0x20>)
 80037ea:	f003 fbc3 	bl	8006f74 <HAL_UART_Transmit>
	return ch;
 80037ee:	687b      	ldr	r3, [r7, #4]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	200008a0 	.word	0x200008a0

080037fc <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003800:	4b16      	ldr	r3, [pc, #88]	; (800385c <MX_UART4_Init+0x60>)
 8003802:	4a17      	ldr	r2, [pc, #92]	; (8003860 <MX_UART4_Init+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <MX_UART4_Init+0x60>)
 8003808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800380c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <MX_UART4_Init+0x60>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <MX_UART4_Init+0x60>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <MX_UART4_Init+0x60>)
 800381c:	2200      	movs	r2, #0
 800381e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003820:	4b0e      	ldr	r3, [pc, #56]	; (800385c <MX_UART4_Init+0x60>)
 8003822:	220c      	movs	r2, #12
 8003824:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <MX_UART4_Init+0x60>)
 8003828:	2200      	movs	r2, #0
 800382a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <MX_UART4_Init+0x60>)
 800382e:	2200      	movs	r2, #0
 8003830:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <MX_UART4_Init+0x60>)
 8003834:	2200      	movs	r2, #0
 8003836:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <MX_UART4_Init+0x60>)
 800383a:	2210      	movs	r2, #16
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <MX_UART4_Init+0x60>)
 8003840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <MX_UART4_Init+0x60>)
 8003848:	f003 fb3e 	bl	8006ec8 <HAL_HalfDuplex_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8003852:	f7ff f9c9 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003856:	bf00      	nop
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	2000081c 	.word	0x2000081c
 8003860:	40004c00 	.word	0x40004c00

08003864 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003868:	4b14      	ldr	r3, [pc, #80]	; (80038bc <MX_USART2_UART_Init+0x58>)
 800386a:	4a15      	ldr	r2, [pc, #84]	; (80038c0 <MX_USART2_UART_Init+0x5c>)
 800386c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800386e:	4b13      	ldr	r3, [pc, #76]	; (80038bc <MX_USART2_UART_Init+0x58>)
 8003870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003876:	4b11      	ldr	r3, [pc, #68]	; (80038bc <MX_USART2_UART_Init+0x58>)
 8003878:	2200      	movs	r2, #0
 800387a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <MX_USART2_UART_Init+0x58>)
 800387e:	2200      	movs	r2, #0
 8003880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_USART2_UART_Init+0x58>)
 8003884:	2200      	movs	r2, #0
 8003886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_USART2_UART_Init+0x58>)
 800388a:	220c      	movs	r2, #12
 800388c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <MX_USART2_UART_Init+0x58>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <MX_USART2_UART_Init+0x58>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <MX_USART2_UART_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_USART2_UART_Init+0x58>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038a6:	4805      	ldr	r0, [pc, #20]	; (80038bc <MX_USART2_UART_Init+0x58>)
 80038a8:	f003 fac0 	bl	8006e2c <HAL_UART_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038b2:	f7ff f999 	bl	8002be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200008a0 	.word	0x200008a0
 80038c0:	40004400 	.word	0x40004400

080038c4 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b0b2      	sub	sp, #200	; 0xc8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	605a      	str	r2, [r3, #4]
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	60da      	str	r2, [r3, #12]
 80038da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038e0:	2288      	movs	r2, #136	; 0x88
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 f929 	bl	8007b3c <memset>
  if(uartHandle->Instance==UART4)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a84      	ldr	r2, [pc, #528]	; (8003b00 <HAL_UART_MspInit+0x23c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d13c      	bne.n	800396e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80038f4:	2308      	movs	r3, #8
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80038f8:	2300      	movs	r3, #0
 80038fa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fbf5 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800390c:	f7ff f96c 	bl	8002be8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003910:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003914:	4a7b      	ldr	r2, [pc, #492]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003916:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800391a:	6593      	str	r3, [r2, #88]	; 0x58
 800391c:	4b79      	ldr	r3, [pc, #484]	; (8003b04 <HAL_UART_MspInit+0x240>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003928:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_UART_MspInit+0x240>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <HAL_UART_MspInit+0x240>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003934:	4b73      	ldr	r3, [pc, #460]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	627b      	str	r3, [r7, #36]	; 0x24
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003940:	2301      	movs	r3, #1
 8003942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003946:	2312      	movs	r3, #18
 8003948:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394c:	2301      	movs	r3, #1
 800394e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003958:	2308      	movs	r3, #8
 800395a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003962:	4619      	mov	r1, r3
 8003964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003968:	f000 fb9c 	bl	80040a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800396c:	e0c4      	b.n	8003af8 <HAL_UART_MspInit+0x234>
  else if(uartHandle->Instance==USART1)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_UART_MspInit+0x244>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d13d      	bne.n	80039f4 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003978:	2301      	movs	r3, #1
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800397c:	2300      	movs	r3, #0
 800397e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003984:	4618      	mov	r0, r3
 8003986:	f002 fbb3 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003990:	f7ff f92a 	bl	8002be8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003994:	4b5b      	ldr	r3, [pc, #364]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	4a5a      	ldr	r2, [pc, #360]	; (8003b04 <HAL_UART_MspInit+0x240>)
 800399a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399e:	6613      	str	r3, [r2, #96]	; 0x60
 80039a0:	4b58      	ldr	r3, [pc, #352]	; (8003b04 <HAL_UART_MspInit+0x240>)
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a8:	623b      	str	r3, [r7, #32]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	4b55      	ldr	r3, [pc, #340]	; (8003b04 <HAL_UART_MspInit+0x240>)
 80039ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b0:	4a54      	ldr	r2, [pc, #336]	; (8003b04 <HAL_UART_MspInit+0x240>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b8:	4b52      	ldr	r3, [pc, #328]	; (8003b04 <HAL_UART_MspInit+0x240>)
 80039ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
 80039c2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039de:	2307      	movs	r3, #7
 80039e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80039e8:	4619      	mov	r1, r3
 80039ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ee:	f000 fb59 	bl	80040a4 <HAL_GPIO_Init>
}
 80039f2:	e081      	b.n	8003af8 <HAL_UART_MspInit+0x234>
  else if(uartHandle->Instance==USART2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a44      	ldr	r2, [pc, #272]	; (8003b0c <HAL_UART_MspInit+0x248>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d13c      	bne.n	8003a78 <HAL_UART_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80039fe:	2302      	movs	r3, #2
 8003a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a02:	2300      	movs	r3, #0
 8003a04:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f002 fb70 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_UART_MspInit+0x156>
      Error_Handler();
 8003a16:	f7ff f8e7 	bl	8002be8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a1a:	4b3a      	ldr	r3, [pc, #232]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	4a39      	ldr	r2, [pc, #228]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	6593      	str	r3, [r2, #88]	; 0x58
 8003a26:	4b37      	ldr	r3, [pc, #220]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	4b34      	ldr	r3, [pc, #208]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	4a33      	ldr	r2, [pc, #204]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3e:	4b31      	ldr	r3, [pc, #196]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a62:	2307      	movs	r3, #7
 8003a64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a72:	f000 fb17 	bl	80040a4 <HAL_GPIO_Init>
}
 8003a76:	e03f      	b.n	8003af8 <HAL_UART_MspInit+0x234>
  else if(uartHandle->Instance==USART3)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <HAL_UART_MspInit+0x24c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d13a      	bne.n	8003af8 <HAL_UART_MspInit+0x234>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003a82:	2304      	movs	r3, #4
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a86:	2300      	movs	r3, #0
 8003a88:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f002 fb2e 	bl	80060f0 <HAL_RCCEx_PeriphCLKConfig>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_UART_MspInit+0x1da>
      Error_Handler();
 8003a9a:	f7ff f8a5 	bl	8002be8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a9e:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aaa:	4b16      	ldr	r3, [pc, #88]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ab6:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ac2:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <HAL_UART_MspInit+0x240>)
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ace:	2330      	movs	r3, #48	; 0x30
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4808      	ldr	r0, [pc, #32]	; (8003b14 <HAL_UART_MspInit+0x250>)
 8003af4:	f000 fad6 	bl	80040a4 <HAL_GPIO_Init>
}
 8003af8:	bf00      	nop
 8003afa:	37c8      	adds	r7, #200	; 0xc8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40004c00 	.word	0x40004c00
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	40004400 	.word	0x40004400
 8003b10:	40004800 	.word	0x40004800
 8003b14:	48000800 	.word	0x48000800

08003b18 <Set_Baud_Rate>:

#include "wire.h"
#include "usart.h"

static void Set_Baud_Rate(uint32_t baudrate)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  huart4.Instance = UART4;
 8003b20:	4b16      	ldr	r3, [pc, #88]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b22:	4a17      	ldr	r2, [pc, #92]	; (8003b80 <Set_Baud_Rate+0x68>)
 8003b24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = baudrate;
 8003b26:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6053      	str	r3, [r2, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003b2c:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003b3e:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b40:	220c      	movs	r2, #12
 8003b42:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b50:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b58:	2210      	movs	r2, #16
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b62:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8003b64:	4805      	ldr	r0, [pc, #20]	; (8003b7c <Set_Baud_Rate+0x64>)
 8003b66:	f003 f9af 	bl	8006ec8 <HAL_HalfDuplex_Init>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <Set_Baud_Rate+0x5c>
  {
    Error_Handler();
 8003b70:	f7ff f83a 	bl	8002be8 <Error_Handler>
  }
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	2000081c 	.word	0x2000081c
 8003b80:	40004c00 	.word	0x40004c00

08003b84 <Wire_Reset>:

HAL_StatusTypeDef Wire_Reset(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
    uint8_t data_tx = 0xF0;
 8003b8a:	23f0      	movs	r3, #240	; 0xf0
 8003b8c:	71fb      	strb	r3, [r7, #7]
    uint8_t data_rx = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	71bb      	strb	r3, [r7, #6]

    Set_Baud_Rate(9600);
 8003b92:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003b96:	f7ff ffbf 	bl	8003b18 <Set_Baud_Rate>
    HAL_UART_Transmit(&huart4, &data_tx, 1, HAL_MAX_DELAY);
 8003b9a:	1df9      	adds	r1, r7, #7
 8003b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	480c      	ldr	r0, [pc, #48]	; (8003bd4 <Wire_Reset+0x50>)
 8003ba4:	f003 f9e6 	bl	8006f74 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart4, &data_rx, 1, HAL_MAX_DELAY);
 8003ba8:	1db9      	adds	r1, r7, #6
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <Wire_Reset+0x50>)
 8003bb2:	f003 fa73 	bl	800709c <HAL_UART_Receive>
    Set_Baud_Rate(115200);
 8003bb6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003bba:	f7ff ffad 	bl	8003b18 <Set_Baud_Rate>

    if (data_rx != 0xF0)
 8003bbe:	79bb      	ldrb	r3, [r7, #6]
 8003bc0:	2bf0      	cmp	r3, #240	; 0xf0
 8003bc2:	d001      	beq.n	8003bc8 <Wire_Reset+0x44>
        return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e000      	b.n	8003bca <Wire_Reset+0x46>
    else
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	2000081c 	.word	0x2000081c

08003bd8 <Read_Bit>:

static int Read_Bit(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
    uint8_t data_tx = 0xFF;
 8003bde:	23ff      	movs	r3, #255	; 0xff
 8003be0:	71fb      	strb	r3, [r7, #7]
    uint8_t data_rx = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	71bb      	strb	r3, [r7, #6]
    HAL_UART_Transmit(&huart4, &data_tx, 1, HAL_MAX_DELAY);
 8003be6:	1df9      	adds	r1, r7, #7
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	2201      	movs	r2, #1
 8003bee:	4808      	ldr	r0, [pc, #32]	; (8003c10 <Read_Bit+0x38>)
 8003bf0:	f003 f9c0 	bl	8006f74 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart4, &data_rx, 1, HAL_MAX_DELAY);
 8003bf4:	1db9      	adds	r1, r7, #6
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4804      	ldr	r0, [pc, #16]	; (8003c10 <Read_Bit+0x38>)
 8003bfe:	f003 fa4d 	bl	800709c <HAL_UART_Receive>

    return data_rx & 0x01; // read last significant bit
 8003c02:	79bb      	ldrb	r3, [r7, #6]
 8003c04:	f003 0301 	and.w	r3, r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	2000081c 	.word	0x2000081c

08003c14 <Wire_Read>:

uint8_t Wire_Read(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
    uint8_t received = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	e00e      	b.n	8003c42 <Wire_Read+0x2e>
        received >>= 1;
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	71fb      	strb	r3, [r7, #7]
        if (Read_Bit())
 8003c2a:	f7ff ffd5 	bl	8003bd8 <Read_Bit>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <Wire_Read+0x28>
            received |= 0x80;
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c3a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b07      	cmp	r3, #7
 8003c46:	dded      	ble.n	8003c24 <Wire_Read+0x10>
    }
    return received;
 8003c48:	79fb      	ldrb	r3, [r7, #7]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
	...

08003c54 <Write_Bit>:

static void Write_Bit(int value)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
    if (value) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <Write_Bit+0x24>
        uint8_t data_tx = 0xff;
 8003c62:	23ff      	movs	r3, #255	; 0xff
 8003c64:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart4, &data_tx, 1, HAL_MAX_DELAY);
 8003c66:	f107 010f 	add.w	r1, r7, #15
 8003c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c6e:	2201      	movs	r2, #1
 8003c70:	4808      	ldr	r0, [pc, #32]	; (8003c94 <Write_Bit+0x40>)
 8003c72:	f003 f97f 	bl	8006f74 <HAL_UART_Transmit>
    } else {
        uint8_t data_tx = 0x0;
        HAL_UART_Transmit(&huart4, &data_tx, 1, HAL_MAX_DELAY);
    }
}
 8003c76:	e009      	b.n	8003c8c <Write_Bit+0x38>
        uint8_t data_tx = 0x0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73bb      	strb	r3, [r7, #14]
        HAL_UART_Transmit(&huart4, &data_tx, 1, HAL_MAX_DELAY);
 8003c7c:	f107 010e 	add.w	r1, r7, #14
 8003c80:	f04f 33ff 	mov.w	r3, #4294967295
 8003c84:	2201      	movs	r2, #1
 8003c86:	4803      	ldr	r0, [pc, #12]	; (8003c94 <Write_Bit+0x40>)
 8003c88:	f003 f974 	bl	8006f74 <HAL_UART_Transmit>
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	2000081c 	.word	0x2000081c

08003c98 <Wire_Write>:

void Wire_Write(uint8_t byte)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	e00b      	b.n	8003cc0 <Wire_Write+0x28>
        Write_Bit(byte & 0x01);
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff ffd0 	bl	8003c54 <Write_Bit>
        byte >>= 1;
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b07      	cmp	r3, #7
 8003cc4:	ddf0      	ble.n	8003ca8 <Wire_Write+0x10>
    }
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <Wire_Crc>:

uint8_t Wire_Crc(const uint8_t* data, int length)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
    uint8_t crc_code = 0;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
 	 while (length--) {
 8003cde:	e024      	b.n	8003d2a <Wire_Crc+0x5a>

 		 uint8_t byte = *data; //byte = *(data++) ->
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	75bb      	strb	r3, [r7, #22]
 		 data = data + 1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	607b      	str	r3, [r7, #4]

 		 for (int i = 0; i<8; i++) {
 8003cec:	2300      	movs	r3, #0
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e018      	b.n	8003d24 <Wire_Crc+0x54>
 			 	 uint8_t val = (crc_code ^ byte);
 8003cf2:	7dfa      	ldrb	r2, [r7, #23]
 8003cf4:	7dbb      	ldrb	r3, [r7, #22]
 8003cf6:	4053      	eors	r3, r2
 8003cf8:	73fb      	strb	r3, [r7, #15]
 			 	 val = val & 0x01;
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 			 	 crc_code >>= 1;
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	085b      	lsrs	r3, r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
 			 	 if (val) {
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d004      	beq.n	8003d18 <Wire_Crc+0x48>
 			 		 crc_code ^= 0x8C;
 8003d0e:	7dfb      	ldrb	r3, [r7, #23]
 8003d10:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003d14:	43db      	mvns	r3, r3
 8003d16:	75fb      	strb	r3, [r7, #23]
 			    }
 			 	 byte >>= 1;
 8003d18:	7dbb      	ldrb	r3, [r7, #22]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	75bb      	strb	r3, [r7, #22]
 		 for (int i = 0; i<8; i++) {
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3301      	adds	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b07      	cmp	r3, #7
 8003d28:	dde3      	ble.n	8003cf2 <Wire_Crc+0x22>
 	 while (length--) {
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	603a      	str	r2, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1d5      	bne.n	8003ce0 <Wire_Crc+0x10>
 		}

 	}
 	 return crc_code;
 8003d34:	7dfb      	ldrb	r3, [r7, #23]
 8003d36:	4618      	mov	r0, r3
 8003d38:	371c      	adds	r7, #28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
	...

08003d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d48:	f7ff fcde 	bl	8003708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d4c:	480c      	ldr	r0, [pc, #48]	; (8003d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d4e:	490d      	ldr	r1, [pc, #52]	; (8003d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d50:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <LoopForever+0xe>)
  movs r3, #0
 8003d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d54:	e002      	b.n	8003d5c <LoopCopyDataInit>

08003d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d5a:	3304      	adds	r3, #4

08003d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d60:	d3f9      	bcc.n	8003d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d64:	4c0a      	ldr	r4, [pc, #40]	; (8003d90 <LoopForever+0x16>)
  movs r3, #0
 8003d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d68:	e001      	b.n	8003d6e <LoopFillZerobss>

08003d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d6c:	3204      	adds	r2, #4

08003d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d70:	d3fb      	bcc.n	8003d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d72:	f003 febf 	bl	8007af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d76:	f7fe ff3d 	bl	8002bf4 <main>

08003d7a <LoopForever>:

LoopForever:
    b LoopForever
 8003d7a:	e7fe      	b.n	8003d7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d84:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003d88:	0800bc84 	.word	0x0800bc84
  ldr r2, =_sbss
 8003d8c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003d90:	20000938 	.word	0x20000938

08003d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d94:	e7fe      	b.n	8003d94 <ADC1_2_IRQHandler>

08003d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da0:	2003      	movs	r0, #3
 8003da2:	f000 f93d 	bl	8004020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003da6:	200f      	movs	r0, #15
 8003da8:	f000 f80e 	bl	8003dc8 <HAL_InitTick>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	71fb      	strb	r3, [r7, #7]
 8003db6:	e001      	b.n	8003dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003db8:	f7ff fb8a 	bl	80034d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_InitTick+0x6c>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d023      	beq.n	8003e24 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ddc:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <HAL_InitTick+0x70>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_InitTick+0x6c>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f949 	bl	800408a <HAL_SYSTICK_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10f      	bne.n	8003e1e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d809      	bhi.n	8003e18 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e04:	2200      	movs	r2, #0
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0c:	f000 f913 	bl	8004036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_InitTick+0x74>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e007      	b.n	8003e28 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	e004      	b.n	8003e28 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	e001      	b.n	8003e28 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000010 	.word	0x20000010
 8003e38:	20000008 	.word	0x20000008
 8003e3c:	2000000c 	.word	0x2000000c

08003e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_IncTick+0x20>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <HAL_IncTick+0x24>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_IncTick+0x24>)
 8003e52:	6013      	str	r3, [r2, #0]
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000010 	.word	0x20000010
 8003e64:	20000924 	.word	0x20000924

08003e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_GetTick+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000924 	.word	0x20000924

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fec:	d301      	bcc.n	8003ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00f      	b.n	8004012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <SysTick_Config+0x40>)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffa:	210f      	movs	r1, #15
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f7ff ff8e 	bl	8003f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <SysTick_Config+0x40>)
 8004006:	2200      	movs	r2, #0
 8004008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400a:	4b04      	ldr	r3, [pc, #16]	; (800401c <SysTick_Config+0x40>)
 800400c:	2207      	movs	r2, #7
 800400e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	e000e010 	.word	0xe000e010

08004020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff29 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004048:	f7ff ff3e 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 800404c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6978      	ldr	r0, [r7, #20]
 8004054:	f7ff ff8e 	bl	8003f74 <NVIC_EncodePriority>
 8004058:	4602      	mov	r2, r0
 800405a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff ff5d 	bl	8003f20 <__NVIC_SetPriority>
}
 8004066:	bf00      	nop
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	4603      	mov	r3, r0
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff31 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <SysTick_Config>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e17f      	b.n	80043b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8171 	beq.w	80043ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d118      	bne.n	8004184 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004158:	2201      	movs	r2, #1
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	43db      	mvns	r3, r3
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	08db      	lsrs	r3, r3, #3
 800416e:	f003 0201 	and.w	r2, r3, #1
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	2b03      	cmp	r3, #3
 800418e:	d017      	beq.n	80041c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	2203      	movs	r2, #3
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	43db      	mvns	r3, r3
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4013      	ands	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d123      	bne.n	8004214 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	08da      	lsrs	r2, r3, #3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	3208      	adds	r2, #8
 80041d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	08da      	lsrs	r2, r3, #3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3208      	adds	r2, #8
 800420e:	6939      	ldr	r1, [r7, #16]
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4013      	ands	r3, r2
 800422a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f003 0203 	and.w	r2, r3, #3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80ac 	beq.w	80043ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004256:	4b5f      	ldr	r3, [pc, #380]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_GPIO_Init+0x330>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6613      	str	r3, [r2, #96]	; 0x60
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_GPIO_Init+0x330>)
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800426e:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <HAL_GPIO_Init+0x334>)
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3302      	adds	r3, #2
 8004276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004298:	d025      	beq.n	80042e6 <HAL_GPIO_Init+0x242>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a4f      	ldr	r2, [pc, #316]	; (80043dc <HAL_GPIO_Init+0x338>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01f      	beq.n	80042e2 <HAL_GPIO_Init+0x23e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a4e      	ldr	r2, [pc, #312]	; (80043e0 <HAL_GPIO_Init+0x33c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d019      	beq.n	80042de <HAL_GPIO_Init+0x23a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a4d      	ldr	r2, [pc, #308]	; (80043e4 <HAL_GPIO_Init+0x340>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <HAL_GPIO_Init+0x236>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a4c      	ldr	r2, [pc, #304]	; (80043e8 <HAL_GPIO_Init+0x344>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00d      	beq.n	80042d6 <HAL_GPIO_Init+0x232>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a4b      	ldr	r2, [pc, #300]	; (80043ec <HAL_GPIO_Init+0x348>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <HAL_GPIO_Init+0x22e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a4a      	ldr	r2, [pc, #296]	; (80043f0 <HAL_GPIO_Init+0x34c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d101      	bne.n	80042ce <HAL_GPIO_Init+0x22a>
 80042ca:	2306      	movs	r3, #6
 80042cc:	e00c      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042ce:	2307      	movs	r3, #7
 80042d0:	e00a      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042d2:	2305      	movs	r3, #5
 80042d4:	e008      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e006      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042da:	2303      	movs	r3, #3
 80042dc:	e004      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042de:	2302      	movs	r3, #2
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x244>
 80042e6:	2300      	movs	r3, #0
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	f002 0203 	and.w	r2, r2, #3
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	4093      	lsls	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f8:	4937      	ldr	r1, [pc, #220]	; (80043d8 <HAL_GPIO_Init+0x334>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43db      	mvns	r3, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800432a:	4a32      	ldr	r2, [pc, #200]	; (80043f4 <HAL_GPIO_Init+0x350>)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004330:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004354:	4a27      	ldr	r2, [pc, #156]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_GPIO_Init+0x350>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800437e:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_GPIO_Init+0x350>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043a8:	4a12      	ldr	r2, [pc, #72]	; (80043f4 <HAL_GPIO_Init+0x350>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa22 f303 	lsr.w	r3, r2, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f47f ae78 	bne.w	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40010000 	.word	0x40010000
 80043dc:	48000400 	.word	0x48000400
 80043e0:	48000800 	.word	0x48000800
 80043e4:	48000c00 	.word	0x48000c00
 80043e8:	48001000 	.word	0x48001000
 80043ec:	48001400 	.word	0x48001400
 80043f0:	48001800 	.word	0x48001800
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	4013      	ands	r3, r2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d006      	beq.n	800441c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800440e:	4a05      	ldr	r2, [pc, #20]	; (8004424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f806 	bl	8004428 <HAL_GPIO_EXTI_Callback>
  }
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40010400 	.word	0x40010400

08004428 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e081      	b.n	8004554 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f7fe fb01 	bl	8002a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2224      	movs	r2, #36	; 0x24
 800446e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0201 	bic.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800448e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b4:	609a      	str	r2, [r3, #8]
 80044b6:	e006      	b.n	80044c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d104      	bne.n	80044d8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044fa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691a      	ldr	r2, [r3, #16]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69d9      	ldr	r1, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1a      	ldr	r2, [r3, #32]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 0201 	orr.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	461a      	mov	r2, r3
 8004568:	460b      	mov	r3, r1
 800456a:	817b      	strh	r3, [r7, #10]
 800456c:	4613      	mov	r3, r2
 800456e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b20      	cmp	r3, #32
 800457a:	f040 80da 	bne.w	8004732 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_I2C_Master_Transmit+0x30>
 8004588:	2302      	movs	r3, #2
 800458a:	e0d3      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004594:	f7ff fc68 	bl	8003e68 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	2319      	movs	r3, #25
 80045a0:	2201      	movs	r2, #1
 80045a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fcce 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0be      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2221      	movs	r2, #33	; 0x21
 80045ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2210      	movs	r2, #16
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	893a      	ldrh	r2, [r7, #8]
 80045d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2bff      	cmp	r3, #255	; 0xff
 80045e6:	d90e      	bls.n	8004606 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	22ff      	movs	r2, #255	; 0xff
 80045ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	8979      	ldrh	r1, [r7, #10]
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <HAL_I2C_Master_Transmit+0x1e0>)
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fe4a 	bl	8005298 <I2C_TransferConfig>
 8004604:	e06c      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004614:	b2da      	uxtb	r2, r3
 8004616:	8979      	ldrh	r1, [r7, #10]
 8004618:	4b48      	ldr	r3, [pc, #288]	; (800473c <HAL_I2C_Master_Transmit+0x1e0>)
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fe39 	bl	8005298 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004626:	e05b      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	6a39      	ldr	r1, [r7, #32]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 fccb 	bl	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e07b      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	1c5a      	adds	r2, r3, #1
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d034      	beq.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d130      	bne.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	2200      	movs	r2, #0
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	f000 fc5d 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e04d      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29b      	uxth	r3, r3
 800469e:	2bff      	cmp	r3, #255	; 0xff
 80046a0:	d90e      	bls.n	80046c0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	8979      	ldrh	r1, [r7, #10]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fded 	bl	8005298 <I2C_TransferConfig>
 80046be:	e00f      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	8979      	ldrh	r1, [r7, #10]
 80046d2:	2300      	movs	r3, #0
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 fddc 	bl	8005298 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d19e      	bne.n	8004628 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	6a39      	ldr	r1, [r7, #32]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fcaa 	bl	8005048 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e01a      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2220      	movs	r2, #32
 8004704:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_I2C_Master_Transmit+0x1e4>)
 8004712:	400b      	ands	r3, r1
 8004714:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	e000      	b.n	8004734 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004732:	2302      	movs	r3, #2
  }
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	80002000 	.word	0x80002000
 8004740:	fe00e800 	.word	0xfe00e800

08004744 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	4608      	mov	r0, r1
 800474e:	4611      	mov	r1, r2
 8004750:	461a      	mov	r2, r3
 8004752:	4603      	mov	r3, r0
 8004754:	817b      	strh	r3, [r7, #10]
 8004756:	460b      	mov	r3, r1
 8004758:	813b      	strh	r3, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b20      	cmp	r3, #32
 8004768:	f040 80f9 	bne.w	800495e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_I2C_Mem_Write+0x34>
 8004772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0ed      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_I2C_Mem_Write+0x4e>
 800478e:	2302      	movs	r3, #2
 8004790:	e0e6      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800479a:	f7ff fb65 	bl	8003e68 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2319      	movs	r3, #25
 80047a6:	2201      	movs	r2, #1
 80047a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fbcb 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0d1      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2221      	movs	r2, #33	; 0x21
 80047c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2240      	movs	r2, #64	; 0x40
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a3a      	ldr	r2, [r7, #32]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047e4:	88f8      	ldrh	r0, [r7, #6]
 80047e6:	893a      	ldrh	r2, [r7, #8]
 80047e8:	8979      	ldrh	r1, [r7, #10]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	9301      	str	r3, [sp, #4]
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	4603      	mov	r3, r0
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fadb 	bl	8004db0 <I2C_RequestMemoryWrite>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0a9      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004810:	b29b      	uxth	r3, r3
 8004812:	2bff      	cmp	r3, #255	; 0xff
 8004814:	d90e      	bls.n	8004834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	b2da      	uxtb	r2, r3
 8004822:	8979      	ldrh	r1, [r7, #10]
 8004824:	2300      	movs	r3, #0
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 fd33 	bl	8005298 <I2C_TransferConfig>
 8004832:	e00f      	b.n	8004854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004838:	b29a      	uxth	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004842:	b2da      	uxtb	r2, r3
 8004844:	8979      	ldrh	r1, [r7, #10]
 8004846:	2300      	movs	r3, #0
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 fd22 	bl	8005298 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 fbb5 	bl	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e07b      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	3b01      	subs	r3, #1
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d034      	beq.n	800490c <HAL_I2C_Mem_Write+0x1c8>
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d130      	bne.n	800490c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	2200      	movs	r2, #0
 80048b2:	2180      	movs	r1, #128	; 0x80
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fb47 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e04d      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2bff      	cmp	r3, #255	; 0xff
 80048cc:	d90e      	bls.n	80048ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	8979      	ldrh	r1, [r7, #10]
 80048dc:	2300      	movs	r3, #0
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fcd7 	bl	8005298 <I2C_TransferConfig>
 80048ea:	e00f      	b.n	800490c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	8979      	ldrh	r1, [r7, #10]
 80048fe:	2300      	movs	r3, #0
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fcc6 	bl	8005298 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d19e      	bne.n	8004854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fb94 	bl	8005048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e01a      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2220      	movs	r2, #32
 8004930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_I2C_Mem_Write+0x224>)
 800493e:	400b      	ands	r3, r1
 8004940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e000      	b.n	8004960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
  }
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	fe00e800 	.word	0xfe00e800

0800496c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	461a      	mov	r2, r3
 800497a:	4603      	mov	r3, r0
 800497c:	817b      	strh	r3, [r7, #10]
 800497e:	460b      	mov	r3, r1
 8004980:	813b      	strh	r3, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b20      	cmp	r3, #32
 8004990:	f040 80fd 	bne.w	8004b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_I2C_Mem_Read+0x34>
 800499a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0f1      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_I2C_Mem_Read+0x4e>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e0ea      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049c2:	f7ff fa51 	bl	8003e68 <HAL_GetTick>
 80049c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2319      	movs	r3, #25
 80049ce:	2201      	movs	r2, #1
 80049d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 fab7 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0d5      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2222      	movs	r2, #34	; 0x22
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2240      	movs	r2, #64	; 0x40
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a0c:	88f8      	ldrh	r0, [r7, #6]
 8004a0e:	893a      	ldrh	r2, [r7, #8]
 8004a10:	8979      	ldrh	r1, [r7, #10]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fa1b 	bl	8004e58 <I2C_RequestMemoryRead>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0ad      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2bff      	cmp	r3, #255	; 0xff
 8004a3c:	d90e      	bls.n	8004a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	22ff      	movs	r2, #255	; 0xff
 8004a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	8979      	ldrh	r1, [r7, #10]
 8004a4c:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_I2C_Mem_Read+0x22c>)
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fc1f 	bl	8005298 <I2C_TransferConfig>
 8004a5a:	e00f      	b.n	8004a7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	8979      	ldrh	r1, [r7, #10]
 8004a6e:	4b4a      	ldr	r3, [pc, #296]	; (8004b98 <HAL_I2C_Mem_Read+0x22c>)
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 fc0e 	bl	8005298 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a82:	2200      	movs	r2, #0
 8004a84:	2104      	movs	r1, #4
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa5e 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07c      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d034      	beq.n	8004b3c <HAL_I2C_Mem_Read+0x1d0>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d130      	bne.n	8004b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	2180      	movs	r1, #128	; 0x80
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fa2f 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e04d      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2bff      	cmp	r3, #255	; 0xff
 8004afc:	d90e      	bls.n	8004b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	22ff      	movs	r2, #255	; 0xff
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	8979      	ldrh	r1, [r7, #10]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fbbf 	bl	8005298 <I2C_TransferConfig>
 8004b1a:	e00f      	b.n	8004b3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	8979      	ldrh	r1, [r7, #10]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fbae 	bl	8005298 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d19a      	bne.n	8004a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fa7c 	bl	8005048 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e01a      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6859      	ldr	r1, [r3, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_I2C_Mem_Read+0x230>)
 8004b6e:	400b      	ands	r3, r1
 8004b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e000      	b.n	8004b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
  }
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	80002400 	.word	0x80002400
 8004b9c:	fe00e800 	.word	0xfe00e800

08004ba0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b08a      	sub	sp, #40	; 0x28
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	460b      	mov	r3, r1
 8004bae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	f040 80f1 	bne.w	8004da4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e0e7      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_I2C_IsDeviceReady+0x44>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e0e0      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d107      	bne.n	8004c12 <HAL_I2C_IsDeviceReady+0x72>
 8004c02:	897b      	ldrh	r3, [r7, #10]
 8004c04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c10:	e004      	b.n	8004c1c <HAL_I2C_IsDeviceReady+0x7c>
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004c22:	f7ff f921 	bl	8003e68 <HAL_GetTick>
 8004c26:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	bf0c      	ite	eq
 8004c36:	2301      	moveq	r3, #1
 8004c38:	2300      	movne	r3, #0
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004c54:	e034      	b.n	8004cc0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5c:	d01a      	beq.n	8004c94 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7ff f903 	bl	8003e68 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <HAL_I2C_IsDeviceReady+0xd4>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10f      	bne.n	8004c94 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	f043 0220 	orr.w	r2, r3, #32
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e088      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b20      	cmp	r3, #32
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	bf0c      	ite	eq
 8004cb8:	2301      	moveq	r3, #1
 8004cba:	2300      	movne	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004cc0:	7ffb      	ldrb	r3, [r7, #31]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <HAL_I2C_IsDeviceReady+0x12c>
 8004cc6:	7fbb      	ldrb	r3, [r7, #30]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d0c4      	beq.n	8004c56 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	2b10      	cmp	r3, #16
 8004cd8:	d01a      	beq.n	8004d10 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f92f 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e058      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	e04a      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2120      	movs	r1, #32
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 f914 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e03d      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2220      	movs	r2, #32
 8004d38:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d118      	bne.n	8004d74 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d50:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f8f3 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e01c      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2220      	movs	r2, #32
 8004d72:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3301      	adds	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	f63f af3b 	bhi.w	8004bfa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	4608      	mov	r0, r1
 8004dba:	4611      	mov	r1, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	817b      	strh	r3, [r7, #10]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	813b      	strh	r3, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dca:	88fb      	ldrh	r3, [r7, #6]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	8979      	ldrh	r1, [r7, #10]
 8004dd0:	4b20      	ldr	r3, [pc, #128]	; (8004e54 <I2C_RequestMemoryWrite+0xa4>)
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fa5d 	bl	8005298 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dde:	69fa      	ldr	r2, [r7, #28]
 8004de0:	69b9      	ldr	r1, [r7, #24]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f8f0 	bl	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e02c      	b.n	8004e4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004df8:	893b      	ldrh	r3, [r7, #8]
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	629a      	str	r2, [r3, #40]	; 0x28
 8004e02:	e015      	b.n	8004e30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f8d6 	bl	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e012      	b.n	8004e4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e26:	893b      	ldrh	r3, [r7, #8]
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	9300      	str	r3, [sp, #0]
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	2200      	movs	r2, #0
 8004e38:	2180      	movs	r1, #128	; 0x80
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f884 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	80002000 	.word	0x80002000

08004e58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	817b      	strh	r3, [r7, #10]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	813b      	strh	r3, [r7, #8]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e72:	88fb      	ldrh	r3, [r7, #6]
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	8979      	ldrh	r1, [r7, #10]
 8004e78:	4b20      	ldr	r3, [pc, #128]	; (8004efc <I2C_RequestMemoryRead+0xa4>)
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 fa0a 	bl	8005298 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f89d 	bl	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e02c      	b.n	8004ef2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e98:	88fb      	ldrh	r3, [r7, #6]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d105      	bne.n	8004eaa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9e:	893b      	ldrh	r3, [r7, #8]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ea8:	e015      	b.n	8004ed6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004eaa:	893b      	ldrh	r3, [r7, #8]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb8:	69fa      	ldr	r2, [r7, #28]
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f883 	bl	8004fc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e012      	b.n	8004ef2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ecc:	893b      	ldrh	r3, [r7, #8]
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2140      	movs	r1, #64	; 0x40
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f831 	bl	8004f48 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	80002000 	.word	0x80002000

08004f00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d103      	bne.n	8004f1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d007      	beq.n	8004f3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	619a      	str	r2, [r3, #24]
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f58:	e022      	b.n	8004fa0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f60:	d01e      	beq.n	8004fa0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f62:	f7fe ff81 	bl	8003e68 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d302      	bcc.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d113      	bne.n	8004fa0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	f043 0220 	orr.w	r2, r3, #32
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e00f      	b.n	8004fc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	4013      	ands	r3, r2
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d0cd      	beq.n	8004f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fd4:	e02c      	b.n	8005030 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f870 	bl	80050c0 <I2C_IsErrorOccurred>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e02a      	b.n	8005040 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff0:	d01e      	beq.n	8005030 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff2:	f7fe ff39 	bl	8003e68 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d302      	bcc.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d113      	bne.n	8005030 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e007      	b.n	8005040 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d1cb      	bne.n	8004fd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005054:	e028      	b.n	80050a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	68b9      	ldr	r1, [r7, #8]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f830 	bl	80050c0 <I2C_IsErrorOccurred>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e026      	b.n	80050b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fe fefd 	bl	8003e68 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d113      	bne.n	80050a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e007      	b.n	80050b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f003 0320 	and.w	r3, r3, #32
 80050b2:	2b20      	cmp	r3, #32
 80050b4:	d1cf      	bne.n	8005056 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	f003 0310 	and.w	r3, r3, #16
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d075      	beq.n	80051d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2210      	movs	r2, #16
 80050f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80050f4:	e056      	b.n	80051a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d052      	beq.n	80051a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050fe:	f7fe feb3 	bl	8003e68 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	429a      	cmp	r2, r3
 800510c:	d302      	bcc.n	8005114 <I2C_IsErrorOccurred+0x54>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d147      	bne.n	80051a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800511e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005126:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005136:	d12e      	bne.n	8005196 <I2C_IsErrorOccurred+0xd6>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800513e:	d02a      	beq.n	8005196 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005140:	7cfb      	ldrb	r3, [r7, #19]
 8005142:	2b20      	cmp	r3, #32
 8005144:	d027      	beq.n	8005196 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005154:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005156:	f7fe fe87 	bl	8003e68 <HAL_GetTick>
 800515a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800515c:	e01b      	b.n	8005196 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800515e:	f7fe fe83 	bl	8003e68 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b19      	cmp	r3, #25
 800516a:	d914      	bls.n	8005196 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005170:	f043 0220 	orr.w	r2, r3, #32
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d1dc      	bne.n	800515e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d003      	beq.n	80051ba <I2C_IsErrorOccurred+0xfa>
 80051b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d09d      	beq.n	80050f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80051ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2220      	movs	r2, #32
 80051c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00b      	beq.n	8005202 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	f043 0301 	orr.w	r3, r3, #1
 80051f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	f043 0308 	orr.w	r3, r3, #8
 8005212:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800521c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	f043 0302 	orr.w	r3, r3, #2
 8005234:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800523e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01c      	beq.n	8005288 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff fe56 	bl	8004f00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6859      	ldr	r1, [r3, #4]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	4b0d      	ldr	r3, [pc, #52]	; (8005294 <I2C_IsErrorOccurred+0x1d4>)
 8005260:	400b      	ands	r3, r1
 8005262:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	431a      	orrs	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	fe00e800 	.word	0xfe00e800

08005298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	607b      	str	r3, [r7, #4]
 80052a2:	460b      	mov	r3, r1
 80052a4:	817b      	strh	r3, [r7, #10]
 80052a6:	4613      	mov	r3, r2
 80052a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052aa:	897b      	ldrh	r3, [r7, #10]
 80052ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052b0:	7a7b      	ldrb	r3, [r7, #9]
 80052b2:	041b      	lsls	r3, r3, #16
 80052b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	0d5b      	lsrs	r3, r3, #21
 80052d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <I2C_TransferConfig+0x60>)
 80052d8:	430b      	orrs	r3, r1
 80052da:	43db      	mvns	r3, r3
 80052dc:	ea02 0103 	and.w	r1, r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	03ff63ff 	.word	0x03ff63ff

080052fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b20      	cmp	r3, #32
 8005310:	d138      	bne.n	8005384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800531c:	2302      	movs	r3, #2
 800531e:	e032      	b.n	8005386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2224      	movs	r2, #36	; 0x24
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800534e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005392:	b480      	push	{r7}
 8005394:	b085      	sub	sp, #20
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d139      	bne.n	800541c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e033      	b.n	800541e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2224      	movs	r2, #36	; 0x24
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 0201 	bic.w	r2, r2, #1
 80053d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80053e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <HAL_PWREx_GetVoltageRange+0x18>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40007000 	.word	0x40007000

08005448 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005456:	d130      	bne.n	80054ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005458:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005464:	d038      	beq.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005466:	4b20      	ldr	r3, [pc, #128]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800546e:	4a1e      	ldr	r2, [pc, #120]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005474:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005476:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2232      	movs	r2, #50	; 0x32
 800547c:	fb02 f303 	mul.w	r3, r2, r3
 8005480:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	0c9b      	lsrs	r3, r3, #18
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800548c:	e002      	b.n	8005494 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3b01      	subs	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a0:	d102      	bne.n	80054a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f2      	bne.n	800548e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054a8:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d110      	bne.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e00f      	b.n	80054da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c6:	d007      	beq.n	80054d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054c8:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054d0:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40007000 	.word	0x40007000
 80054ec:	20000008 	.word	0x20000008
 80054f0:	431bde83 	.word	0x431bde83

080054f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e3c6      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005506:	4ba1      	ldr	r3, [pc, #644]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005510:	4b9e      	ldr	r3, [pc, #632]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0303 	and.w	r3, r3, #3
 8005518:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80e4 	beq.w	80056f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_RCC_OscConfig+0x4a>
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b0c      	cmp	r3, #12
 8005532:	f040 808b 	bne.w	800564c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b01      	cmp	r3, #1
 800553a:	f040 8087 	bne.w	800564c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800553e:	4b93      	ldr	r3, [pc, #588]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <HAL_RCC_OscConfig+0x62>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e39e      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	4b8c      	ldr	r3, [pc, #560]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <HAL_RCC_OscConfig+0x7c>
 8005566:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800556e:	e005      	b.n	800557c <HAL_RCC_OscConfig+0x88>
 8005570:	4b86      	ldr	r3, [pc, #536]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800557c:	4293      	cmp	r3, r2
 800557e:	d223      	bcs.n	80055c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fd53 	bl	8006030 <RCC_SetFlashLatencyFromMSIRange>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e37f      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005594:	4b7d      	ldr	r3, [pc, #500]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a7c      	ldr	r2, [pc, #496]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800559a:	f043 0308 	orr.w	r3, r3, #8
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	4b7a      	ldr	r3, [pc, #488]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	4977      	ldr	r1, [pc, #476]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055b2:	4b76      	ldr	r3, [pc, #472]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	4972      	ldr	r1, [pc, #456]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	604b      	str	r3, [r1, #4]
 80055c6:	e025      	b.n	8005614 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055c8:	4b70      	ldr	r3, [pc, #448]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6f      	ldr	r2, [pc, #444]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055ce:	f043 0308 	orr.w	r3, r3, #8
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b6d      	ldr	r3, [pc, #436]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	496a      	ldr	r1, [pc, #424]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055e6:	4b69      	ldr	r3, [pc, #420]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	4965      	ldr	r1, [pc, #404]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fd13 	bl	8006030 <RCC_SetFlashLatencyFromMSIRange>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e33f      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005614:	f000 fc48 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b5c      	ldr	r3, [pc, #368]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	091b      	lsrs	r3, r3, #4
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	495a      	ldr	r1, [pc, #360]	; (8005790 <HAL_RCC_OscConfig+0x29c>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
 8005630:	4a58      	ldr	r2, [pc, #352]	; (8005794 <HAL_RCC_OscConfig+0x2a0>)
 8005632:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005634:	4b58      	ldr	r3, [pc, #352]	; (8005798 <HAL_RCC_OscConfig+0x2a4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe fbc5 	bl	8003dc8 <HAL_InitTick>
 800563e:	4603      	mov	r3, r0
 8005640:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d052      	beq.n	80056ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	e323      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d032      	beq.n	80056ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005654:	4b4d      	ldr	r3, [pc, #308]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a4c      	ldr	r2, [pc, #304]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005660:	f7fe fc02 	bl	8003e68 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005668:	f7fe fbfe 	bl	8003e68 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e30c      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800567a:	4b44      	ldr	r3, [pc, #272]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005686:	4b41      	ldr	r3, [pc, #260]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a40      	ldr	r2, [pc, #256]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800568c:	f043 0308 	orr.w	r3, r3, #8
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	4b3e      	ldr	r3, [pc, #248]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	493b      	ldr	r1, [pc, #236]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80056a0:	4313      	orrs	r3, r2
 80056a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a4:	4b39      	ldr	r3, [pc, #228]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	4936      	ldr	r1, [pc, #216]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
 80056b8:	e01a      	b.n	80056f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056ba:	4b34      	ldr	r3, [pc, #208]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a33      	ldr	r2, [pc, #204]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056c6:	f7fe fbcf 	bl	8003e68 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056ce:	f7fe fbcb 	bl	8003e68 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e2d9      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056e0:	4b2a      	ldr	r3, [pc, #168]	; (800578c <HAL_RCC_OscConfig+0x298>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f0      	bne.n	80056ce <HAL_RCC_OscConfig+0x1da>
 80056ec:	e000      	b.n	80056f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d074      	beq.n	80057e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d005      	beq.n	800570e <HAL_RCC_OscConfig+0x21a>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	2b0c      	cmp	r3, #12
 8005706:	d10e      	bne.n	8005726 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d10b      	bne.n	8005726 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800570e:	4b1f      	ldr	r3, [pc, #124]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d064      	beq.n	80057e4 <HAL_RCC_OscConfig+0x2f0>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d160      	bne.n	80057e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e2b6      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800572e:	d106      	bne.n	800573e <HAL_RCC_OscConfig+0x24a>
 8005730:	4b16      	ldr	r3, [pc, #88]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a15      	ldr	r2, [pc, #84]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	e01d      	b.n	800577a <HAL_RCC_OscConfig+0x286>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005746:	d10c      	bne.n	8005762 <HAL_RCC_OscConfig+0x26e>
 8005748:	4b10      	ldr	r3, [pc, #64]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0f      	ldr	r2, [pc, #60]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800574e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b0d      	ldr	r3, [pc, #52]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0c      	ldr	r2, [pc, #48]	; (800578c <HAL_RCC_OscConfig+0x298>)
 800575a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	e00b      	b.n	800577a <HAL_RCC_OscConfig+0x286>
 8005762:	4b0a      	ldr	r3, [pc, #40]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b07      	ldr	r3, [pc, #28]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a06      	ldr	r2, [pc, #24]	; (800578c <HAL_RCC_OscConfig+0x298>)
 8005774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005778:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d01c      	beq.n	80057bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005782:	f7fe fb71 	bl	8003e68 <HAL_GetTick>
 8005786:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005788:	e011      	b.n	80057ae <HAL_RCC_OscConfig+0x2ba>
 800578a:	bf00      	nop
 800578c:	40021000 	.word	0x40021000
 8005790:	0800b848 	.word	0x0800b848
 8005794:	20000008 	.word	0x20000008
 8005798:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800579c:	f7fe fb64 	bl	8003e68 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b64      	cmp	r3, #100	; 0x64
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e272      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057ae:	4baf      	ldr	r3, [pc, #700]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f0      	beq.n	800579c <HAL_RCC_OscConfig+0x2a8>
 80057ba:	e014      	b.n	80057e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057bc:	f7fe fb54 	bl	8003e68 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057c4:	f7fe fb50 	bl	8003e68 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b64      	cmp	r3, #100	; 0x64
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e25e      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057d6:	4ba5      	ldr	r3, [pc, #660]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x2d0>
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d060      	beq.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_OscConfig+0x310>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b0c      	cmp	r3, #12
 80057fc:	d119      	bne.n	8005832 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d116      	bne.n	8005832 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005804:	4b99      	ldr	r3, [pc, #612]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_RCC_OscConfig+0x328>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e23b      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581c:	4b93      	ldr	r3, [pc, #588]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	061b      	lsls	r3, r3, #24
 800582a:	4990      	ldr	r1, [pc, #576]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800582c:	4313      	orrs	r3, r2
 800582e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005830:	e040      	b.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d023      	beq.n	8005882 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800583a:	4b8c      	ldr	r3, [pc, #560]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a8b      	ldr	r2, [pc, #556]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fe fb0f 	bl	8003e68 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584e:	f7fe fb0b 	bl	8003e68 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e219      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005860:	4b82      	ldr	r3, [pc, #520]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586c:	4b7f      	ldr	r3, [pc, #508]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	061b      	lsls	r3, r3, #24
 800587a:	497c      	ldr	r1, [pc, #496]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]
 8005880:	e018      	b.n	80058b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005882:	4b7a      	ldr	r3, [pc, #488]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a79      	ldr	r2, [pc, #484]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fe faeb 	bl	8003e68 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005896:	f7fe fae7 	bl	8003e68 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e1f5      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058a8:	4b70      	ldr	r3, [pc, #448]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1f0      	bne.n	8005896 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d03c      	beq.n	800593a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01c      	beq.n	8005902 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058c8:	4b68      	ldr	r3, [pc, #416]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80058ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ce:	4a67      	ldr	r2, [pc, #412]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d8:	f7fe fac6 	bl	8003e68 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058e0:	f7fe fac2 	bl	8003e68 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e1d0      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058f2:	4b5e      	ldr	r3, [pc, #376]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80058f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ef      	beq.n	80058e0 <HAL_RCC_OscConfig+0x3ec>
 8005900:	e01b      	b.n	800593a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005902:	4b5a      	ldr	r3, [pc, #360]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005908:	4a58      	ldr	r2, [pc, #352]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005912:	f7fe faa9 	bl	8003e68 <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591a:	f7fe faa5 	bl	8003e68 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e1b3      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800592c:	4b4f      	ldr	r3, [pc, #316]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800592e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ef      	bne.n	800591a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80a6 	beq.w	8005a94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800594c:	4b47      	ldr	r3, [pc, #284]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005958:	4b44      	ldr	r3, [pc, #272]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800595a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595c:	4a43      	ldr	r2, [pc, #268]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005962:	6593      	str	r3, [r2, #88]	; 0x58
 8005964:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005970:	2301      	movs	r3, #1
 8005972:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005974:	4b3e      	ldr	r3, [pc, #248]	; (8005a70 <HAL_RCC_OscConfig+0x57c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d118      	bne.n	80059b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005980:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_RCC_OscConfig+0x57c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a3a      	ldr	r2, [pc, #232]	; (8005a70 <HAL_RCC_OscConfig+0x57c>)
 8005986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800598c:	f7fe fa6c 	bl	8003e68 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005994:	f7fe fa68 	bl	8003e68 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e176      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059a6:	4b32      	ldr	r3, [pc, #200]	; (8005a70 <HAL_RCC_OscConfig+0x57c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d108      	bne.n	80059cc <HAL_RCC_OscConfig+0x4d8>
 80059ba:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c0:	4a2a      	ldr	r2, [pc, #168]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059c2:	f043 0301 	orr.w	r3, r3, #1
 80059c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059ca:	e024      	b.n	8005a16 <HAL_RCC_OscConfig+0x522>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	2b05      	cmp	r3, #5
 80059d2:	d110      	bne.n	80059f6 <HAL_RCC_OscConfig+0x502>
 80059d4:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a24      	ldr	r2, [pc, #144]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059dc:	f043 0304 	orr.w	r3, r3, #4
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059e4:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	4a20      	ldr	r2, [pc, #128]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059ec:	f043 0301 	orr.w	r3, r3, #1
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059f4:	e00f      	b.n	8005a16 <HAL_RCC_OscConfig+0x522>
 80059f6:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	4a1b      	ldr	r2, [pc, #108]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005a06:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005a0e:	f023 0304 	bic.w	r3, r3, #4
 8005a12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fe fa23 	bl	8003e68 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fe fa1f 	bl	8003e68 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e12b      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	; (8005a6c <HAL_RCC_OscConfig+0x578>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0ed      	beq.n	8005a26 <HAL_RCC_OscConfig+0x532>
 8005a4a:	e01a      	b.n	8005a82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a4c:	f7fe fa0c 	bl	8003e68 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a52:	e00f      	b.n	8005a74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a54:	f7fe fa08 	bl	8003e68 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d906      	bls.n	8005a74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e114      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a74:	4b89      	ldr	r3, [pc, #548]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e8      	bne.n	8005a54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a88:	4b84      	ldr	r3, [pc, #528]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8c:	4a83      	ldr	r2, [pc, #524]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a92:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80fa 	beq.w	8005c92 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	f040 80d0 	bne.w	8005c48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005aa8:	4b7c      	ldr	r3, [pc, #496]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f003 0203 	and.w	r2, r3, #3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d130      	bne.n	8005b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d127      	bne.n	8005b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d11f      	bne.n	8005b1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae8:	2a07      	cmp	r2, #7
 8005aea:	bf14      	ite	ne
 8005aec:	2201      	movne	r2, #1
 8005aee:	2200      	moveq	r2, #0
 8005af0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d113      	bne.n	8005b1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	3b01      	subs	r3, #1
 8005b04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d109      	bne.n	8005b1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	3b01      	subs	r3, #1
 8005b18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d06e      	beq.n	8005bfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d069      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b24:	4b5d      	ldr	r3, [pc, #372]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b30:	4b5a      	ldr	r3, [pc, #360]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e0a9      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b40:	4b56      	ldr	r3, [pc, #344]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a55      	ldr	r2, [pc, #340]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b4c:	f7fe f98c 	bl	8003e68 <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b52:	e008      	b.n	8005b66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b54:	f7fe f988 	bl	8003e68 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e096      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b66:	4b4d      	ldr	r3, [pc, #308]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1f0      	bne.n	8005b54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b72:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <HAL_RCC_OscConfig+0x7ac>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b82:	3a01      	subs	r2, #1
 8005b84:	0112      	lsls	r2, r2, #4
 8005b86:	4311      	orrs	r1, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b8c:	0212      	lsls	r2, r2, #8
 8005b8e:	4311      	orrs	r1, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b94:	0852      	lsrs	r2, r2, #1
 8005b96:	3a01      	subs	r2, #1
 8005b98:	0552      	lsls	r2, r2, #21
 8005b9a:	4311      	orrs	r1, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ba0:	0852      	lsrs	r2, r2, #1
 8005ba2:	3a01      	subs	r2, #1
 8005ba4:	0652      	lsls	r2, r2, #25
 8005ba6:	4311      	orrs	r1, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bac:	0912      	lsrs	r2, r2, #4
 8005bae:	0452      	lsls	r2, r2, #17
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	493a      	ldr	r1, [pc, #232]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b38      	ldr	r3, [pc, #224]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a37      	ldr	r2, [pc, #220]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc4:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a34      	ldr	r2, [pc, #208]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bd0:	f7fe f94a 	bl	8003e68 <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fe f946 	bl	8003e68 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e054      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bf6:	e04c      	b.n	8005c92 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e04b      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bfc:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d144      	bne.n	8005c92 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c14:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a20      	ldr	r2, [pc, #128]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c20:	f7fe f922 	bl	8003e68 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fe f91e 	bl	8003e68 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e02c      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x734>
 8005c46:	e024      	b.n	8005c92 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d01f      	beq.n	8005c8e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fe f905 	bl	8003e68 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fe f901 	bl	8003e68 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f0      	bne.n	8005c62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	4905      	ldr	r1, [pc, #20]	; (8005c9c <HAL_RCC_OscConfig+0x7a8>)
 8005c86:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <HAL_RCC_OscConfig+0x7b0>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60cb      	str	r3, [r1, #12]
 8005c8c:	e001      	b.n	8005c92 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	f99d808c 	.word	0xf99d808c
 8005ca4:	feeefffc 	.word	0xfeeefffc

08005ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0e7      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cbc:	4b75      	ldr	r3, [pc, #468]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d910      	bls.n	8005cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cca:	4b72      	ldr	r3, [pc, #456]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f023 0207 	bic.w	r2, r3, #7
 8005cd2:	4970      	ldr	r1, [pc, #448]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	4b6e      	ldr	r3, [pc, #440]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d001      	beq.n	8005cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0cf      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	4b66      	ldr	r3, [pc, #408]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d908      	bls.n	8005d1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b63      	ldr	r3, [pc, #396]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4960      	ldr	r1, [pc, #384]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04c      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2e:	4b5a      	ldr	r3, [pc, #360]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d121      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e0a6      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d107      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d46:	4b54      	ldr	r3, [pc, #336]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d115      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e09a      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d5e:	4b4e      	ldr	r3, [pc, #312]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e08e      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d6e:	4b4a      	ldr	r3, [pc, #296]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e086      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b46      	ldr	r3, [pc, #280]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4943      	ldr	r1, [pc, #268]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d90:	f7fe f86a 	bl	8003e68 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fe f866 	bl	8003e68 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e06e      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b3a      	ldr	r3, [pc, #232]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d010      	beq.n	8005dee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689a      	ldr	r2, [r3, #8]
 8005dd0:	4b31      	ldr	r3, [pc, #196]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d208      	bcs.n	8005dee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b2e      	ldr	r3, [pc, #184]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	492b      	ldr	r1, [pc, #172]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dee:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d210      	bcs.n	8005e1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfc:	4b25      	ldr	r3, [pc, #148]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f023 0207 	bic.w	r2, r3, #7
 8005e04:	4923      	ldr	r1, [pc, #140]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e0c:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <HAL_RCC_ClockConfig+0x1ec>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d001      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e036      	b.n	8005e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	4918      	ldr	r1, [pc, #96]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4910      	ldr	r1, [pc, #64]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e5c:	f000 f824 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_RCC_ClockConfig+0x1f0>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	091b      	lsrs	r3, r3, #4
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	490b      	ldr	r1, [pc, #44]	; (8005e9c <HAL_RCC_ClockConfig+0x1f4>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	f003 031f 	and.w	r3, r3, #31
 8005e74:	fa22 f303 	lsr.w	r3, r2, r3
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8005e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e7c:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fd ffa1 	bl	8003dc8 <HAL_InitTick>
 8005e86:	4603      	mov	r3, r0
 8005e88:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	40022000 	.word	0x40022000
 8005e98:	40021000 	.word	0x40021000
 8005e9c:	0800b848 	.word	0x0800b848
 8005ea0:	20000008 	.word	0x20000008
 8005ea4:	2000000c 	.word	0x2000000c

08005ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb6:	4b3e      	ldr	r3, [pc, #248]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f003 030c 	and.w	r3, r3, #12
 8005ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ec0:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0x34>
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2b0c      	cmp	r3, #12
 8005ed4:	d121      	bne.n	8005f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d11e      	bne.n	8005f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005edc:	4b34      	ldr	r3, [pc, #208]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0308 	and.w	r3, r3, #8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ee8:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eee:	0a1b      	lsrs	r3, r3, #8
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	61fb      	str	r3, [r7, #28]
 8005ef6:	e005      	b.n	8005f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	091b      	lsrs	r3, r3, #4
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f04:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10d      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f18:	e00a      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b04      	cmp	r3, #4
 8005f1e:	d102      	bne.n	8005f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f20:	4b25      	ldr	r3, [pc, #148]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f22:	61bb      	str	r3, [r7, #24]
 8005f24:	e004      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f2c:	4b23      	ldr	r3, [pc, #140]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	2b0c      	cmp	r3, #12
 8005f34:	d134      	bne.n	8005fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d003      	beq.n	8005f54 <HAL_RCC_GetSysClockFreq+0xac>
 8005f4c:	e005      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f50:	617b      	str	r3, [r7, #20]
      break;
 8005f52:	e005      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8005f56:	617b      	str	r3, [r7, #20]
      break;
 8005f58:	e002      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	617b      	str	r3, [r7, #20]
      break;
 8005f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f60:	4b13      	ldr	r3, [pc, #76]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	091b      	lsrs	r3, r3, #4
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	fb02 f203 	mul.w	r2, r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	0e5b      	lsrs	r3, r3, #25
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	3301      	adds	r3, #1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fa0:	69bb      	ldr	r3, [r7, #24]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3724      	adds	r7, #36	; 0x24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	0800b860 	.word	0x0800b860
 8005fb8:	00f42400 	.word	0x00f42400
 8005fbc:	007a1200 	.word	0x007a1200

08005fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	20000008 	.word	0x20000008

08005fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fdc:	f7ff fff0 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	4904      	ldr	r1, [pc, #16]	; (8006000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fee:	5ccb      	ldrb	r3, [r1, r3]
 8005ff0:	f003 031f 	and.w	r3, r3, #31
 8005ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	40021000 	.word	0x40021000
 8006000:	0800b858 	.word	0x0800b858

08006004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006008:	f7ff ffda 	bl	8005fc0 <HAL_RCC_GetHCLKFreq>
 800600c:	4602      	mov	r2, r0
 800600e:	4b06      	ldr	r3, [pc, #24]	; (8006028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	0adb      	lsrs	r3, r3, #11
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	4904      	ldr	r1, [pc, #16]	; (800602c <HAL_RCC_GetPCLK2Freq+0x28>)
 800601a:	5ccb      	ldrb	r3, [r1, r3]
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006024:	4618      	mov	r0, r3
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40021000 	.word	0x40021000
 800602c:	0800b858 	.word	0x0800b858

08006030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800603c:	4b2a      	ldr	r3, [pc, #168]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006048:	f7ff f9f0 	bl	800542c <HAL_PWREx_GetVoltageRange>
 800604c:	6178      	str	r0, [r7, #20]
 800604e:	e014      	b.n	800607a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006050:	4b25      	ldr	r3, [pc, #148]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006054:	4a24      	ldr	r2, [pc, #144]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605a:	6593      	str	r3, [r2, #88]	; 0x58
 800605c:	4b22      	ldr	r3, [pc, #136]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800605e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006068:	f7ff f9e0 	bl	800542c <HAL_PWREx_GetVoltageRange>
 800606c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800606e:	4b1e      	ldr	r3, [pc, #120]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006078:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006080:	d10b      	bne.n	800609a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b80      	cmp	r3, #128	; 0x80
 8006086:	d919      	bls.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2ba0      	cmp	r3, #160	; 0xa0
 800608c:	d902      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800608e:	2302      	movs	r3, #2
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	e013      	b.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006094:	2301      	movs	r3, #1
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	e010      	b.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b80      	cmp	r3, #128	; 0x80
 800609e:	d902      	bls.n	80060a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060a0:	2303      	movs	r3, #3
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	e00a      	b.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b80      	cmp	r3, #128	; 0x80
 80060aa:	d102      	bne.n	80060b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060ac:	2302      	movs	r3, #2
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	e004      	b.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b70      	cmp	r3, #112	; 0x70
 80060b6:	d101      	bne.n	80060bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060b8:	2301      	movs	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f023 0207 	bic.w	r2, r3, #7
 80060c4:	4909      	ldr	r1, [pc, #36]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060cc:	4b07      	ldr	r3, [pc, #28]	; (80060ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0307 	and.w	r3, r3, #7
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d001      	beq.n	80060de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e000      	b.n	80060e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40022000 	.word	0x40022000

080060f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060f8:	2300      	movs	r3, #0
 80060fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060fc:	2300      	movs	r3, #0
 80060fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006108:	2b00      	cmp	r3, #0
 800610a:	d041      	beq.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006110:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006114:	d02a      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006116:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800611a:	d824      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800611c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006120:	d008      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006126:	d81e      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00a      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800612c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006130:	d010      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006132:	e018      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006134:	4b86      	ldr	r3, [pc, #536]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a85      	ldr	r2, [pc, #532]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800613a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800613e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006140:	e015      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fabb 	bl	80066c4 <RCCEx_PLLSAI1_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006152:	e00c      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3320      	adds	r3, #32
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f000 fba6 	bl	80068ac <RCCEx_PLLSAI2_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006164:	e003      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	74fb      	strb	r3, [r7, #19]
      break;
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800616c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800616e:	7cfb      	ldrb	r3, [r7, #19]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006174:	4b76      	ldr	r3, [pc, #472]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006182:	4973      	ldr	r1, [pc, #460]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800618a:	e001      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	7cfb      	ldrb	r3, [r7, #19]
 800618e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d041      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061a4:	d02a      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80061a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061aa:	d824      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061b0:	d008      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80061b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061b6:	d81e      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80061bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061c0:	d010      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80061c2:	e018      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061c4:	4b62      	ldr	r3, [pc, #392]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	4a61      	ldr	r2, [pc, #388]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061d0:	e015      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fa73 	bl	80066c4 <RCCEx_PLLSAI1_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061e2:	e00c      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3320      	adds	r3, #32
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fb5e 	bl	80068ac <RCCEx_PLLSAI2_Config>
 80061f0:	4603      	mov	r3, r0
 80061f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061f4:	e003      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	74fb      	strb	r3, [r7, #19]
      break;
 80061fa:	e000      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061fe:	7cfb      	ldrb	r3, [r7, #19]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10b      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006204:	4b52      	ldr	r3, [pc, #328]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006212:	494f      	ldr	r1, [pc, #316]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800621a:	e001      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7cfb      	ldrb	r3, [r7, #19]
 800621e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80a0 	beq.w	800636e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800622e:	2300      	movs	r3, #0
 8006230:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006232:	4b47      	ldr	r3, [pc, #284]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00d      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006248:	4b41      	ldr	r3, [pc, #260]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624c:	4a40      	ldr	r2, [pc, #256]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800624e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006252:	6593      	str	r3, [r2, #88]	; 0x58
 8006254:	4b3e      	ldr	r3, [pc, #248]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006260:	2301      	movs	r3, #1
 8006262:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006264:	4b3b      	ldr	r3, [pc, #236]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a3a      	ldr	r2, [pc, #232]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800626a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800626e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006270:	f7fd fdfa 	bl	8003e68 <HAL_GetTick>
 8006274:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006276:	e009      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006278:	f7fd fdf6 	bl	8003e68 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d902      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	74fb      	strb	r3, [r7, #19]
        break;
 800628a:	e005      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800628c:	4b31      	ldr	r3, [pc, #196]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ef      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d15c      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800629e:	4b2c      	ldr	r3, [pc, #176]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01f      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d019      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062c8:	4b21      	ldr	r3, [pc, #132]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	4a20      	ldr	r2, [pc, #128]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062d8:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062de:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062e8:	4a19      	ldr	r2, [pc, #100]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fa:	f7fd fdb5 	bl	8003e68 <HAL_GetTick>
 80062fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006300:	e00b      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006302:	f7fd fdb1 	bl	8003e68 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006310:	4293      	cmp	r3, r2
 8006312:	d902      	bls.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	74fb      	strb	r3, [r7, #19]
            break;
 8006318:	e006      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800631a:	4b0d      	ldr	r3, [pc, #52]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0ec      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006328:	7cfb      	ldrb	r3, [r7, #19]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800632e:	4b08      	ldr	r3, [pc, #32]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800633e:	4904      	ldr	r1, [pc, #16]	; (8006350 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006346:	e009      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006348:	7cfb      	ldrb	r3, [r7, #19]
 800634a:	74bb      	strb	r3, [r7, #18]
 800634c:	e006      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800634e:	bf00      	nop
 8006350:	40021000 	.word	0x40021000
 8006354:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800635c:	7c7b      	ldrb	r3, [r7, #17]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d105      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006362:	4b9e      	ldr	r3, [pc, #632]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006366:	4a9d      	ldr	r2, [pc, #628]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800636c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800637a:	4b98      	ldr	r3, [pc, #608]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	f023 0203 	bic.w	r2, r3, #3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	4994      	ldr	r1, [pc, #592]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800638a:	4313      	orrs	r3, r2
 800638c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800639c:	4b8f      	ldr	r3, [pc, #572]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a2:	f023 020c 	bic.w	r2, r3, #12
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	498c      	ldr	r1, [pc, #560]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80063be:	4b87      	ldr	r3, [pc, #540]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063cc:	4983      	ldr	r1, [pc, #524]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0308 	and.w	r3, r3, #8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063e0:	4b7e      	ldr	r3, [pc, #504]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ee:	497b      	ldr	r1, [pc, #492]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006402:	4b76      	ldr	r3, [pc, #472]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006410:	4972      	ldr	r1, [pc, #456]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006424:	4b6d      	ldr	r3, [pc, #436]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006432:	496a      	ldr	r1, [pc, #424]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006446:	4b65      	ldr	r3, [pc, #404]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	4961      	ldr	r1, [pc, #388]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006468:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006476:	4959      	ldr	r1, [pc, #356]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800648a:	4b54      	ldr	r3, [pc, #336]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	4950      	ldr	r1, [pc, #320]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064ac:	4b4b      	ldr	r3, [pc, #300]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	4948      	ldr	r1, [pc, #288]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064ce:	4b43      	ldr	r3, [pc, #268]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	493f      	ldr	r1, [pc, #252]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d028      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f0:	4b3a      	ldr	r3, [pc, #232]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fe:	4937      	ldr	r1, [pc, #220]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800650a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800650e:	d106      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006510:	4b32      	ldr	r3, [pc, #200]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a31      	ldr	r2, [pc, #196]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800651a:	60d3      	str	r3, [r2, #12]
 800651c:	e011      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006526:	d10c      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3304      	adds	r3, #4
 800652c:	2101      	movs	r1, #1
 800652e:	4618      	mov	r0, r3
 8006530:	f000 f8c8 	bl	80066c4 <RCCEx_PLLSAI1_Config>
 8006534:	4603      	mov	r3, r0
 8006536:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006538:	7cfb      	ldrb	r3, [r7, #19]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d028      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800654e:	4b23      	ldr	r3, [pc, #140]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	491f      	ldr	r1, [pc, #124]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800655e:	4313      	orrs	r3, r2
 8006560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800656c:	d106      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800656e:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006578:	60d3      	str	r3, [r2, #12]
 800657a:	e011      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006584:	d10c      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	2101      	movs	r1, #1
 800658c:	4618      	mov	r0, r3
 800658e:	f000 f899 	bl	80066c4 <RCCEx_PLLSAI1_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006596:	7cfb      	ldrb	r3, [r7, #19]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d02b      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80065ac:	4b0b      	ldr	r3, [pc, #44]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065ba:	4908      	ldr	r1, [pc, #32]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ca:	d109      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065cc:	4b03      	ldr	r3, [pc, #12]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a02      	ldr	r2, [pc, #8]	; (80065dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065d6:	60d3      	str	r3, [r2, #12]
 80065d8:	e014      	b.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065da:	bf00      	nop
 80065dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2101      	movs	r1, #1
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 f867 	bl	80066c4 <RCCEx_PLLSAI1_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065fa:	7cfb      	ldrb	r3, [r7, #19]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006600:	7cfb      	ldrb	r3, [r7, #19]
 8006602:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02f      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006610:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006616:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800661e:	4928      	ldr	r1, [pc, #160]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800662a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800662e:	d10d      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3304      	adds	r3, #4
 8006634:	2102      	movs	r1, #2
 8006636:	4618      	mov	r0, r3
 8006638:	f000 f844 	bl	80066c4 <RCCEx_PLLSAI1_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d014      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006646:	7cfb      	ldrb	r3, [r7, #19]
 8006648:	74bb      	strb	r3, [r7, #18]
 800664a:	e011      	b.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006650:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3320      	adds	r3, #32
 800665a:	2102      	movs	r1, #2
 800665c:	4618      	mov	r0, r3
 800665e:	f000 f925 	bl	80068ac <RCCEx_PLLSAI2_Config>
 8006662:	4603      	mov	r3, r0
 8006664:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006666:	7cfb      	ldrb	r3, [r7, #19]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800666c:	7cfb      	ldrb	r3, [r7, #19]
 800666e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800667c:	4b10      	ldr	r3, [pc, #64]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668a:	490d      	ldr	r1, [pc, #52]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800669e:	4b08      	ldr	r3, [pc, #32]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ae:	4904      	ldr	r1, [pc, #16]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80066b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40021000 	.word	0x40021000

080066c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066d2:	4b75      	ldr	r3, [pc, #468]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d018      	beq.n	8006710 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066de:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	f003 0203 	and.w	r2, r3, #3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d10d      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
       ||
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d009      	beq.n	800670a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066f6:	4b6c      	ldr	r3, [pc, #432]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
       ||
 8006706:	429a      	cmp	r2, r3
 8006708:	d047      	beq.n	800679a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	73fb      	strb	r3, [r7, #15]
 800670e:	e044      	b.n	800679a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d018      	beq.n	800674a <RCCEx_PLLSAI1_Config+0x86>
 8006718:	2b03      	cmp	r3, #3
 800671a:	d825      	bhi.n	8006768 <RCCEx_PLLSAI1_Config+0xa4>
 800671c:	2b01      	cmp	r3, #1
 800671e:	d002      	beq.n	8006726 <RCCEx_PLLSAI1_Config+0x62>
 8006720:	2b02      	cmp	r3, #2
 8006722:	d009      	beq.n	8006738 <RCCEx_PLLSAI1_Config+0x74>
 8006724:	e020      	b.n	8006768 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006726:	4b60      	ldr	r3, [pc, #384]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11d      	bne.n	800676e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006736:	e01a      	b.n	800676e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006738:	4b5b      	ldr	r3, [pc, #364]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006740:	2b00      	cmp	r3, #0
 8006742:	d116      	bne.n	8006772 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006748:	e013      	b.n	8006772 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800674a:	4b57      	ldr	r3, [pc, #348]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10f      	bne.n	8006776 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006756:	4b54      	ldr	r3, [pc, #336]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006766:	e006      	b.n	8006776 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
      break;
 800676c:	e004      	b.n	8006778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800676e:	bf00      	nop
 8006770:	e002      	b.n	8006778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006772:	bf00      	nop
 8006774:	e000      	b.n	8006778 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006776:	bf00      	nop
    }

    if(status == HAL_OK)
 8006778:	7bfb      	ldrb	r3, [r7, #15]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10d      	bne.n	800679a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800677e:	4b4a      	ldr	r3, [pc, #296]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6819      	ldr	r1, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	3b01      	subs	r3, #1
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	430b      	orrs	r3, r1
 8006794:	4944      	ldr	r1, [pc, #272]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006796:	4313      	orrs	r3, r2
 8006798:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d17d      	bne.n	800689c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80067a0:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a40      	ldr	r2, [pc, #256]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ac:	f7fd fb5c 	bl	8003e68 <HAL_GetTick>
 80067b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067b2:	e009      	b.n	80067c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067b4:	f7fd fb58 	bl	8003e68 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d902      	bls.n	80067c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	73fb      	strb	r3, [r7, #15]
        break;
 80067c6:	e005      	b.n	80067d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067c8:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ef      	bne.n	80067b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d160      	bne.n	800689c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d111      	bne.n	8006804 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067e0:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	6892      	ldr	r2, [r2, #8]
 80067f0:	0211      	lsls	r1, r2, #8
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	68d2      	ldr	r2, [r2, #12]
 80067f6:	0912      	lsrs	r2, r2, #4
 80067f8:	0452      	lsls	r2, r2, #17
 80067fa:	430a      	orrs	r2, r1
 80067fc:	492a      	ldr	r1, [pc, #168]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	610b      	str	r3, [r1, #16]
 8006802:	e027      	b.n	8006854 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d112      	bne.n	8006830 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800680a:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006812:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6892      	ldr	r2, [r2, #8]
 800681a:	0211      	lsls	r1, r2, #8
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6912      	ldr	r2, [r2, #16]
 8006820:	0852      	lsrs	r2, r2, #1
 8006822:	3a01      	subs	r2, #1
 8006824:	0552      	lsls	r2, r2, #21
 8006826:	430a      	orrs	r2, r1
 8006828:	491f      	ldr	r1, [pc, #124]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	610b      	str	r3, [r1, #16]
 800682e:	e011      	b.n	8006854 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006830:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006838:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6892      	ldr	r2, [r2, #8]
 8006840:	0211      	lsls	r1, r2, #8
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6952      	ldr	r2, [r2, #20]
 8006846:	0852      	lsrs	r2, r2, #1
 8006848:	3a01      	subs	r2, #1
 800684a:	0652      	lsls	r2, r2, #25
 800684c:	430a      	orrs	r2, r1
 800684e:	4916      	ldr	r1, [pc, #88]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006850:	4313      	orrs	r3, r2
 8006852:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006854:	4b14      	ldr	r3, [pc, #80]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a13      	ldr	r2, [pc, #76]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800685a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800685e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006860:	f7fd fb02 	bl	8003e68 <HAL_GetTick>
 8006864:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006866:	e009      	b.n	800687c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006868:	f7fd fafe 	bl	8003e68 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d902      	bls.n	800687c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
          break;
 800687a:	e005      	b.n	8006888 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0ef      	beq.n	8006868 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800688e:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	4904      	ldr	r1, [pc, #16]	; (80068a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006898:	4313      	orrs	r3, r2
 800689a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40021000 	.word	0x40021000

080068ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068ba:	4b6a      	ldr	r3, [pc, #424]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068c6:	4b67      	ldr	r3, [pc, #412]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0203 	and.w	r2, r3, #3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d10d      	bne.n	80068f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
       ||
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068de:	4b61      	ldr	r3, [pc, #388]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	091b      	lsrs	r3, r3, #4
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
       ||
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d047      	beq.n	8006982 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	73fb      	strb	r3, [r7, #15]
 80068f6:	e044      	b.n	8006982 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b03      	cmp	r3, #3
 80068fe:	d018      	beq.n	8006932 <RCCEx_PLLSAI2_Config+0x86>
 8006900:	2b03      	cmp	r3, #3
 8006902:	d825      	bhi.n	8006950 <RCCEx_PLLSAI2_Config+0xa4>
 8006904:	2b01      	cmp	r3, #1
 8006906:	d002      	beq.n	800690e <RCCEx_PLLSAI2_Config+0x62>
 8006908:	2b02      	cmp	r3, #2
 800690a:	d009      	beq.n	8006920 <RCCEx_PLLSAI2_Config+0x74>
 800690c:	e020      	b.n	8006950 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800690e:	4b55      	ldr	r3, [pc, #340]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b00      	cmp	r3, #0
 8006918:	d11d      	bne.n	8006956 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800691e:	e01a      	b.n	8006956 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006920:	4b50      	ldr	r3, [pc, #320]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006928:	2b00      	cmp	r3, #0
 800692a:	d116      	bne.n	800695a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006930:	e013      	b.n	800695a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006932:	4b4c      	ldr	r3, [pc, #304]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10f      	bne.n	800695e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800693e:	4b49      	ldr	r3, [pc, #292]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d109      	bne.n	800695e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800694e:	e006      	b.n	800695e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	73fb      	strb	r3, [r7, #15]
      break;
 8006954:	e004      	b.n	8006960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006956:	bf00      	nop
 8006958:	e002      	b.n	8006960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800695a:	bf00      	nop
 800695c:	e000      	b.n	8006960 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800695e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006966:	4b3f      	ldr	r3, [pc, #252]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6819      	ldr	r1, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	3b01      	subs	r3, #1
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	430b      	orrs	r3, r1
 800697c:	4939      	ldr	r1, [pc, #228]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800697e:	4313      	orrs	r3, r2
 8006980:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d167      	bne.n	8006a58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006988:	4b36      	ldr	r3, [pc, #216]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a35      	ldr	r2, [pc, #212]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 800698e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006994:	f7fd fa68 	bl	8003e68 <HAL_GetTick>
 8006998:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800699a:	e009      	b.n	80069b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800699c:	f7fd fa64 	bl	8003e68 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d902      	bls.n	80069b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	73fb      	strb	r3, [r7, #15]
        break;
 80069ae:	e005      	b.n	80069bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069b0:	4b2c      	ldr	r3, [pc, #176]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1ef      	bne.n	800699c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d14a      	bne.n	8006a58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d111      	bne.n	80069ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069c8:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80069d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	6892      	ldr	r2, [r2, #8]
 80069d8:	0211      	lsls	r1, r2, #8
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	68d2      	ldr	r2, [r2, #12]
 80069de:	0912      	lsrs	r2, r2, #4
 80069e0:	0452      	lsls	r2, r2, #17
 80069e2:	430a      	orrs	r2, r1
 80069e4:	491f      	ldr	r1, [pc, #124]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	614b      	str	r3, [r1, #20]
 80069ea:	e011      	b.n	8006a10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6892      	ldr	r2, [r2, #8]
 80069fc:	0211      	lsls	r1, r2, #8
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6912      	ldr	r2, [r2, #16]
 8006a02:	0852      	lsrs	r2, r2, #1
 8006a04:	3a01      	subs	r2, #1
 8006a06:	0652      	lsls	r2, r2, #25
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	4916      	ldr	r1, [pc, #88]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a10:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a1c:	f7fd fa24 	bl	8003e68 <HAL_GetTick>
 8006a20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a22:	e009      	b.n	8006a38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a24:	f7fd fa20 	bl	8003e68 <HAL_GetTick>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d902      	bls.n	8006a38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	73fb      	strb	r3, [r7, #15]
          break;
 8006a36:	e005      	b.n	8006a44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a38:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ef      	beq.n	8006a24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d106      	bne.n	8006a58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a4a:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	4904      	ldr	r1, [pc, #16]	; (8006a64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40021000 	.word	0x40021000

08006a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e049      	b.n	8006b0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fc fe82 	bl	8003798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f000 f89e 	bl	8006be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3708      	adds	r7, #8
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d001      	beq.n	8006b30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e047      	b.n	8006bc0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a23      	ldr	r2, [pc, #140]	; (8006bcc <HAL_TIM_Base_Start+0xb4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01d      	beq.n	8006b7e <HAL_TIM_Base_Start+0x66>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4a:	d018      	beq.n	8006b7e <HAL_TIM_Base_Start+0x66>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1f      	ldr	r2, [pc, #124]	; (8006bd0 <HAL_TIM_Base_Start+0xb8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_TIM_Base_Start+0x66>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <HAL_TIM_Base_Start+0xbc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_TIM_Base_Start+0x66>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <HAL_TIM_Base_Start+0xc0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_TIM_Base_Start+0x66>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a1b      	ldr	r2, [pc, #108]	; (8006bdc <HAL_TIM_Base_Start+0xc4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_TIM_Base_Start+0x66>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a19      	ldr	r2, [pc, #100]	; (8006be0 <HAL_TIM_Base_Start+0xc8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d115      	bne.n	8006baa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	4b17      	ldr	r3, [pc, #92]	; (8006be4 <HAL_TIM_Base_Start+0xcc>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	d015      	beq.n	8006bbc <HAL_TIM_Base_Start+0xa4>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b96:	d011      	beq.n	8006bbc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0201 	orr.w	r2, r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba8:	e008      	b.n	8006bbc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]
 8006bba:	e000      	b.n	8006bbe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40014000 	.word	0x40014000
 8006be4:	00010007 	.word	0x00010007

08006be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a40      	ldr	r2, [pc, #256]	; (8006cfc <TIM_Base_SetConfig+0x114>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d013      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c06:	d00f      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a3d      	ldr	r2, [pc, #244]	; (8006d00 <TIM_Base_SetConfig+0x118>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00b      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3c      	ldr	r2, [pc, #240]	; (8006d04 <TIM_Base_SetConfig+0x11c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d007      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3b      	ldr	r2, [pc, #236]	; (8006d08 <TIM_Base_SetConfig+0x120>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3a      	ldr	r2, [pc, #232]	; (8006d0c <TIM_Base_SetConfig+0x124>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d108      	bne.n	8006c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a2f      	ldr	r2, [pc, #188]	; (8006cfc <TIM_Base_SetConfig+0x114>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01f      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c48:	d01b      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a2c      	ldr	r2, [pc, #176]	; (8006d00 <TIM_Base_SetConfig+0x118>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d017      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2b      	ldr	r2, [pc, #172]	; (8006d04 <TIM_Base_SetConfig+0x11c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <TIM_Base_SetConfig+0x120>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00f      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a29      	ldr	r2, [pc, #164]	; (8006d0c <TIM_Base_SetConfig+0x124>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00b      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a28      	ldr	r2, [pc, #160]	; (8006d10 <TIM_Base_SetConfig+0x128>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d007      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <TIM_Base_SetConfig+0x12c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d003      	beq.n	8006c82 <TIM_Base_SetConfig+0x9a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <TIM_Base_SetConfig+0x130>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d108      	bne.n	8006c94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a10      	ldr	r2, [pc, #64]	; (8006cfc <TIM_Base_SetConfig+0x114>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00f      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a12      	ldr	r2, [pc, #72]	; (8006d0c <TIM_Base_SetConfig+0x124>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a11      	ldr	r2, [pc, #68]	; (8006d10 <TIM_Base_SetConfig+0x128>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d007      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a10      	ldr	r2, [pc, #64]	; (8006d14 <TIM_Base_SetConfig+0x12c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_Base_SetConfig+0xf8>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a0f      	ldr	r2, [pc, #60]	; (8006d18 <TIM_Base_SetConfig+0x130>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d103      	bne.n	8006ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	615a      	str	r2, [r3, #20]
}
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40000400 	.word	0x40000400
 8006d04:	40000800 	.word	0x40000800
 8006d08:	40000c00 	.word	0x40000c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800

08006d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e068      	b.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a2e      	ldr	r2, [pc, #184]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2d      	ldr	r2, [pc, #180]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d108      	bne.n	8006d7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01d      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d018      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d10c      	bne.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40014000 	.word	0x40014000

08006e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e040      	b.n	8006ec0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d106      	bne.n	8006e54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fc fd38 	bl	80038c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2224      	movs	r2, #36	; 0x24
 8006e58:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0201 	bic.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9e8 	bl	8007240 <UART_SetConfig>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e022      	b.n	8006ec0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc66 	bl	8007754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fced 	bl	8007898 <UART_CheckIdleState>
 8006ebe:	4603      	mov	r3, r0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e048      	b.n	8006f6c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fc fcea 	bl	80038c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	; 0x24
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f99a 	bl	8007240 <UART_SetConfig>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e02a      	b.n	8006f6c <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fc18 	bl	8007754 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8006f42:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689a      	ldr	r2, [r3, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0208 	orr.w	r2, r2, #8
 8006f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0201 	orr.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fc97 	bl	8007898 <UART_CheckIdleState>
 8006f6a:	4603      	mov	r3, r0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b08a      	sub	sp, #40	; 0x28
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	f040 8082 	bne.w	8007092 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_UART_Transmit+0x26>
 8006f94:	88fb      	ldrh	r3, [r7, #6]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e07a      	b.n	8007094 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_UART_Transmit+0x38>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e073      	b.n	8007094 <HAL_UART_Transmit+0x120>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2221      	movs	r2, #33	; 0x21
 8006fc0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fc2:	f7fc ff51 	bl	8003e68 <HAL_GetTick>
 8006fc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fe0:	d108      	bne.n	8006ff4 <HAL_UART_Transmit+0x80>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e003      	b.n	8006ffc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007004:	e02d      	b.n	8007062 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2200      	movs	r2, #0
 800700e:	2180      	movs	r1, #128	; 0x80
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	f000 fc8a 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e039      	b.n	8007094 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10b      	bne.n	800703e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	881a      	ldrh	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007032:	b292      	uxth	r2, r2
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	3302      	adds	r3, #2
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e008      	b.n	8007050 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	b292      	uxth	r2, r2
 8007048:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	3301      	adds	r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007068:	b29b      	uxth	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1cb      	bne.n	8007006 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	2140      	movs	r1, #64	; 0x40
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fc56 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e005      	b.n	8007094 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	e000      	b.n	8007094 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007092:	2302      	movs	r3, #2
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	3720      	adds	r7, #32
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	; 0x28
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	603b      	str	r3, [r7, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	f040 80bf 	bne.w	8007234 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Receive+0x26>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e0b7      	b.n	8007236 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_UART_Receive+0x38>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e0b0      	b.n	8007236 <HAL_UART_Receive+0x19a>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2222      	movs	r2, #34	; 0x22
 80070e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070f0:	f7fc feba 	bl	8003e68 <HAL_GetTick>
 80070f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	88fa      	ldrh	r2, [r7, #6]
 8007102:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710e:	d10e      	bne.n	800712e <HAL_UART_Receive+0x92>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d105      	bne.n	8007124 <HAL_UART_Receive+0x88>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800711e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007122:	e02d      	b.n	8007180 <HAL_UART_Receive+0xe4>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	22ff      	movs	r2, #255	; 0xff
 8007128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800712c:	e028      	b.n	8007180 <HAL_UART_Receive+0xe4>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10d      	bne.n	8007152 <HAL_UART_Receive+0xb6>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <HAL_UART_Receive+0xac>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	22ff      	movs	r2, #255	; 0xff
 8007142:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007146:	e01b      	b.n	8007180 <HAL_UART_Receive+0xe4>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	227f      	movs	r2, #127	; 0x7f
 800714c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007150:	e016      	b.n	8007180 <HAL_UART_Receive+0xe4>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800715a:	d10d      	bne.n	8007178 <HAL_UART_Receive+0xdc>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <HAL_UART_Receive+0xd2>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	227f      	movs	r2, #127	; 0x7f
 8007168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800716c:	e008      	b.n	8007180 <HAL_UART_Receive+0xe4>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	223f      	movs	r2, #63	; 0x3f
 8007172:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007176:	e003      	b.n	8007180 <HAL_UART_Receive+0xe4>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007186:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007190:	d108      	bne.n	80071a4 <HAL_UART_Receive+0x108>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d104      	bne.n	80071a4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e003      	b.n	80071ac <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80071b4:	e033      	b.n	800721e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	2200      	movs	r2, #0
 80071be:	2120      	movs	r1, #32
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fbb2 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e032      	b.n	8007236 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10c      	bne.n	80071f0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071dc:	b29a      	uxth	r2, r3
 80071de:	8a7b      	ldrh	r3, [r7, #18]
 80071e0:	4013      	ands	r3, r2
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	3302      	adds	r3, #2
 80071ec:	61bb      	str	r3, [r7, #24]
 80071ee:	e00d      	b.n	800720c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	8a7b      	ldrh	r3, [r7, #18]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	4013      	ands	r3, r2
 8007200:	b2da      	uxtb	r2, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	3301      	adds	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007212:	b29b      	uxth	r3, r3
 8007214:	3b01      	subs	r3, #1
 8007216:	b29a      	uxth	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1c5      	bne.n	80071b6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2220      	movs	r2, #32
 800722e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	e000      	b.n	8007236 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007234:	2302      	movs	r3, #2
  }
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007240:	b5b0      	push	{r4, r5, r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	4313      	orrs	r3, r2
 8007262:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4bad      	ldr	r3, [pc, #692]	; (8007520 <UART_SetConfig+0x2e0>)
 800726c:	4013      	ands	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	6812      	ldr	r2, [r2, #0]
 8007272:	69f9      	ldr	r1, [r7, #28]
 8007274:	430b      	orrs	r3, r1
 8007276:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	430a      	orrs	r2, r1
 800728c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4aa2      	ldr	r2, [pc, #648]	; (8007524 <UART_SetConfig+0x2e4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d004      	beq.n	80072a8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a99      	ldr	r2, [pc, #612]	; (8007528 <UART_SetConfig+0x2e8>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d121      	bne.n	800730a <UART_SetConfig+0xca>
 80072c6:	4b99      	ldr	r3, [pc, #612]	; (800752c <UART_SetConfig+0x2ec>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	f003 0303 	and.w	r3, r3, #3
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d817      	bhi.n	8007304 <UART_SetConfig+0xc4>
 80072d4:	a201      	add	r2, pc, #4	; (adr r2, 80072dc <UART_SetConfig+0x9c>)
 80072d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072da:	bf00      	nop
 80072dc:	080072ed 	.word	0x080072ed
 80072e0:	080072f9 	.word	0x080072f9
 80072e4:	080072f3 	.word	0x080072f3
 80072e8:	080072ff 	.word	0x080072ff
 80072ec:	2301      	movs	r3, #1
 80072ee:	76fb      	strb	r3, [r7, #27]
 80072f0:	e0e7      	b.n	80074c2 <UART_SetConfig+0x282>
 80072f2:	2302      	movs	r3, #2
 80072f4:	76fb      	strb	r3, [r7, #27]
 80072f6:	e0e4      	b.n	80074c2 <UART_SetConfig+0x282>
 80072f8:	2304      	movs	r3, #4
 80072fa:	76fb      	strb	r3, [r7, #27]
 80072fc:	e0e1      	b.n	80074c2 <UART_SetConfig+0x282>
 80072fe:	2308      	movs	r3, #8
 8007300:	76fb      	strb	r3, [r7, #27]
 8007302:	e0de      	b.n	80074c2 <UART_SetConfig+0x282>
 8007304:	2310      	movs	r3, #16
 8007306:	76fb      	strb	r3, [r7, #27]
 8007308:	e0db      	b.n	80074c2 <UART_SetConfig+0x282>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a88      	ldr	r2, [pc, #544]	; (8007530 <UART_SetConfig+0x2f0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d132      	bne.n	800737a <UART_SetConfig+0x13a>
 8007314:	4b85      	ldr	r3, [pc, #532]	; (800752c <UART_SetConfig+0x2ec>)
 8007316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731a:	f003 030c 	and.w	r3, r3, #12
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d828      	bhi.n	8007374 <UART_SetConfig+0x134>
 8007322:	a201      	add	r2, pc, #4	; (adr r2, 8007328 <UART_SetConfig+0xe8>)
 8007324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007328:	0800735d 	.word	0x0800735d
 800732c:	08007375 	.word	0x08007375
 8007330:	08007375 	.word	0x08007375
 8007334:	08007375 	.word	0x08007375
 8007338:	08007369 	.word	0x08007369
 800733c:	08007375 	.word	0x08007375
 8007340:	08007375 	.word	0x08007375
 8007344:	08007375 	.word	0x08007375
 8007348:	08007363 	.word	0x08007363
 800734c:	08007375 	.word	0x08007375
 8007350:	08007375 	.word	0x08007375
 8007354:	08007375 	.word	0x08007375
 8007358:	0800736f 	.word	0x0800736f
 800735c:	2300      	movs	r3, #0
 800735e:	76fb      	strb	r3, [r7, #27]
 8007360:	e0af      	b.n	80074c2 <UART_SetConfig+0x282>
 8007362:	2302      	movs	r3, #2
 8007364:	76fb      	strb	r3, [r7, #27]
 8007366:	e0ac      	b.n	80074c2 <UART_SetConfig+0x282>
 8007368:	2304      	movs	r3, #4
 800736a:	76fb      	strb	r3, [r7, #27]
 800736c:	e0a9      	b.n	80074c2 <UART_SetConfig+0x282>
 800736e:	2308      	movs	r3, #8
 8007370:	76fb      	strb	r3, [r7, #27]
 8007372:	e0a6      	b.n	80074c2 <UART_SetConfig+0x282>
 8007374:	2310      	movs	r3, #16
 8007376:	76fb      	strb	r3, [r7, #27]
 8007378:	e0a3      	b.n	80074c2 <UART_SetConfig+0x282>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a6d      	ldr	r2, [pc, #436]	; (8007534 <UART_SetConfig+0x2f4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d120      	bne.n	80073c6 <UART_SetConfig+0x186>
 8007384:	4b69      	ldr	r3, [pc, #420]	; (800752c <UART_SetConfig+0x2ec>)
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d013      	beq.n	80073ba <UART_SetConfig+0x17a>
 8007392:	2b30      	cmp	r3, #48	; 0x30
 8007394:	d814      	bhi.n	80073c0 <UART_SetConfig+0x180>
 8007396:	2b20      	cmp	r3, #32
 8007398:	d009      	beq.n	80073ae <UART_SetConfig+0x16e>
 800739a:	2b20      	cmp	r3, #32
 800739c:	d810      	bhi.n	80073c0 <UART_SetConfig+0x180>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <UART_SetConfig+0x168>
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d006      	beq.n	80073b4 <UART_SetConfig+0x174>
 80073a6:	e00b      	b.n	80073c0 <UART_SetConfig+0x180>
 80073a8:	2300      	movs	r3, #0
 80073aa:	76fb      	strb	r3, [r7, #27]
 80073ac:	e089      	b.n	80074c2 <UART_SetConfig+0x282>
 80073ae:	2302      	movs	r3, #2
 80073b0:	76fb      	strb	r3, [r7, #27]
 80073b2:	e086      	b.n	80074c2 <UART_SetConfig+0x282>
 80073b4:	2304      	movs	r3, #4
 80073b6:	76fb      	strb	r3, [r7, #27]
 80073b8:	e083      	b.n	80074c2 <UART_SetConfig+0x282>
 80073ba:	2308      	movs	r3, #8
 80073bc:	76fb      	strb	r3, [r7, #27]
 80073be:	e080      	b.n	80074c2 <UART_SetConfig+0x282>
 80073c0:	2310      	movs	r3, #16
 80073c2:	76fb      	strb	r3, [r7, #27]
 80073c4:	e07d      	b.n	80074c2 <UART_SetConfig+0x282>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a5b      	ldr	r2, [pc, #364]	; (8007538 <UART_SetConfig+0x2f8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d120      	bne.n	8007412 <UART_SetConfig+0x1d2>
 80073d0:	4b56      	ldr	r3, [pc, #344]	; (800752c <UART_SetConfig+0x2ec>)
 80073d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073da:	2bc0      	cmp	r3, #192	; 0xc0
 80073dc:	d013      	beq.n	8007406 <UART_SetConfig+0x1c6>
 80073de:	2bc0      	cmp	r3, #192	; 0xc0
 80073e0:	d814      	bhi.n	800740c <UART_SetConfig+0x1cc>
 80073e2:	2b80      	cmp	r3, #128	; 0x80
 80073e4:	d009      	beq.n	80073fa <UART_SetConfig+0x1ba>
 80073e6:	2b80      	cmp	r3, #128	; 0x80
 80073e8:	d810      	bhi.n	800740c <UART_SetConfig+0x1cc>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <UART_SetConfig+0x1b4>
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d006      	beq.n	8007400 <UART_SetConfig+0x1c0>
 80073f2:	e00b      	b.n	800740c <UART_SetConfig+0x1cc>
 80073f4:	2300      	movs	r3, #0
 80073f6:	76fb      	strb	r3, [r7, #27]
 80073f8:	e063      	b.n	80074c2 <UART_SetConfig+0x282>
 80073fa:	2302      	movs	r3, #2
 80073fc:	76fb      	strb	r3, [r7, #27]
 80073fe:	e060      	b.n	80074c2 <UART_SetConfig+0x282>
 8007400:	2304      	movs	r3, #4
 8007402:	76fb      	strb	r3, [r7, #27]
 8007404:	e05d      	b.n	80074c2 <UART_SetConfig+0x282>
 8007406:	2308      	movs	r3, #8
 8007408:	76fb      	strb	r3, [r7, #27]
 800740a:	e05a      	b.n	80074c2 <UART_SetConfig+0x282>
 800740c:	2310      	movs	r3, #16
 800740e:	76fb      	strb	r3, [r7, #27]
 8007410:	e057      	b.n	80074c2 <UART_SetConfig+0x282>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a49      	ldr	r2, [pc, #292]	; (800753c <UART_SetConfig+0x2fc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d125      	bne.n	8007468 <UART_SetConfig+0x228>
 800741c:	4b43      	ldr	r3, [pc, #268]	; (800752c <UART_SetConfig+0x2ec>)
 800741e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800742a:	d017      	beq.n	800745c <UART_SetConfig+0x21c>
 800742c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007430:	d817      	bhi.n	8007462 <UART_SetConfig+0x222>
 8007432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007436:	d00b      	beq.n	8007450 <UART_SetConfig+0x210>
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d811      	bhi.n	8007462 <UART_SetConfig+0x222>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <UART_SetConfig+0x20a>
 8007442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007446:	d006      	beq.n	8007456 <UART_SetConfig+0x216>
 8007448:	e00b      	b.n	8007462 <UART_SetConfig+0x222>
 800744a:	2300      	movs	r3, #0
 800744c:	76fb      	strb	r3, [r7, #27]
 800744e:	e038      	b.n	80074c2 <UART_SetConfig+0x282>
 8007450:	2302      	movs	r3, #2
 8007452:	76fb      	strb	r3, [r7, #27]
 8007454:	e035      	b.n	80074c2 <UART_SetConfig+0x282>
 8007456:	2304      	movs	r3, #4
 8007458:	76fb      	strb	r3, [r7, #27]
 800745a:	e032      	b.n	80074c2 <UART_SetConfig+0x282>
 800745c:	2308      	movs	r3, #8
 800745e:	76fb      	strb	r3, [r7, #27]
 8007460:	e02f      	b.n	80074c2 <UART_SetConfig+0x282>
 8007462:	2310      	movs	r3, #16
 8007464:	76fb      	strb	r3, [r7, #27]
 8007466:	e02c      	b.n	80074c2 <UART_SetConfig+0x282>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a2d      	ldr	r2, [pc, #180]	; (8007524 <UART_SetConfig+0x2e4>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d125      	bne.n	80074be <UART_SetConfig+0x27e>
 8007472:	4b2e      	ldr	r3, [pc, #184]	; (800752c <UART_SetConfig+0x2ec>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800747c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007480:	d017      	beq.n	80074b2 <UART_SetConfig+0x272>
 8007482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007486:	d817      	bhi.n	80074b8 <UART_SetConfig+0x278>
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748c:	d00b      	beq.n	80074a6 <UART_SetConfig+0x266>
 800748e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007492:	d811      	bhi.n	80074b8 <UART_SetConfig+0x278>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <UART_SetConfig+0x260>
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749c:	d006      	beq.n	80074ac <UART_SetConfig+0x26c>
 800749e:	e00b      	b.n	80074b8 <UART_SetConfig+0x278>
 80074a0:	2300      	movs	r3, #0
 80074a2:	76fb      	strb	r3, [r7, #27]
 80074a4:	e00d      	b.n	80074c2 <UART_SetConfig+0x282>
 80074a6:	2302      	movs	r3, #2
 80074a8:	76fb      	strb	r3, [r7, #27]
 80074aa:	e00a      	b.n	80074c2 <UART_SetConfig+0x282>
 80074ac:	2304      	movs	r3, #4
 80074ae:	76fb      	strb	r3, [r7, #27]
 80074b0:	e007      	b.n	80074c2 <UART_SetConfig+0x282>
 80074b2:	2308      	movs	r3, #8
 80074b4:	76fb      	strb	r3, [r7, #27]
 80074b6:	e004      	b.n	80074c2 <UART_SetConfig+0x282>
 80074b8:	2310      	movs	r3, #16
 80074ba:	76fb      	strb	r3, [r7, #27]
 80074bc:	e001      	b.n	80074c2 <UART_SetConfig+0x282>
 80074be:	2310      	movs	r3, #16
 80074c0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a17      	ldr	r2, [pc, #92]	; (8007524 <UART_SetConfig+0x2e4>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	f040 8087 	bne.w	80075dc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ce:	7efb      	ldrb	r3, [r7, #27]
 80074d0:	2b08      	cmp	r3, #8
 80074d2:	d837      	bhi.n	8007544 <UART_SetConfig+0x304>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <UART_SetConfig+0x29c>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	08007501 	.word	0x08007501
 80074e0:	08007545 	.word	0x08007545
 80074e4:	08007509 	.word	0x08007509
 80074e8:	08007545 	.word	0x08007545
 80074ec:	0800750f 	.word	0x0800750f
 80074f0:	08007545 	.word	0x08007545
 80074f4:	08007545 	.word	0x08007545
 80074f8:	08007545 	.word	0x08007545
 80074fc:	08007517 	.word	0x08007517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fe fd6a 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 8007504:	6178      	str	r0, [r7, #20]
        break;
 8007506:	e022      	b.n	800754e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007508:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <UART_SetConfig+0x300>)
 800750a:	617b      	str	r3, [r7, #20]
        break;
 800750c:	e01f      	b.n	800754e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800750e:	f7fe fccb 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8007512:	6178      	str	r0, [r7, #20]
        break;
 8007514:	e01b      	b.n	800754e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800751a:	617b      	str	r3, [r7, #20]
        break;
 800751c:	e017      	b.n	800754e <UART_SetConfig+0x30e>
 800751e:	bf00      	nop
 8007520:	efff69f3 	.word	0xefff69f3
 8007524:	40008000 	.word	0x40008000
 8007528:	40013800 	.word	0x40013800
 800752c:	40021000 	.word	0x40021000
 8007530:	40004400 	.word	0x40004400
 8007534:	40004800 	.word	0x40004800
 8007538:	40004c00 	.word	0x40004c00
 800753c:	40005000 	.word	0x40005000
 8007540:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	76bb      	strb	r3, [r7, #26]
        break;
 800754c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80f1 	beq.w	8007738 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	4613      	mov	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	429a      	cmp	r2, r3
 8007564:	d305      	bcc.n	8007572 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	429a      	cmp	r2, r3
 8007570:	d902      	bls.n	8007578 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	76bb      	strb	r3, [r7, #26]
 8007576:	e0df      	b.n	8007738 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	4618      	mov	r0, r3
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	020b      	lsls	r3, r1, #8
 800758a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800758e:	0202      	lsls	r2, r0, #8
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	6849      	ldr	r1, [r1, #4]
 8007594:	0849      	lsrs	r1, r1, #1
 8007596:	4608      	mov	r0, r1
 8007598:	f04f 0100 	mov.w	r1, #0
 800759c:	1814      	adds	r4, r2, r0
 800759e:	eb43 0501 	adc.w	r5, r3, r1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f9 fb4a 	bl	8000c48 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4613      	mov	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c2:	d308      	bcc.n	80075d6 <UART_SetConfig+0x396>
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ca:	d204      	bcs.n	80075d6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	60da      	str	r2, [r3, #12]
 80075d4:	e0b0      	b.n	8007738 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	76bb      	strb	r3, [r7, #26]
 80075da:	e0ad      	b.n	8007738 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	d15b      	bne.n	800769e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80075e6:	7efb      	ldrb	r3, [r7, #27]
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d828      	bhi.n	800763e <UART_SetConfig+0x3fe>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <UART_SetConfig+0x3b4>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007619 	.word	0x08007619
 80075f8:	08007621 	.word	0x08007621
 80075fc:	08007629 	.word	0x08007629
 8007600:	0800763f 	.word	0x0800763f
 8007604:	0800762f 	.word	0x0800762f
 8007608:	0800763f 	.word	0x0800763f
 800760c:	0800763f 	.word	0x0800763f
 8007610:	0800763f 	.word	0x0800763f
 8007614:	08007637 	.word	0x08007637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007618:	f7fe fcde 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 800761c:	6178      	str	r0, [r7, #20]
        break;
 800761e:	e013      	b.n	8007648 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007620:	f7fe fcf0 	bl	8006004 <HAL_RCC_GetPCLK2Freq>
 8007624:	6178      	str	r0, [r7, #20]
        break;
 8007626:	e00f      	b.n	8007648 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007628:	4b49      	ldr	r3, [pc, #292]	; (8007750 <UART_SetConfig+0x510>)
 800762a:	617b      	str	r3, [r7, #20]
        break;
 800762c:	e00c      	b.n	8007648 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762e:	f7fe fc3b 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 8007632:	6178      	str	r0, [r7, #20]
        break;
 8007634:	e008      	b.n	8007648 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763a:	617b      	str	r3, [r7, #20]
        break;
 800763c:	e004      	b.n	8007648 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	76bb      	strb	r3, [r7, #26]
        break;
 8007646:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d074      	beq.n	8007738 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	005a      	lsls	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	441a      	add	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007662:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b0f      	cmp	r3, #15
 8007668:	d916      	bls.n	8007698 <UART_SetConfig+0x458>
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007670:	d212      	bcs.n	8007698 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	b29b      	uxth	r3, r3
 8007676:	f023 030f 	bic.w	r3, r3, #15
 800767a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	b29b      	uxth	r3, r3
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	b29a      	uxth	r2, r3
 8007688:	89fb      	ldrh	r3, [r7, #14]
 800768a:	4313      	orrs	r3, r2
 800768c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	89fa      	ldrh	r2, [r7, #14]
 8007694:	60da      	str	r2, [r3, #12]
 8007696:	e04f      	b.n	8007738 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	76bb      	strb	r3, [r7, #26]
 800769c:	e04c      	b.n	8007738 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800769e:	7efb      	ldrb	r3, [r7, #27]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d828      	bhi.n	80076f6 <UART_SetConfig+0x4b6>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <UART_SetConfig+0x46c>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076d1 	.word	0x080076d1
 80076b0:	080076d9 	.word	0x080076d9
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076f7 	.word	0x080076f7
 80076bc:	080076e7 	.word	0x080076e7
 80076c0:	080076f7 	.word	0x080076f7
 80076c4:	080076f7 	.word	0x080076f7
 80076c8:	080076f7 	.word	0x080076f7
 80076cc:	080076ef 	.word	0x080076ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d0:	f7fe fc82 	bl	8005fd8 <HAL_RCC_GetPCLK1Freq>
 80076d4:	6178      	str	r0, [r7, #20]
        break;
 80076d6:	e013      	b.n	8007700 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d8:	f7fe fc94 	bl	8006004 <HAL_RCC_GetPCLK2Freq>
 80076dc:	6178      	str	r0, [r7, #20]
        break;
 80076de:	e00f      	b.n	8007700 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e0:	4b1b      	ldr	r3, [pc, #108]	; (8007750 <UART_SetConfig+0x510>)
 80076e2:	617b      	str	r3, [r7, #20]
        break;
 80076e4:	e00c      	b.n	8007700 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e6:	f7fe fbdf 	bl	8005ea8 <HAL_RCC_GetSysClockFreq>
 80076ea:	6178      	str	r0, [r7, #20]
        break;
 80076ec:	e008      	b.n	8007700 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f2:	617b      	str	r3, [r7, #20]
        break;
 80076f4:	e004      	b.n	8007700 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	76bb      	strb	r3, [r7, #26]
        break;
 80076fe:	bf00      	nop
    }

    if (pclk != 0U)
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d018      	beq.n	8007738 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	085a      	lsrs	r2, r3, #1
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	441a      	add	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b0f      	cmp	r3, #15
 800771e:	d909      	bls.n	8007734 <UART_SetConfig+0x4f4>
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007726:	d205      	bcs.n	8007734 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e001      	b.n	8007738 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007744:	7ebb      	ldrb	r3, [r7, #26]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bdb0      	pop	{r4, r5, r7, pc}
 800774e:	bf00      	nop
 8007750:	00f42400 	.word	0x00f42400

08007754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	430a      	orrs	r2, r1
 800779e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00a      	beq.n	80077c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00a      	beq.n	80077e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	430a      	orrs	r2, r1
 80077e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	430a      	orrs	r2, r1
 8007804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	430a      	orrs	r2, r1
 8007826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01a      	beq.n	800786a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007852:	d10a      	bne.n	800786a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00a      	beq.n	800788c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  }
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078a8:	f7fc fade 	bl	8003e68 <HAL_GetTick>
 80078ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d10e      	bne.n	80078da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f82d 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e023      	b.n	8007922 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d10e      	bne.n	8007906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f817 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e00d      	b.n	8007922 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2220      	movs	r2, #32
 800790a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2220      	movs	r2, #32
 8007910:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b09c      	sub	sp, #112	; 0x70
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	603b      	str	r3, [r7, #0]
 8007936:	4613      	mov	r3, r2
 8007938:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793a:	e0a5      	b.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800793c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	f000 80a1 	beq.w	8007a88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007946:	f7fc fa8f 	bl	8003e68 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007952:	429a      	cmp	r2, r3
 8007954:	d302      	bcc.n	800795c <UART_WaitOnFlagUntilTimeout+0x32>
 8007956:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007958:	2b00      	cmp	r3, #0
 800795a:	d13e      	bne.n	80079da <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800796a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800796c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007970:	667b      	str	r3, [r7, #100]	; 0x64
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800797a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800797c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007980:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e6      	bne.n	800795c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800799e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a0:	f023 0301 	bic.w	r3, r3, #1
 80079a4:	663b      	str	r3, [r7, #96]	; 0x60
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80079b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e5      	bne.n	800798e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2220      	movs	r2, #32
 80079c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e067      	b.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d04f      	beq.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079f6:	d147      	bne.n	8007a88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a00:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e6      	bne.n	8007a02 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f023 0301 	bic.w	r3, r3, #1
 8007a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3308      	adds	r3, #8
 8007a52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a54:	623a      	str	r2, [r7, #32]
 8007a56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e5      	bne.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2220      	movs	r2, #32
 8007a72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e010      	b.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69da      	ldr	r2, [r3, #28]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	4013      	ands	r3, r2
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	bf0c      	ite	eq
 8007a98:	2301      	moveq	r3, #1
 8007a9a:	2300      	movne	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f43f af4a 	beq.w	800793c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3770      	adds	r7, #112	; 0x70
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <__cxa_pure_virtual>:
 8007ab2:	b508      	push	{r3, lr}
 8007ab4:	f000 f80c 	bl	8007ad0 <_ZSt9terminatev>

08007ab8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007ab8:	b508      	push	{r3, lr}
 8007aba:	4780      	blx	r0
 8007abc:	f000 f80d 	bl	8007ada <abort>

08007ac0 <_ZSt13get_terminatev>:
 8007ac0:	4b02      	ldr	r3, [pc, #8]	; (8007acc <_ZSt13get_terminatev+0xc>)
 8007ac2:	6818      	ldr	r0, [r3, #0]
 8007ac4:	f3bf 8f5b 	dmb	ish
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	20000014 	.word	0x20000014

08007ad0 <_ZSt9terminatev>:
 8007ad0:	b508      	push	{r3, lr}
 8007ad2:	f7ff fff5 	bl	8007ac0 <_ZSt13get_terminatev>
 8007ad6:	f7ff ffef 	bl	8007ab8 <_ZN10__cxxabiv111__terminateEPFvvE>

08007ada <abort>:
 8007ada:	b508      	push	{r3, lr}
 8007adc:	2006      	movs	r0, #6
 8007ade:	f000 fd55 	bl	800858c <raise>
 8007ae2:	2001      	movs	r0, #1
 8007ae4:	f7fb fd62 	bl	80035ac <_exit>

08007ae8 <__errno>:
 8007ae8:	4b01      	ldr	r3, [pc, #4]	; (8007af0 <__errno+0x8>)
 8007aea:	6818      	ldr	r0, [r3, #0]
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	20000018 	.word	0x20000018

08007af4 <__libc_init_array>:
 8007af4:	b570      	push	{r4, r5, r6, lr}
 8007af6:	4d0d      	ldr	r5, [pc, #52]	; (8007b2c <__libc_init_array+0x38>)
 8007af8:	4c0d      	ldr	r4, [pc, #52]	; (8007b30 <__libc_init_array+0x3c>)
 8007afa:	1b64      	subs	r4, r4, r5
 8007afc:	10a4      	asrs	r4, r4, #2
 8007afe:	2600      	movs	r6, #0
 8007b00:	42a6      	cmp	r6, r4
 8007b02:	d109      	bne.n	8007b18 <__libc_init_array+0x24>
 8007b04:	4d0b      	ldr	r5, [pc, #44]	; (8007b34 <__libc_init_array+0x40>)
 8007b06:	4c0c      	ldr	r4, [pc, #48]	; (8007b38 <__libc_init_array+0x44>)
 8007b08:	f002 ff3e 	bl	800a988 <_init>
 8007b0c:	1b64      	subs	r4, r4, r5
 8007b0e:	10a4      	asrs	r4, r4, #2
 8007b10:	2600      	movs	r6, #0
 8007b12:	42a6      	cmp	r6, r4
 8007b14:	d105      	bne.n	8007b22 <__libc_init_array+0x2e>
 8007b16:	bd70      	pop	{r4, r5, r6, pc}
 8007b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b1c:	4798      	blx	r3
 8007b1e:	3601      	adds	r6, #1
 8007b20:	e7ee      	b.n	8007b00 <__libc_init_array+0xc>
 8007b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b26:	4798      	blx	r3
 8007b28:	3601      	adds	r6, #1
 8007b2a:	e7f2      	b.n	8007b12 <__libc_init_array+0x1e>
 8007b2c:	0800bc7c 	.word	0x0800bc7c
 8007b30:	0800bc7c 	.word	0x0800bc7c
 8007b34:	0800bc7c 	.word	0x0800bc7c
 8007b38:	0800bc80 	.word	0x0800bc80

08007b3c <memset>:
 8007b3c:	4402      	add	r2, r0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d100      	bne.n	8007b46 <memset+0xa>
 8007b44:	4770      	bx	lr
 8007b46:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4a:	e7f9      	b.n	8007b40 <memset+0x4>

08007b4c <__cvt>:
 8007b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b50:	ec55 4b10 	vmov	r4, r5, d0
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	460e      	mov	r6, r1
 8007b58:	4619      	mov	r1, r3
 8007b5a:	462b      	mov	r3, r5
 8007b5c:	bfbb      	ittet	lt
 8007b5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007b62:	461d      	movlt	r5, r3
 8007b64:	2300      	movge	r3, #0
 8007b66:	232d      	movlt	r3, #45	; 0x2d
 8007b68:	700b      	strb	r3, [r1, #0]
 8007b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007b70:	4691      	mov	r9, r2
 8007b72:	f023 0820 	bic.w	r8, r3, #32
 8007b76:	bfbc      	itt	lt
 8007b78:	4622      	movlt	r2, r4
 8007b7a:	4614      	movlt	r4, r2
 8007b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007b80:	d005      	beq.n	8007b8e <__cvt+0x42>
 8007b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007b86:	d100      	bne.n	8007b8a <__cvt+0x3e>
 8007b88:	3601      	adds	r6, #1
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	e000      	b.n	8007b90 <__cvt+0x44>
 8007b8e:	2103      	movs	r1, #3
 8007b90:	ab03      	add	r3, sp, #12
 8007b92:	9301      	str	r3, [sp, #4]
 8007b94:	ab02      	add	r3, sp, #8
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	ec45 4b10 	vmov	d0, r4, r5
 8007b9c:	4653      	mov	r3, sl
 8007b9e:	4632      	mov	r2, r6
 8007ba0:	f000 fe7e 	bl	80088a0 <_dtoa_r>
 8007ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ba8:	4607      	mov	r7, r0
 8007baa:	d102      	bne.n	8007bb2 <__cvt+0x66>
 8007bac:	f019 0f01 	tst.w	r9, #1
 8007bb0:	d022      	beq.n	8007bf8 <__cvt+0xac>
 8007bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bb6:	eb07 0906 	add.w	r9, r7, r6
 8007bba:	d110      	bne.n	8007bde <__cvt+0x92>
 8007bbc:	783b      	ldrb	r3, [r7, #0]
 8007bbe:	2b30      	cmp	r3, #48	; 0x30
 8007bc0:	d10a      	bne.n	8007bd8 <__cvt+0x8c>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	4629      	mov	r1, r5
 8007bca:	f7f8 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bce:	b918      	cbnz	r0, 8007bd8 <__cvt+0x8c>
 8007bd0:	f1c6 0601 	rsb	r6, r6, #1
 8007bd4:	f8ca 6000 	str.w	r6, [sl]
 8007bd8:	f8da 3000 	ldr.w	r3, [sl]
 8007bdc:	4499      	add	r9, r3
 8007bde:	2200      	movs	r2, #0
 8007be0:	2300      	movs	r3, #0
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7f8 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bea:	b108      	cbz	r0, 8007bf0 <__cvt+0xa4>
 8007bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bf0:	2230      	movs	r2, #48	; 0x30
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	454b      	cmp	r3, r9
 8007bf6:	d307      	bcc.n	8007c08 <__cvt+0xbc>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bfc:	1bdb      	subs	r3, r3, r7
 8007bfe:	4638      	mov	r0, r7
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	b004      	add	sp, #16
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	1c59      	adds	r1, r3, #1
 8007c0a:	9103      	str	r1, [sp, #12]
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e7f0      	b.n	8007bf2 <__cvt+0xa6>

08007c10 <__exponent>:
 8007c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c12:	4603      	mov	r3, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	bfb8      	it	lt
 8007c18:	4249      	neglt	r1, r1
 8007c1a:	f803 2b02 	strb.w	r2, [r3], #2
 8007c1e:	bfb4      	ite	lt
 8007c20:	222d      	movlt	r2, #45	; 0x2d
 8007c22:	222b      	movge	r2, #43	; 0x2b
 8007c24:	2909      	cmp	r1, #9
 8007c26:	7042      	strb	r2, [r0, #1]
 8007c28:	dd2a      	ble.n	8007c80 <__exponent+0x70>
 8007c2a:	f10d 0407 	add.w	r4, sp, #7
 8007c2e:	46a4      	mov	ip, r4
 8007c30:	270a      	movs	r7, #10
 8007c32:	46a6      	mov	lr, r4
 8007c34:	460a      	mov	r2, r1
 8007c36:	fb91 f6f7 	sdiv	r6, r1, r7
 8007c3a:	fb07 1516 	mls	r5, r7, r6, r1
 8007c3e:	3530      	adds	r5, #48	; 0x30
 8007c40:	2a63      	cmp	r2, #99	; 0x63
 8007c42:	f104 34ff 	add.w	r4, r4, #4294967295
 8007c46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	dcf1      	bgt.n	8007c32 <__exponent+0x22>
 8007c4e:	3130      	adds	r1, #48	; 0x30
 8007c50:	f1ae 0502 	sub.w	r5, lr, #2
 8007c54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007c58:	1c44      	adds	r4, r0, #1
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4561      	cmp	r1, ip
 8007c5e:	d30a      	bcc.n	8007c76 <__exponent+0x66>
 8007c60:	f10d 0209 	add.w	r2, sp, #9
 8007c64:	eba2 020e 	sub.w	r2, r2, lr
 8007c68:	4565      	cmp	r5, ip
 8007c6a:	bf88      	it	hi
 8007c6c:	2200      	movhi	r2, #0
 8007c6e:	4413      	add	r3, r2
 8007c70:	1a18      	subs	r0, r3, r0
 8007c72:	b003      	add	sp, #12
 8007c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007c7e:	e7ed      	b.n	8007c5c <__exponent+0x4c>
 8007c80:	2330      	movs	r3, #48	; 0x30
 8007c82:	3130      	adds	r1, #48	; 0x30
 8007c84:	7083      	strb	r3, [r0, #2]
 8007c86:	70c1      	strb	r1, [r0, #3]
 8007c88:	1d03      	adds	r3, r0, #4
 8007c8a:	e7f1      	b.n	8007c70 <__exponent+0x60>

08007c8c <_printf_float>:
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	ed2d 8b02 	vpush	{d8}
 8007c94:	b08d      	sub	sp, #52	; 0x34
 8007c96:	460c      	mov	r4, r1
 8007c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	461f      	mov	r7, r3
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	f001 fda1 	bl	80097e8 <_localeconv_r>
 8007ca6:	f8d0 a000 	ldr.w	sl, [r0]
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 fa90 	bl	80001d0 <strlen>
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	9305      	str	r3, [sp, #20]
 8007cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007cc0:	3307      	adds	r3, #7
 8007cc2:	f023 0307 	bic.w	r3, r3, #7
 8007cc6:	f103 0208 	add.w	r2, r3, #8
 8007cca:	f8c8 2000 	str.w	r2, [r8]
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007cd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007cda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007cde:	9307      	str	r3, [sp, #28]
 8007ce0:	f8cd 8018 	str.w	r8, [sp, #24]
 8007ce4:	ee08 0a10 	vmov	s16, r0
 8007ce8:	4b9f      	ldr	r3, [pc, #636]	; (8007f68 <_printf_float+0x2dc>)
 8007cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	f7f8 ff1b 	bl	8000b2c <__aeabi_dcmpun>
 8007cf6:	bb88      	cbnz	r0, 8007d5c <_printf_float+0xd0>
 8007cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfc:	4b9a      	ldr	r3, [pc, #616]	; (8007f68 <_printf_float+0x2dc>)
 8007cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8007d02:	f7f8 fef5 	bl	8000af0 <__aeabi_dcmple>
 8007d06:	bb48      	cbnz	r0, 8007d5c <_printf_float+0xd0>
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4649      	mov	r1, r9
 8007d10:	f7f8 fee4 	bl	8000adc <__aeabi_dcmplt>
 8007d14:	b110      	cbz	r0, 8007d1c <_printf_float+0x90>
 8007d16:	232d      	movs	r3, #45	; 0x2d
 8007d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d1c:	4b93      	ldr	r3, [pc, #588]	; (8007f6c <_printf_float+0x2e0>)
 8007d1e:	4894      	ldr	r0, [pc, #592]	; (8007f70 <_printf_float+0x2e4>)
 8007d20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d24:	bf94      	ite	ls
 8007d26:	4698      	movls	r8, r3
 8007d28:	4680      	movhi	r8, r0
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	6123      	str	r3, [r4, #16]
 8007d2e:	9b05      	ldr	r3, [sp, #20]
 8007d30:	f023 0204 	bic.w	r2, r3, #4
 8007d34:	6022      	str	r2, [r4, #0]
 8007d36:	f04f 0900 	mov.w	r9, #0
 8007d3a:	9700      	str	r7, [sp, #0]
 8007d3c:	4633      	mov	r3, r6
 8007d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f000 f9d8 	bl	80080f8 <_printf_common>
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f040 8090 	bne.w	8007e6e <_printf_float+0x1e2>
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d52:	b00d      	add	sp, #52	; 0x34
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4642      	mov	r2, r8
 8007d5e:	464b      	mov	r3, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	4649      	mov	r1, r9
 8007d64:	f7f8 fee2 	bl	8000b2c <__aeabi_dcmpun>
 8007d68:	b140      	cbz	r0, 8007d7c <_printf_float+0xf0>
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbc      	itt	lt
 8007d70:	232d      	movlt	r3, #45	; 0x2d
 8007d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007d76:	487f      	ldr	r0, [pc, #508]	; (8007f74 <_printf_float+0x2e8>)
 8007d78:	4b7f      	ldr	r3, [pc, #508]	; (8007f78 <_printf_float+0x2ec>)
 8007d7a:	e7d1      	b.n	8007d20 <_printf_float+0x94>
 8007d7c:	6863      	ldr	r3, [r4, #4]
 8007d7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007d82:	9206      	str	r2, [sp, #24]
 8007d84:	1c5a      	adds	r2, r3, #1
 8007d86:	d13f      	bne.n	8007e08 <_printf_float+0x17c>
 8007d88:	2306      	movs	r3, #6
 8007d8a:	6063      	str	r3, [r4, #4]
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	6861      	ldr	r1, [r4, #4]
 8007d90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d94:	2300      	movs	r3, #0
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	ab0a      	add	r3, sp, #40	; 0x28
 8007d9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007d9e:	ab09      	add	r3, sp, #36	; 0x24
 8007da0:	ec49 8b10 	vmov	d0, r8, r9
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	6022      	str	r2, [r4, #0]
 8007da8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007dac:	4628      	mov	r0, r5
 8007dae:	f7ff fecd 	bl	8007b4c <__cvt>
 8007db2:	9b06      	ldr	r3, [sp, #24]
 8007db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db6:	2b47      	cmp	r3, #71	; 0x47
 8007db8:	4680      	mov	r8, r0
 8007dba:	d108      	bne.n	8007dce <_printf_float+0x142>
 8007dbc:	1cc8      	adds	r0, r1, #3
 8007dbe:	db02      	blt.n	8007dc6 <_printf_float+0x13a>
 8007dc0:	6863      	ldr	r3, [r4, #4]
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	dd41      	ble.n	8007e4a <_printf_float+0x1be>
 8007dc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8007dca:	fa5f fb8b 	uxtb.w	fp, fp
 8007dce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dd2:	d820      	bhi.n	8007e16 <_printf_float+0x18a>
 8007dd4:	3901      	subs	r1, #1
 8007dd6:	465a      	mov	r2, fp
 8007dd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8007dde:	f7ff ff17 	bl	8007c10 <__exponent>
 8007de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de4:	1813      	adds	r3, r2, r0
 8007de6:	2a01      	cmp	r2, #1
 8007de8:	4681      	mov	r9, r0
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	dc02      	bgt.n	8007df4 <_printf_float+0x168>
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	07d2      	lsls	r2, r2, #31
 8007df2:	d501      	bpl.n	8007df8 <_printf_float+0x16c>
 8007df4:	3301      	adds	r3, #1
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d09c      	beq.n	8007d3a <_printf_float+0xae>
 8007e00:	232d      	movs	r3, #45	; 0x2d
 8007e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e06:	e798      	b.n	8007d3a <_printf_float+0xae>
 8007e08:	9a06      	ldr	r2, [sp, #24]
 8007e0a:	2a47      	cmp	r2, #71	; 0x47
 8007e0c:	d1be      	bne.n	8007d8c <_printf_float+0x100>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1bc      	bne.n	8007d8c <_printf_float+0x100>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7b9      	b.n	8007d8a <_printf_float+0xfe>
 8007e16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e1a:	d118      	bne.n	8007e4e <_printf_float+0x1c2>
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	6863      	ldr	r3, [r4, #4]
 8007e20:	dd0b      	ble.n	8007e3a <_printf_float+0x1ae>
 8007e22:	6121      	str	r1, [r4, #16]
 8007e24:	b913      	cbnz	r3, 8007e2c <_printf_float+0x1a0>
 8007e26:	6822      	ldr	r2, [r4, #0]
 8007e28:	07d0      	lsls	r0, r2, #31
 8007e2a:	d502      	bpl.n	8007e32 <_printf_float+0x1a6>
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	440b      	add	r3, r1
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8007e34:	f04f 0900 	mov.w	r9, #0
 8007e38:	e7de      	b.n	8007df8 <_printf_float+0x16c>
 8007e3a:	b913      	cbnz	r3, 8007e42 <_printf_float+0x1b6>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	07d2      	lsls	r2, r2, #31
 8007e40:	d501      	bpl.n	8007e46 <_printf_float+0x1ba>
 8007e42:	3302      	adds	r3, #2
 8007e44:	e7f4      	b.n	8007e30 <_printf_float+0x1a4>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e7f2      	b.n	8007e30 <_printf_float+0x1a4>
 8007e4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e50:	4299      	cmp	r1, r3
 8007e52:	db05      	blt.n	8007e60 <_printf_float+0x1d4>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	6121      	str	r1, [r4, #16]
 8007e58:	07d8      	lsls	r0, r3, #31
 8007e5a:	d5ea      	bpl.n	8007e32 <_printf_float+0x1a6>
 8007e5c:	1c4b      	adds	r3, r1, #1
 8007e5e:	e7e7      	b.n	8007e30 <_printf_float+0x1a4>
 8007e60:	2900      	cmp	r1, #0
 8007e62:	bfd4      	ite	le
 8007e64:	f1c1 0202 	rsble	r2, r1, #2
 8007e68:	2201      	movgt	r2, #1
 8007e6a:	4413      	add	r3, r2
 8007e6c:	e7e0      	b.n	8007e30 <_printf_float+0x1a4>
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	055a      	lsls	r2, r3, #21
 8007e72:	d407      	bmi.n	8007e84 <_printf_float+0x1f8>
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	4642      	mov	r2, r8
 8007e78:	4631      	mov	r1, r6
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b8      	blx	r7
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d12c      	bne.n	8007edc <_printf_float+0x250>
 8007e82:	e764      	b.n	8007d4e <_printf_float+0xc2>
 8007e84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e88:	f240 80e0 	bls.w	800804c <_printf_float+0x3c0>
 8007e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007e90:	2200      	movs	r2, #0
 8007e92:	2300      	movs	r3, #0
 8007e94:	f7f8 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d034      	beq.n	8007f06 <_printf_float+0x27a>
 8007e9c:	4a37      	ldr	r2, [pc, #220]	; (8007f7c <_printf_float+0x2f0>)
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f af51 	beq.w	8007d4e <_printf_float+0xc2>
 8007eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	db02      	blt.n	8007eba <_printf_float+0x22e>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	07d8      	lsls	r0, r3, #31
 8007eb8:	d510      	bpl.n	8007edc <_printf_float+0x250>
 8007eba:	ee18 3a10 	vmov	r3, s16
 8007ebe:	4652      	mov	r2, sl
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	47b8      	blx	r7
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	f43f af41 	beq.w	8007d4e <_printf_float+0xc2>
 8007ecc:	f04f 0800 	mov.w	r8, #0
 8007ed0:	f104 091a 	add.w	r9, r4, #26
 8007ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	4543      	cmp	r3, r8
 8007eda:	dc09      	bgt.n	8007ef0 <_printf_float+0x264>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	079b      	lsls	r3, r3, #30
 8007ee0:	f100 8105 	bmi.w	80080ee <_printf_float+0x462>
 8007ee4:	68e0      	ldr	r0, [r4, #12]
 8007ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee8:	4298      	cmp	r0, r3
 8007eea:	bfb8      	it	lt
 8007eec:	4618      	movlt	r0, r3
 8007eee:	e730      	b.n	8007d52 <_printf_float+0xc6>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	464a      	mov	r2, r9
 8007ef4:	4631      	mov	r1, r6
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	47b8      	blx	r7
 8007efa:	3001      	adds	r0, #1
 8007efc:	f43f af27 	beq.w	8007d4e <_printf_float+0xc2>
 8007f00:	f108 0801 	add.w	r8, r8, #1
 8007f04:	e7e6      	b.n	8007ed4 <_printf_float+0x248>
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc39      	bgt.n	8007f80 <_printf_float+0x2f4>
 8007f0c:	4a1b      	ldr	r2, [pc, #108]	; (8007f7c <_printf_float+0x2f0>)
 8007f0e:	2301      	movs	r3, #1
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af19 	beq.w	8007d4e <_printf_float+0xc2>
 8007f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d102      	bne.n	8007f2a <_printf_float+0x29e>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	07d9      	lsls	r1, r3, #31
 8007f28:	d5d8      	bpl.n	8007edc <_printf_float+0x250>
 8007f2a:	ee18 3a10 	vmov	r3, s16
 8007f2e:	4652      	mov	r2, sl
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	f43f af09 	beq.w	8007d4e <_printf_float+0xc2>
 8007f3c:	f04f 0900 	mov.w	r9, #0
 8007f40:	f104 0a1a 	add.w	sl, r4, #26
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	425b      	negs	r3, r3
 8007f48:	454b      	cmp	r3, r9
 8007f4a:	dc01      	bgt.n	8007f50 <_printf_float+0x2c4>
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f4e:	e792      	b.n	8007e76 <_printf_float+0x1ea>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4652      	mov	r2, sl
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f aef7 	beq.w	8007d4e <_printf_float+0xc2>
 8007f60:	f109 0901 	add.w	r9, r9, #1
 8007f64:	e7ee      	b.n	8007f44 <_printf_float+0x2b8>
 8007f66:	bf00      	nop
 8007f68:	7fefffff 	.word	0x7fefffff
 8007f6c:	0800b894 	.word	0x0800b894
 8007f70:	0800b898 	.word	0x0800b898
 8007f74:	0800b8a0 	.word	0x0800b8a0
 8007f78:	0800b89c 	.word	0x0800b89c
 8007f7c:	0800b8a4 	.word	0x0800b8a4
 8007f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f84:	429a      	cmp	r2, r3
 8007f86:	bfa8      	it	ge
 8007f88:	461a      	movge	r2, r3
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	4691      	mov	r9, r2
 8007f8e:	dc37      	bgt.n	8008000 <_printf_float+0x374>
 8007f90:	f04f 0b00 	mov.w	fp, #0
 8007f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f98:	f104 021a 	add.w	r2, r4, #26
 8007f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f9e:	9305      	str	r3, [sp, #20]
 8007fa0:	eba3 0309 	sub.w	r3, r3, r9
 8007fa4:	455b      	cmp	r3, fp
 8007fa6:	dc33      	bgt.n	8008010 <_printf_float+0x384>
 8007fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fac:	429a      	cmp	r2, r3
 8007fae:	db3b      	blt.n	8008028 <_printf_float+0x39c>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	07da      	lsls	r2, r3, #31
 8007fb4:	d438      	bmi.n	8008028 <_printf_float+0x39c>
 8007fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	eba2 0901 	sub.w	r9, r2, r1
 8007fc2:	4599      	cmp	r9, r3
 8007fc4:	bfa8      	it	ge
 8007fc6:	4699      	movge	r9, r3
 8007fc8:	f1b9 0f00 	cmp.w	r9, #0
 8007fcc:	dc35      	bgt.n	800803a <_printf_float+0x3ae>
 8007fce:	f04f 0800 	mov.w	r8, #0
 8007fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fd6:	f104 0a1a 	add.w	sl, r4, #26
 8007fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	eba3 0309 	sub.w	r3, r3, r9
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	f77f af79 	ble.w	8007edc <_printf_float+0x250>
 8007fea:	2301      	movs	r3, #1
 8007fec:	4652      	mov	r2, sl
 8007fee:	4631      	mov	r1, r6
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	47b8      	blx	r7
 8007ff4:	3001      	adds	r0, #1
 8007ff6:	f43f aeaa 	beq.w	8007d4e <_printf_float+0xc2>
 8007ffa:	f108 0801 	add.w	r8, r8, #1
 8007ffe:	e7ec      	b.n	8007fda <_printf_float+0x34e>
 8008000:	4613      	mov	r3, r2
 8008002:	4631      	mov	r1, r6
 8008004:	4642      	mov	r2, r8
 8008006:	4628      	mov	r0, r5
 8008008:	47b8      	blx	r7
 800800a:	3001      	adds	r0, #1
 800800c:	d1c0      	bne.n	8007f90 <_printf_float+0x304>
 800800e:	e69e      	b.n	8007d4e <_printf_float+0xc2>
 8008010:	2301      	movs	r3, #1
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	9205      	str	r2, [sp, #20]
 8008018:	47b8      	blx	r7
 800801a:	3001      	adds	r0, #1
 800801c:	f43f ae97 	beq.w	8007d4e <_printf_float+0xc2>
 8008020:	9a05      	ldr	r2, [sp, #20]
 8008022:	f10b 0b01 	add.w	fp, fp, #1
 8008026:	e7b9      	b.n	8007f9c <_printf_float+0x310>
 8008028:	ee18 3a10 	vmov	r3, s16
 800802c:	4652      	mov	r2, sl
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d1be      	bne.n	8007fb6 <_printf_float+0x32a>
 8008038:	e689      	b.n	8007d4e <_printf_float+0xc2>
 800803a:	9a05      	ldr	r2, [sp, #20]
 800803c:	464b      	mov	r3, r9
 800803e:	4442      	add	r2, r8
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	d1c1      	bne.n	8007fce <_printf_float+0x342>
 800804a:	e680      	b.n	8007d4e <_printf_float+0xc2>
 800804c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800804e:	2a01      	cmp	r2, #1
 8008050:	dc01      	bgt.n	8008056 <_printf_float+0x3ca>
 8008052:	07db      	lsls	r3, r3, #31
 8008054:	d538      	bpl.n	80080c8 <_printf_float+0x43c>
 8008056:	2301      	movs	r3, #1
 8008058:	4642      	mov	r2, r8
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	f43f ae74 	beq.w	8007d4e <_printf_float+0xc2>
 8008066:	ee18 3a10 	vmov	r3, s16
 800806a:	4652      	mov	r2, sl
 800806c:	4631      	mov	r1, r6
 800806e:	4628      	mov	r0, r5
 8008070:	47b8      	blx	r7
 8008072:	3001      	adds	r0, #1
 8008074:	f43f ae6b 	beq.w	8007d4e <_printf_float+0xc2>
 8008078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800807c:	2200      	movs	r2, #0
 800807e:	2300      	movs	r3, #0
 8008080:	f7f8 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8008084:	b9d8      	cbnz	r0, 80080be <_printf_float+0x432>
 8008086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008088:	f108 0201 	add.w	r2, r8, #1
 800808c:	3b01      	subs	r3, #1
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	d10e      	bne.n	80080b6 <_printf_float+0x42a>
 8008098:	e659      	b.n	8007d4e <_printf_float+0xc2>
 800809a:	2301      	movs	r3, #1
 800809c:	4652      	mov	r2, sl
 800809e:	4631      	mov	r1, r6
 80080a0:	4628      	mov	r0, r5
 80080a2:	47b8      	blx	r7
 80080a4:	3001      	adds	r0, #1
 80080a6:	f43f ae52 	beq.w	8007d4e <_printf_float+0xc2>
 80080aa:	f108 0801 	add.w	r8, r8, #1
 80080ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4543      	cmp	r3, r8
 80080b4:	dcf1      	bgt.n	800809a <_printf_float+0x40e>
 80080b6:	464b      	mov	r3, r9
 80080b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80080bc:	e6dc      	b.n	8007e78 <_printf_float+0x1ec>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	f104 0a1a 	add.w	sl, r4, #26
 80080c6:	e7f2      	b.n	80080ae <_printf_float+0x422>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4642      	mov	r2, r8
 80080cc:	e7df      	b.n	800808e <_printf_float+0x402>
 80080ce:	2301      	movs	r3, #1
 80080d0:	464a      	mov	r2, r9
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f ae38 	beq.w	8007d4e <_printf_float+0xc2>
 80080de:	f108 0801 	add.w	r8, r8, #1
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	4543      	cmp	r3, r8
 80080ea:	dcf0      	bgt.n	80080ce <_printf_float+0x442>
 80080ec:	e6fa      	b.n	8007ee4 <_printf_float+0x258>
 80080ee:	f04f 0800 	mov.w	r8, #0
 80080f2:	f104 0919 	add.w	r9, r4, #25
 80080f6:	e7f4      	b.n	80080e2 <_printf_float+0x456>

080080f8 <_printf_common>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	4616      	mov	r6, r2
 80080fe:	4699      	mov	r9, r3
 8008100:	688a      	ldr	r2, [r1, #8]
 8008102:	690b      	ldr	r3, [r1, #16]
 8008104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008108:	4293      	cmp	r3, r2
 800810a:	bfb8      	it	lt
 800810c:	4613      	movlt	r3, r2
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008114:	4607      	mov	r7, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b10a      	cbz	r2, 800811e <_printf_common+0x26>
 800811a:	3301      	adds	r3, #1
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	0699      	lsls	r1, r3, #26
 8008122:	bf42      	ittt	mi
 8008124:	6833      	ldrmi	r3, [r6, #0]
 8008126:	3302      	addmi	r3, #2
 8008128:	6033      	strmi	r3, [r6, #0]
 800812a:	6825      	ldr	r5, [r4, #0]
 800812c:	f015 0506 	ands.w	r5, r5, #6
 8008130:	d106      	bne.n	8008140 <_printf_common+0x48>
 8008132:	f104 0a19 	add.w	sl, r4, #25
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	6832      	ldr	r2, [r6, #0]
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	42ab      	cmp	r3, r5
 800813e:	dc26      	bgt.n	800818e <_printf_common+0x96>
 8008140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008144:	1e13      	subs	r3, r2, #0
 8008146:	6822      	ldr	r2, [r4, #0]
 8008148:	bf18      	it	ne
 800814a:	2301      	movne	r3, #1
 800814c:	0692      	lsls	r2, r2, #26
 800814e:	d42b      	bmi.n	80081a8 <_printf_common+0xb0>
 8008150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008154:	4649      	mov	r1, r9
 8008156:	4638      	mov	r0, r7
 8008158:	47c0      	blx	r8
 800815a:	3001      	adds	r0, #1
 800815c:	d01e      	beq.n	800819c <_printf_common+0xa4>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	68e5      	ldr	r5, [r4, #12]
 8008162:	6832      	ldr	r2, [r6, #0]
 8008164:	f003 0306 	and.w	r3, r3, #6
 8008168:	2b04      	cmp	r3, #4
 800816a:	bf08      	it	eq
 800816c:	1aad      	subeq	r5, r5, r2
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	6922      	ldr	r2, [r4, #16]
 8008172:	bf0c      	ite	eq
 8008174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008178:	2500      	movne	r5, #0
 800817a:	4293      	cmp	r3, r2
 800817c:	bfc4      	itt	gt
 800817e:	1a9b      	subgt	r3, r3, r2
 8008180:	18ed      	addgt	r5, r5, r3
 8008182:	2600      	movs	r6, #0
 8008184:	341a      	adds	r4, #26
 8008186:	42b5      	cmp	r5, r6
 8008188:	d11a      	bne.n	80081c0 <_printf_common+0xc8>
 800818a:	2000      	movs	r0, #0
 800818c:	e008      	b.n	80081a0 <_printf_common+0xa8>
 800818e:	2301      	movs	r3, #1
 8008190:	4652      	mov	r2, sl
 8008192:	4649      	mov	r1, r9
 8008194:	4638      	mov	r0, r7
 8008196:	47c0      	blx	r8
 8008198:	3001      	adds	r0, #1
 800819a:	d103      	bne.n	80081a4 <_printf_common+0xac>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7c6      	b.n	8008136 <_printf_common+0x3e>
 80081a8:	18e1      	adds	r1, r4, r3
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	2030      	movs	r0, #48	; 0x30
 80081ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081b2:	4422      	add	r2, r4
 80081b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081bc:	3302      	adds	r3, #2
 80081be:	e7c7      	b.n	8008150 <_printf_common+0x58>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4622      	mov	r2, r4
 80081c4:	4649      	mov	r1, r9
 80081c6:	4638      	mov	r0, r7
 80081c8:	47c0      	blx	r8
 80081ca:	3001      	adds	r0, #1
 80081cc:	d0e6      	beq.n	800819c <_printf_common+0xa4>
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7d9      	b.n	8008186 <_printf_common+0x8e>
	...

080081d4 <_printf_i>:
 80081d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	460c      	mov	r4, r1
 80081da:	4691      	mov	r9, r2
 80081dc:	7e27      	ldrb	r7, [r4, #24]
 80081de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e0:	2f78      	cmp	r7, #120	; 0x78
 80081e2:	4680      	mov	r8, r0
 80081e4:	469a      	mov	sl, r3
 80081e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081ea:	d807      	bhi.n	80081fc <_printf_i+0x28>
 80081ec:	2f62      	cmp	r7, #98	; 0x62
 80081ee:	d80a      	bhi.n	8008206 <_printf_i+0x32>
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f000 80d8 	beq.w	80083a6 <_printf_i+0x1d2>
 80081f6:	2f58      	cmp	r7, #88	; 0x58
 80081f8:	f000 80a3 	beq.w	8008342 <_printf_i+0x16e>
 80081fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008204:	e03a      	b.n	800827c <_printf_i+0xa8>
 8008206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800820a:	2b15      	cmp	r3, #21
 800820c:	d8f6      	bhi.n	80081fc <_printf_i+0x28>
 800820e:	a001      	add	r0, pc, #4	; (adr r0, 8008214 <_printf_i+0x40>)
 8008210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008214:	0800826d 	.word	0x0800826d
 8008218:	08008281 	.word	0x08008281
 800821c:	080081fd 	.word	0x080081fd
 8008220:	080081fd 	.word	0x080081fd
 8008224:	080081fd 	.word	0x080081fd
 8008228:	080081fd 	.word	0x080081fd
 800822c:	08008281 	.word	0x08008281
 8008230:	080081fd 	.word	0x080081fd
 8008234:	080081fd 	.word	0x080081fd
 8008238:	080081fd 	.word	0x080081fd
 800823c:	080081fd 	.word	0x080081fd
 8008240:	0800838d 	.word	0x0800838d
 8008244:	080082b1 	.word	0x080082b1
 8008248:	0800836f 	.word	0x0800836f
 800824c:	080081fd 	.word	0x080081fd
 8008250:	080081fd 	.word	0x080081fd
 8008254:	080083af 	.word	0x080083af
 8008258:	080081fd 	.word	0x080081fd
 800825c:	080082b1 	.word	0x080082b1
 8008260:	080081fd 	.word	0x080081fd
 8008264:	080081fd 	.word	0x080081fd
 8008268:	08008377 	.word	0x08008377
 800826c:	680b      	ldr	r3, [r1, #0]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	600a      	str	r2, [r1, #0]
 8008274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800827c:	2301      	movs	r3, #1
 800827e:	e0a3      	b.n	80083c8 <_printf_i+0x1f4>
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	6808      	ldr	r0, [r1, #0]
 8008284:	062e      	lsls	r6, r5, #24
 8008286:	f100 0304 	add.w	r3, r0, #4
 800828a:	d50a      	bpl.n	80082a2 <_printf_i+0xce>
 800828c:	6805      	ldr	r5, [r0, #0]
 800828e:	600b      	str	r3, [r1, #0]
 8008290:	2d00      	cmp	r5, #0
 8008292:	da03      	bge.n	800829c <_printf_i+0xc8>
 8008294:	232d      	movs	r3, #45	; 0x2d
 8008296:	426d      	negs	r5, r5
 8008298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800829c:	485e      	ldr	r0, [pc, #376]	; (8008418 <_printf_i+0x244>)
 800829e:	230a      	movs	r3, #10
 80082a0:	e019      	b.n	80082d6 <_printf_i+0x102>
 80082a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082a6:	6805      	ldr	r5, [r0, #0]
 80082a8:	600b      	str	r3, [r1, #0]
 80082aa:	bf18      	it	ne
 80082ac:	b22d      	sxthne	r5, r5
 80082ae:	e7ef      	b.n	8008290 <_printf_i+0xbc>
 80082b0:	680b      	ldr	r3, [r1, #0]
 80082b2:	6825      	ldr	r5, [r4, #0]
 80082b4:	1d18      	adds	r0, r3, #4
 80082b6:	6008      	str	r0, [r1, #0]
 80082b8:	0628      	lsls	r0, r5, #24
 80082ba:	d501      	bpl.n	80082c0 <_printf_i+0xec>
 80082bc:	681d      	ldr	r5, [r3, #0]
 80082be:	e002      	b.n	80082c6 <_printf_i+0xf2>
 80082c0:	0669      	lsls	r1, r5, #25
 80082c2:	d5fb      	bpl.n	80082bc <_printf_i+0xe8>
 80082c4:	881d      	ldrh	r5, [r3, #0]
 80082c6:	4854      	ldr	r0, [pc, #336]	; (8008418 <_printf_i+0x244>)
 80082c8:	2f6f      	cmp	r7, #111	; 0x6f
 80082ca:	bf0c      	ite	eq
 80082cc:	2308      	moveq	r3, #8
 80082ce:	230a      	movne	r3, #10
 80082d0:	2100      	movs	r1, #0
 80082d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082d6:	6866      	ldr	r6, [r4, #4]
 80082d8:	60a6      	str	r6, [r4, #8]
 80082da:	2e00      	cmp	r6, #0
 80082dc:	bfa2      	ittt	ge
 80082de:	6821      	ldrge	r1, [r4, #0]
 80082e0:	f021 0104 	bicge.w	r1, r1, #4
 80082e4:	6021      	strge	r1, [r4, #0]
 80082e6:	b90d      	cbnz	r5, 80082ec <_printf_i+0x118>
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	d04d      	beq.n	8008388 <_printf_i+0x1b4>
 80082ec:	4616      	mov	r6, r2
 80082ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80082f2:	fb03 5711 	mls	r7, r3, r1, r5
 80082f6:	5dc7      	ldrb	r7, [r0, r7]
 80082f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082fc:	462f      	mov	r7, r5
 80082fe:	42bb      	cmp	r3, r7
 8008300:	460d      	mov	r5, r1
 8008302:	d9f4      	bls.n	80082ee <_printf_i+0x11a>
 8008304:	2b08      	cmp	r3, #8
 8008306:	d10b      	bne.n	8008320 <_printf_i+0x14c>
 8008308:	6823      	ldr	r3, [r4, #0]
 800830a:	07df      	lsls	r7, r3, #31
 800830c:	d508      	bpl.n	8008320 <_printf_i+0x14c>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	6861      	ldr	r1, [r4, #4]
 8008312:	4299      	cmp	r1, r3
 8008314:	bfde      	ittt	le
 8008316:	2330      	movle	r3, #48	; 0x30
 8008318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800831c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008320:	1b92      	subs	r2, r2, r6
 8008322:	6122      	str	r2, [r4, #16]
 8008324:	f8cd a000 	str.w	sl, [sp]
 8008328:	464b      	mov	r3, r9
 800832a:	aa03      	add	r2, sp, #12
 800832c:	4621      	mov	r1, r4
 800832e:	4640      	mov	r0, r8
 8008330:	f7ff fee2 	bl	80080f8 <_printf_common>
 8008334:	3001      	adds	r0, #1
 8008336:	d14c      	bne.n	80083d2 <_printf_i+0x1fe>
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	b004      	add	sp, #16
 800833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008342:	4835      	ldr	r0, [pc, #212]	; (8008418 <_printf_i+0x244>)
 8008344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	680e      	ldr	r6, [r1, #0]
 800834c:	061f      	lsls	r7, r3, #24
 800834e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008352:	600e      	str	r6, [r1, #0]
 8008354:	d514      	bpl.n	8008380 <_printf_i+0x1ac>
 8008356:	07d9      	lsls	r1, r3, #31
 8008358:	bf44      	itt	mi
 800835a:	f043 0320 	orrmi.w	r3, r3, #32
 800835e:	6023      	strmi	r3, [r4, #0]
 8008360:	b91d      	cbnz	r5, 800836a <_printf_i+0x196>
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f023 0320 	bic.w	r3, r3, #32
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	2310      	movs	r3, #16
 800836c:	e7b0      	b.n	80082d0 <_printf_i+0xfc>
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	f043 0320 	orr.w	r3, r3, #32
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	2378      	movs	r3, #120	; 0x78
 8008378:	4828      	ldr	r0, [pc, #160]	; (800841c <_printf_i+0x248>)
 800837a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800837e:	e7e3      	b.n	8008348 <_printf_i+0x174>
 8008380:	065e      	lsls	r6, r3, #25
 8008382:	bf48      	it	mi
 8008384:	b2ad      	uxthmi	r5, r5
 8008386:	e7e6      	b.n	8008356 <_printf_i+0x182>
 8008388:	4616      	mov	r6, r2
 800838a:	e7bb      	b.n	8008304 <_printf_i+0x130>
 800838c:	680b      	ldr	r3, [r1, #0]
 800838e:	6826      	ldr	r6, [r4, #0]
 8008390:	6960      	ldr	r0, [r4, #20]
 8008392:	1d1d      	adds	r5, r3, #4
 8008394:	600d      	str	r5, [r1, #0]
 8008396:	0635      	lsls	r5, r6, #24
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	d501      	bpl.n	80083a0 <_printf_i+0x1cc>
 800839c:	6018      	str	r0, [r3, #0]
 800839e:	e002      	b.n	80083a6 <_printf_i+0x1d2>
 80083a0:	0671      	lsls	r1, r6, #25
 80083a2:	d5fb      	bpl.n	800839c <_printf_i+0x1c8>
 80083a4:	8018      	strh	r0, [r3, #0]
 80083a6:	2300      	movs	r3, #0
 80083a8:	6123      	str	r3, [r4, #16]
 80083aa:	4616      	mov	r6, r2
 80083ac:	e7ba      	b.n	8008324 <_printf_i+0x150>
 80083ae:	680b      	ldr	r3, [r1, #0]
 80083b0:	1d1a      	adds	r2, r3, #4
 80083b2:	600a      	str	r2, [r1, #0]
 80083b4:	681e      	ldr	r6, [r3, #0]
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	2100      	movs	r1, #0
 80083ba:	4630      	mov	r0, r6
 80083bc:	f7f7 ff10 	bl	80001e0 <memchr>
 80083c0:	b108      	cbz	r0, 80083c6 <_printf_i+0x1f2>
 80083c2:	1b80      	subs	r0, r0, r6
 80083c4:	6060      	str	r0, [r4, #4]
 80083c6:	6863      	ldr	r3, [r4, #4]
 80083c8:	6123      	str	r3, [r4, #16]
 80083ca:	2300      	movs	r3, #0
 80083cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d0:	e7a8      	b.n	8008324 <_printf_i+0x150>
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	4632      	mov	r2, r6
 80083d6:	4649      	mov	r1, r9
 80083d8:	4640      	mov	r0, r8
 80083da:	47d0      	blx	sl
 80083dc:	3001      	adds	r0, #1
 80083de:	d0ab      	beq.n	8008338 <_printf_i+0x164>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	079b      	lsls	r3, r3, #30
 80083e4:	d413      	bmi.n	800840e <_printf_i+0x23a>
 80083e6:	68e0      	ldr	r0, [r4, #12]
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	4298      	cmp	r0, r3
 80083ec:	bfb8      	it	lt
 80083ee:	4618      	movlt	r0, r3
 80083f0:	e7a4      	b.n	800833c <_printf_i+0x168>
 80083f2:	2301      	movs	r3, #1
 80083f4:	4632      	mov	r2, r6
 80083f6:	4649      	mov	r1, r9
 80083f8:	4640      	mov	r0, r8
 80083fa:	47d0      	blx	sl
 80083fc:	3001      	adds	r0, #1
 80083fe:	d09b      	beq.n	8008338 <_printf_i+0x164>
 8008400:	3501      	adds	r5, #1
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	9903      	ldr	r1, [sp, #12]
 8008406:	1a5b      	subs	r3, r3, r1
 8008408:	42ab      	cmp	r3, r5
 800840a:	dcf2      	bgt.n	80083f2 <_printf_i+0x21e>
 800840c:	e7eb      	b.n	80083e6 <_printf_i+0x212>
 800840e:	2500      	movs	r5, #0
 8008410:	f104 0619 	add.w	r6, r4, #25
 8008414:	e7f5      	b.n	8008402 <_printf_i+0x22e>
 8008416:	bf00      	nop
 8008418:	0800b8a6 	.word	0x0800b8a6
 800841c:	0800b8b7 	.word	0x0800b8b7

08008420 <iprintf>:
 8008420:	b40f      	push	{r0, r1, r2, r3}
 8008422:	4b0a      	ldr	r3, [pc, #40]	; (800844c <iprintf+0x2c>)
 8008424:	b513      	push	{r0, r1, r4, lr}
 8008426:	681c      	ldr	r4, [r3, #0]
 8008428:	b124      	cbz	r4, 8008434 <iprintf+0x14>
 800842a:	69a3      	ldr	r3, [r4, #24]
 800842c:	b913      	cbnz	r3, 8008434 <iprintf+0x14>
 800842e:	4620      	mov	r0, r4
 8008430:	f001 f93c 	bl	80096ac <__sinit>
 8008434:	ab05      	add	r3, sp, #20
 8008436:	9a04      	ldr	r2, [sp, #16]
 8008438:	68a1      	ldr	r1, [r4, #8]
 800843a:	9301      	str	r3, [sp, #4]
 800843c:	4620      	mov	r0, r4
 800843e:	f002 f813 	bl	800a468 <_vfiprintf_r>
 8008442:	b002      	add	sp, #8
 8008444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008448:	b004      	add	sp, #16
 800844a:	4770      	bx	lr
 800844c:	20000018 	.word	0x20000018

08008450 <_puts_r>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	460e      	mov	r6, r1
 8008454:	4605      	mov	r5, r0
 8008456:	b118      	cbz	r0, 8008460 <_puts_r+0x10>
 8008458:	6983      	ldr	r3, [r0, #24]
 800845a:	b90b      	cbnz	r3, 8008460 <_puts_r+0x10>
 800845c:	f001 f926 	bl	80096ac <__sinit>
 8008460:	69ab      	ldr	r3, [r5, #24]
 8008462:	68ac      	ldr	r4, [r5, #8]
 8008464:	b913      	cbnz	r3, 800846c <_puts_r+0x1c>
 8008466:	4628      	mov	r0, r5
 8008468:	f001 f920 	bl	80096ac <__sinit>
 800846c:	4b2c      	ldr	r3, [pc, #176]	; (8008520 <_puts_r+0xd0>)
 800846e:	429c      	cmp	r4, r3
 8008470:	d120      	bne.n	80084b4 <_puts_r+0x64>
 8008472:	686c      	ldr	r4, [r5, #4]
 8008474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008476:	07db      	lsls	r3, r3, #31
 8008478:	d405      	bmi.n	8008486 <_puts_r+0x36>
 800847a:	89a3      	ldrh	r3, [r4, #12]
 800847c:	0598      	lsls	r0, r3, #22
 800847e:	d402      	bmi.n	8008486 <_puts_r+0x36>
 8008480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008482:	f001 f9b6 	bl	80097f2 <__retarget_lock_acquire_recursive>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	0719      	lsls	r1, r3, #28
 800848a:	d51d      	bpl.n	80084c8 <_puts_r+0x78>
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	b1db      	cbz	r3, 80084c8 <_puts_r+0x78>
 8008490:	3e01      	subs	r6, #1
 8008492:	68a3      	ldr	r3, [r4, #8]
 8008494:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008498:	3b01      	subs	r3, #1
 800849a:	60a3      	str	r3, [r4, #8]
 800849c:	bb39      	cbnz	r1, 80084ee <_puts_r+0x9e>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	da38      	bge.n	8008514 <_puts_r+0xc4>
 80084a2:	4622      	mov	r2, r4
 80084a4:	210a      	movs	r1, #10
 80084a6:	4628      	mov	r0, r5
 80084a8:	f000 f8ac 	bl	8008604 <__swbuf_r>
 80084ac:	3001      	adds	r0, #1
 80084ae:	d011      	beq.n	80084d4 <_puts_r+0x84>
 80084b0:	250a      	movs	r5, #10
 80084b2:	e011      	b.n	80084d8 <_puts_r+0x88>
 80084b4:	4b1b      	ldr	r3, [pc, #108]	; (8008524 <_puts_r+0xd4>)
 80084b6:	429c      	cmp	r4, r3
 80084b8:	d101      	bne.n	80084be <_puts_r+0x6e>
 80084ba:	68ac      	ldr	r4, [r5, #8]
 80084bc:	e7da      	b.n	8008474 <_puts_r+0x24>
 80084be:	4b1a      	ldr	r3, [pc, #104]	; (8008528 <_puts_r+0xd8>)
 80084c0:	429c      	cmp	r4, r3
 80084c2:	bf08      	it	eq
 80084c4:	68ec      	ldreq	r4, [r5, #12]
 80084c6:	e7d5      	b.n	8008474 <_puts_r+0x24>
 80084c8:	4621      	mov	r1, r4
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 f8ec 	bl	80086a8 <__swsetup_r>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d0dd      	beq.n	8008490 <_puts_r+0x40>
 80084d4:	f04f 35ff 	mov.w	r5, #4294967295
 80084d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084da:	07da      	lsls	r2, r3, #31
 80084dc:	d405      	bmi.n	80084ea <_puts_r+0x9a>
 80084de:	89a3      	ldrh	r3, [r4, #12]
 80084e0:	059b      	lsls	r3, r3, #22
 80084e2:	d402      	bmi.n	80084ea <_puts_r+0x9a>
 80084e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084e6:	f001 f985 	bl	80097f4 <__retarget_lock_release_recursive>
 80084ea:	4628      	mov	r0, r5
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	da04      	bge.n	80084fc <_puts_r+0xac>
 80084f2:	69a2      	ldr	r2, [r4, #24]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	dc06      	bgt.n	8008506 <_puts_r+0xb6>
 80084f8:	290a      	cmp	r1, #10
 80084fa:	d004      	beq.n	8008506 <_puts_r+0xb6>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	1c5a      	adds	r2, r3, #1
 8008500:	6022      	str	r2, [r4, #0]
 8008502:	7019      	strb	r1, [r3, #0]
 8008504:	e7c5      	b.n	8008492 <_puts_r+0x42>
 8008506:	4622      	mov	r2, r4
 8008508:	4628      	mov	r0, r5
 800850a:	f000 f87b 	bl	8008604 <__swbuf_r>
 800850e:	3001      	adds	r0, #1
 8008510:	d1bf      	bne.n	8008492 <_puts_r+0x42>
 8008512:	e7df      	b.n	80084d4 <_puts_r+0x84>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	250a      	movs	r5, #10
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	701d      	strb	r5, [r3, #0]
 800851e:	e7db      	b.n	80084d8 <_puts_r+0x88>
 8008520:	0800b97c 	.word	0x0800b97c
 8008524:	0800b99c 	.word	0x0800b99c
 8008528:	0800b95c 	.word	0x0800b95c

0800852c <puts>:
 800852c:	4b02      	ldr	r3, [pc, #8]	; (8008538 <puts+0xc>)
 800852e:	4601      	mov	r1, r0
 8008530:	6818      	ldr	r0, [r3, #0]
 8008532:	f7ff bf8d 	b.w	8008450 <_puts_r>
 8008536:	bf00      	nop
 8008538:	20000018 	.word	0x20000018

0800853c <_raise_r>:
 800853c:	291f      	cmp	r1, #31
 800853e:	b538      	push	{r3, r4, r5, lr}
 8008540:	4604      	mov	r4, r0
 8008542:	460d      	mov	r5, r1
 8008544:	d904      	bls.n	8008550 <_raise_r+0x14>
 8008546:	2316      	movs	r3, #22
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	f04f 30ff 	mov.w	r0, #4294967295
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008552:	b112      	cbz	r2, 800855a <_raise_r+0x1e>
 8008554:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008558:	b94b      	cbnz	r3, 800856e <_raise_r+0x32>
 800855a:	4620      	mov	r0, r4
 800855c:	f000 f830 	bl	80085c0 <_getpid_r>
 8008560:	462a      	mov	r2, r5
 8008562:	4601      	mov	r1, r0
 8008564:	4620      	mov	r0, r4
 8008566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800856a:	f000 b817 	b.w	800859c <_kill_r>
 800856e:	2b01      	cmp	r3, #1
 8008570:	d00a      	beq.n	8008588 <_raise_r+0x4c>
 8008572:	1c59      	adds	r1, r3, #1
 8008574:	d103      	bne.n	800857e <_raise_r+0x42>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	2001      	movs	r0, #1
 800857c:	e7e7      	b.n	800854e <_raise_r+0x12>
 800857e:	2400      	movs	r4, #0
 8008580:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008584:	4628      	mov	r0, r5
 8008586:	4798      	blx	r3
 8008588:	2000      	movs	r0, #0
 800858a:	e7e0      	b.n	800854e <_raise_r+0x12>

0800858c <raise>:
 800858c:	4b02      	ldr	r3, [pc, #8]	; (8008598 <raise+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f7ff bfd3 	b.w	800853c <_raise_r>
 8008596:	bf00      	nop
 8008598:	20000018 	.word	0x20000018

0800859c <_kill_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	; (80085bc <_kill_r+0x20>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7fa ffef 	bl	800358c <_kill>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_kill_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_kill_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	20000934 	.word	0x20000934

080085c0 <_getpid_r>:
 80085c0:	f7fa bfdc 	b.w	800357c <_getpid>

080085c4 <siprintf>:
 80085c4:	b40e      	push	{r1, r2, r3}
 80085c6:	b500      	push	{lr}
 80085c8:	b09c      	sub	sp, #112	; 0x70
 80085ca:	ab1d      	add	r3, sp, #116	; 0x74
 80085cc:	9002      	str	r0, [sp, #8]
 80085ce:	9006      	str	r0, [sp, #24]
 80085d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085d4:	4809      	ldr	r0, [pc, #36]	; (80085fc <siprintf+0x38>)
 80085d6:	9107      	str	r1, [sp, #28]
 80085d8:	9104      	str	r1, [sp, #16]
 80085da:	4909      	ldr	r1, [pc, #36]	; (8008600 <siprintf+0x3c>)
 80085dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e0:	9105      	str	r1, [sp, #20]
 80085e2:	6800      	ldr	r0, [r0, #0]
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	a902      	add	r1, sp, #8
 80085e8:	f001 fe14 	bl	800a214 <_svfiprintf_r>
 80085ec:	9b02      	ldr	r3, [sp, #8]
 80085ee:	2200      	movs	r2, #0
 80085f0:	701a      	strb	r2, [r3, #0]
 80085f2:	b01c      	add	sp, #112	; 0x70
 80085f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80085f8:	b003      	add	sp, #12
 80085fa:	4770      	bx	lr
 80085fc:	20000018 	.word	0x20000018
 8008600:	ffff0208 	.word	0xffff0208

08008604 <__swbuf_r>:
 8008604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008606:	460e      	mov	r6, r1
 8008608:	4614      	mov	r4, r2
 800860a:	4605      	mov	r5, r0
 800860c:	b118      	cbz	r0, 8008616 <__swbuf_r+0x12>
 800860e:	6983      	ldr	r3, [r0, #24]
 8008610:	b90b      	cbnz	r3, 8008616 <__swbuf_r+0x12>
 8008612:	f001 f84b 	bl	80096ac <__sinit>
 8008616:	4b21      	ldr	r3, [pc, #132]	; (800869c <__swbuf_r+0x98>)
 8008618:	429c      	cmp	r4, r3
 800861a:	d12b      	bne.n	8008674 <__swbuf_r+0x70>
 800861c:	686c      	ldr	r4, [r5, #4]
 800861e:	69a3      	ldr	r3, [r4, #24]
 8008620:	60a3      	str	r3, [r4, #8]
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	071a      	lsls	r2, r3, #28
 8008626:	d52f      	bpl.n	8008688 <__swbuf_r+0x84>
 8008628:	6923      	ldr	r3, [r4, #16]
 800862a:	b36b      	cbz	r3, 8008688 <__swbuf_r+0x84>
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	6820      	ldr	r0, [r4, #0]
 8008630:	1ac0      	subs	r0, r0, r3
 8008632:	6963      	ldr	r3, [r4, #20]
 8008634:	b2f6      	uxtb	r6, r6
 8008636:	4283      	cmp	r3, r0
 8008638:	4637      	mov	r7, r6
 800863a:	dc04      	bgt.n	8008646 <__swbuf_r+0x42>
 800863c:	4621      	mov	r1, r4
 800863e:	4628      	mov	r0, r5
 8008640:	f000 ffa0 	bl	8009584 <_fflush_r>
 8008644:	bb30      	cbnz	r0, 8008694 <__swbuf_r+0x90>
 8008646:	68a3      	ldr	r3, [r4, #8]
 8008648:	3b01      	subs	r3, #1
 800864a:	60a3      	str	r3, [r4, #8]
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	1c5a      	adds	r2, r3, #1
 8008650:	6022      	str	r2, [r4, #0]
 8008652:	701e      	strb	r6, [r3, #0]
 8008654:	6963      	ldr	r3, [r4, #20]
 8008656:	3001      	adds	r0, #1
 8008658:	4283      	cmp	r3, r0
 800865a:	d004      	beq.n	8008666 <__swbuf_r+0x62>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	07db      	lsls	r3, r3, #31
 8008660:	d506      	bpl.n	8008670 <__swbuf_r+0x6c>
 8008662:	2e0a      	cmp	r6, #10
 8008664:	d104      	bne.n	8008670 <__swbuf_r+0x6c>
 8008666:	4621      	mov	r1, r4
 8008668:	4628      	mov	r0, r5
 800866a:	f000 ff8b 	bl	8009584 <_fflush_r>
 800866e:	b988      	cbnz	r0, 8008694 <__swbuf_r+0x90>
 8008670:	4638      	mov	r0, r7
 8008672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008674:	4b0a      	ldr	r3, [pc, #40]	; (80086a0 <__swbuf_r+0x9c>)
 8008676:	429c      	cmp	r4, r3
 8008678:	d101      	bne.n	800867e <__swbuf_r+0x7a>
 800867a:	68ac      	ldr	r4, [r5, #8]
 800867c:	e7cf      	b.n	800861e <__swbuf_r+0x1a>
 800867e:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <__swbuf_r+0xa0>)
 8008680:	429c      	cmp	r4, r3
 8008682:	bf08      	it	eq
 8008684:	68ec      	ldreq	r4, [r5, #12]
 8008686:	e7ca      	b.n	800861e <__swbuf_r+0x1a>
 8008688:	4621      	mov	r1, r4
 800868a:	4628      	mov	r0, r5
 800868c:	f000 f80c 	bl	80086a8 <__swsetup_r>
 8008690:	2800      	cmp	r0, #0
 8008692:	d0cb      	beq.n	800862c <__swbuf_r+0x28>
 8008694:	f04f 37ff 	mov.w	r7, #4294967295
 8008698:	e7ea      	b.n	8008670 <__swbuf_r+0x6c>
 800869a:	bf00      	nop
 800869c:	0800b97c 	.word	0x0800b97c
 80086a0:	0800b99c 	.word	0x0800b99c
 80086a4:	0800b95c 	.word	0x0800b95c

080086a8 <__swsetup_r>:
 80086a8:	4b32      	ldr	r3, [pc, #200]	; (8008774 <__swsetup_r+0xcc>)
 80086aa:	b570      	push	{r4, r5, r6, lr}
 80086ac:	681d      	ldr	r5, [r3, #0]
 80086ae:	4606      	mov	r6, r0
 80086b0:	460c      	mov	r4, r1
 80086b2:	b125      	cbz	r5, 80086be <__swsetup_r+0x16>
 80086b4:	69ab      	ldr	r3, [r5, #24]
 80086b6:	b913      	cbnz	r3, 80086be <__swsetup_r+0x16>
 80086b8:	4628      	mov	r0, r5
 80086ba:	f000 fff7 	bl	80096ac <__sinit>
 80086be:	4b2e      	ldr	r3, [pc, #184]	; (8008778 <__swsetup_r+0xd0>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d10f      	bne.n	80086e4 <__swsetup_r+0x3c>
 80086c4:	686c      	ldr	r4, [r5, #4]
 80086c6:	89a3      	ldrh	r3, [r4, #12]
 80086c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086cc:	0719      	lsls	r1, r3, #28
 80086ce:	d42c      	bmi.n	800872a <__swsetup_r+0x82>
 80086d0:	06dd      	lsls	r5, r3, #27
 80086d2:	d411      	bmi.n	80086f8 <__swsetup_r+0x50>
 80086d4:	2309      	movs	r3, #9
 80086d6:	6033      	str	r3, [r6, #0]
 80086d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086dc:	81a3      	strh	r3, [r4, #12]
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	e03e      	b.n	8008762 <__swsetup_r+0xba>
 80086e4:	4b25      	ldr	r3, [pc, #148]	; (800877c <__swsetup_r+0xd4>)
 80086e6:	429c      	cmp	r4, r3
 80086e8:	d101      	bne.n	80086ee <__swsetup_r+0x46>
 80086ea:	68ac      	ldr	r4, [r5, #8]
 80086ec:	e7eb      	b.n	80086c6 <__swsetup_r+0x1e>
 80086ee:	4b24      	ldr	r3, [pc, #144]	; (8008780 <__swsetup_r+0xd8>)
 80086f0:	429c      	cmp	r4, r3
 80086f2:	bf08      	it	eq
 80086f4:	68ec      	ldreq	r4, [r5, #12]
 80086f6:	e7e6      	b.n	80086c6 <__swsetup_r+0x1e>
 80086f8:	0758      	lsls	r0, r3, #29
 80086fa:	d512      	bpl.n	8008722 <__swsetup_r+0x7a>
 80086fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086fe:	b141      	cbz	r1, 8008712 <__swsetup_r+0x6a>
 8008700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008704:	4299      	cmp	r1, r3
 8008706:	d002      	beq.n	800870e <__swsetup_r+0x66>
 8008708:	4630      	mov	r0, r6
 800870a:	f001 fc7d 	bl	800a008 <_free_r>
 800870e:	2300      	movs	r3, #0
 8008710:	6363      	str	r3, [r4, #52]	; 0x34
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	2300      	movs	r3, #0
 800871c:	6063      	str	r3, [r4, #4]
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f043 0308 	orr.w	r3, r3, #8
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	6923      	ldr	r3, [r4, #16]
 800872c:	b94b      	cbnz	r3, 8008742 <__swsetup_r+0x9a>
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008738:	d003      	beq.n	8008742 <__swsetup_r+0x9a>
 800873a:	4621      	mov	r1, r4
 800873c:	4630      	mov	r0, r6
 800873e:	f001 f87f 	bl	8009840 <__smakebuf_r>
 8008742:	89a0      	ldrh	r0, [r4, #12]
 8008744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008748:	f010 0301 	ands.w	r3, r0, #1
 800874c:	d00a      	beq.n	8008764 <__swsetup_r+0xbc>
 800874e:	2300      	movs	r3, #0
 8008750:	60a3      	str	r3, [r4, #8]
 8008752:	6963      	ldr	r3, [r4, #20]
 8008754:	425b      	negs	r3, r3
 8008756:	61a3      	str	r3, [r4, #24]
 8008758:	6923      	ldr	r3, [r4, #16]
 800875a:	b943      	cbnz	r3, 800876e <__swsetup_r+0xc6>
 800875c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008760:	d1ba      	bne.n	80086d8 <__swsetup_r+0x30>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	0781      	lsls	r1, r0, #30
 8008766:	bf58      	it	pl
 8008768:	6963      	ldrpl	r3, [r4, #20]
 800876a:	60a3      	str	r3, [r4, #8]
 800876c:	e7f4      	b.n	8008758 <__swsetup_r+0xb0>
 800876e:	2000      	movs	r0, #0
 8008770:	e7f7      	b.n	8008762 <__swsetup_r+0xba>
 8008772:	bf00      	nop
 8008774:	20000018 	.word	0x20000018
 8008778:	0800b97c 	.word	0x0800b97c
 800877c:	0800b99c 	.word	0x0800b99c
 8008780:	0800b95c 	.word	0x0800b95c

08008784 <quorem>:
 8008784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	6903      	ldr	r3, [r0, #16]
 800878a:	690c      	ldr	r4, [r1, #16]
 800878c:	42a3      	cmp	r3, r4
 800878e:	4607      	mov	r7, r0
 8008790:	f2c0 8081 	blt.w	8008896 <quorem+0x112>
 8008794:	3c01      	subs	r4, #1
 8008796:	f101 0814 	add.w	r8, r1, #20
 800879a:	f100 0514 	add.w	r5, r0, #20
 800879e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087a2:	9301      	str	r3, [sp, #4]
 80087a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ac:	3301      	adds	r3, #1
 80087ae:	429a      	cmp	r2, r3
 80087b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80087bc:	d331      	bcc.n	8008822 <quorem+0x9e>
 80087be:	f04f 0e00 	mov.w	lr, #0
 80087c2:	4640      	mov	r0, r8
 80087c4:	46ac      	mov	ip, r5
 80087c6:	46f2      	mov	sl, lr
 80087c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80087cc:	b293      	uxth	r3, r2
 80087ce:	fb06 e303 	mla	r3, r6, r3, lr
 80087d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	ebaa 0303 	sub.w	r3, sl, r3
 80087dc:	0c12      	lsrs	r2, r2, #16
 80087de:	f8dc a000 	ldr.w	sl, [ip]
 80087e2:	fb06 e202 	mla	r2, r6, r2, lr
 80087e6:	fa13 f38a 	uxtah	r3, r3, sl
 80087ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80087ee:	fa1f fa82 	uxth.w	sl, r2
 80087f2:	f8dc 2000 	ldr.w	r2, [ip]
 80087f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80087fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008804:	4581      	cmp	r9, r0
 8008806:	f84c 3b04 	str.w	r3, [ip], #4
 800880a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800880e:	d2db      	bcs.n	80087c8 <quorem+0x44>
 8008810:	f855 300b 	ldr.w	r3, [r5, fp]
 8008814:	b92b      	cbnz	r3, 8008822 <quorem+0x9e>
 8008816:	9b01      	ldr	r3, [sp, #4]
 8008818:	3b04      	subs	r3, #4
 800881a:	429d      	cmp	r5, r3
 800881c:	461a      	mov	r2, r3
 800881e:	d32e      	bcc.n	800887e <quorem+0xfa>
 8008820:	613c      	str	r4, [r7, #16]
 8008822:	4638      	mov	r0, r7
 8008824:	f001 fae0 	bl	8009de8 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	db24      	blt.n	8008876 <quorem+0xf2>
 800882c:	3601      	adds	r6, #1
 800882e:	4628      	mov	r0, r5
 8008830:	f04f 0c00 	mov.w	ip, #0
 8008834:	f858 2b04 	ldr.w	r2, [r8], #4
 8008838:	f8d0 e000 	ldr.w	lr, [r0]
 800883c:	b293      	uxth	r3, r2
 800883e:	ebac 0303 	sub.w	r3, ip, r3
 8008842:	0c12      	lsrs	r2, r2, #16
 8008844:	fa13 f38e 	uxtah	r3, r3, lr
 8008848:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800884c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008850:	b29b      	uxth	r3, r3
 8008852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008856:	45c1      	cmp	r9, r8
 8008858:	f840 3b04 	str.w	r3, [r0], #4
 800885c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008860:	d2e8      	bcs.n	8008834 <quorem+0xb0>
 8008862:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008866:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886a:	b922      	cbnz	r2, 8008876 <quorem+0xf2>
 800886c:	3b04      	subs	r3, #4
 800886e:	429d      	cmp	r5, r3
 8008870:	461a      	mov	r2, r3
 8008872:	d30a      	bcc.n	800888a <quorem+0x106>
 8008874:	613c      	str	r4, [r7, #16]
 8008876:	4630      	mov	r0, r6
 8008878:	b003      	add	sp, #12
 800887a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	3b04      	subs	r3, #4
 8008882:	2a00      	cmp	r2, #0
 8008884:	d1cc      	bne.n	8008820 <quorem+0x9c>
 8008886:	3c01      	subs	r4, #1
 8008888:	e7c7      	b.n	800881a <quorem+0x96>
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	3b04      	subs	r3, #4
 800888e:	2a00      	cmp	r2, #0
 8008890:	d1f0      	bne.n	8008874 <quorem+0xf0>
 8008892:	3c01      	subs	r4, #1
 8008894:	e7eb      	b.n	800886e <quorem+0xea>
 8008896:	2000      	movs	r0, #0
 8008898:	e7ee      	b.n	8008878 <quorem+0xf4>
 800889a:	0000      	movs	r0, r0
 800889c:	0000      	movs	r0, r0
	...

080088a0 <_dtoa_r>:
 80088a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a4:	ed2d 8b02 	vpush	{d8}
 80088a8:	ec57 6b10 	vmov	r6, r7, d0
 80088ac:	b095      	sub	sp, #84	; 0x54
 80088ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088b4:	9105      	str	r1, [sp, #20]
 80088b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80088ba:	4604      	mov	r4, r0
 80088bc:	9209      	str	r2, [sp, #36]	; 0x24
 80088be:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c0:	b975      	cbnz	r5, 80088e0 <_dtoa_r+0x40>
 80088c2:	2010      	movs	r0, #16
 80088c4:	f000 fffc 	bl	80098c0 <malloc>
 80088c8:	4602      	mov	r2, r0
 80088ca:	6260      	str	r0, [r4, #36]	; 0x24
 80088cc:	b920      	cbnz	r0, 80088d8 <_dtoa_r+0x38>
 80088ce:	4bb2      	ldr	r3, [pc, #712]	; (8008b98 <_dtoa_r+0x2f8>)
 80088d0:	21ea      	movs	r1, #234	; 0xea
 80088d2:	48b2      	ldr	r0, [pc, #712]	; (8008b9c <_dtoa_r+0x2fc>)
 80088d4:	f001 ff5e 	bl	800a794 <__assert_func>
 80088d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088dc:	6005      	str	r5, [r0, #0]
 80088de:	60c5      	str	r5, [r0, #12]
 80088e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088e2:	6819      	ldr	r1, [r3, #0]
 80088e4:	b151      	cbz	r1, 80088fc <_dtoa_r+0x5c>
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	604a      	str	r2, [r1, #4]
 80088ea:	2301      	movs	r3, #1
 80088ec:	4093      	lsls	r3, r2
 80088ee:	608b      	str	r3, [r1, #8]
 80088f0:	4620      	mov	r0, r4
 80088f2:	f001 f83b 	bl	800996c <_Bfree>
 80088f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	1e3b      	subs	r3, r7, #0
 80088fe:	bfb9      	ittee	lt
 8008900:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008904:	9303      	strlt	r3, [sp, #12]
 8008906:	2300      	movge	r3, #0
 8008908:	f8c8 3000 	strge.w	r3, [r8]
 800890c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008910:	4ba3      	ldr	r3, [pc, #652]	; (8008ba0 <_dtoa_r+0x300>)
 8008912:	bfbc      	itt	lt
 8008914:	2201      	movlt	r2, #1
 8008916:	f8c8 2000 	strlt.w	r2, [r8]
 800891a:	ea33 0309 	bics.w	r3, r3, r9
 800891e:	d11b      	bne.n	8008958 <_dtoa_r+0xb8>
 8008920:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008922:	f242 730f 	movw	r3, #9999	; 0x270f
 8008926:	6013      	str	r3, [r2, #0]
 8008928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800892c:	4333      	orrs	r3, r6
 800892e:	f000 857a 	beq.w	8009426 <_dtoa_r+0xb86>
 8008932:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008934:	b963      	cbnz	r3, 8008950 <_dtoa_r+0xb0>
 8008936:	4b9b      	ldr	r3, [pc, #620]	; (8008ba4 <_dtoa_r+0x304>)
 8008938:	e024      	b.n	8008984 <_dtoa_r+0xe4>
 800893a:	4b9b      	ldr	r3, [pc, #620]	; (8008ba8 <_dtoa_r+0x308>)
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008942:	6013      	str	r3, [r2, #0]
 8008944:	9800      	ldr	r0, [sp, #0]
 8008946:	b015      	add	sp, #84	; 0x54
 8008948:	ecbd 8b02 	vpop	{d8}
 800894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	4b94      	ldr	r3, [pc, #592]	; (8008ba4 <_dtoa_r+0x304>)
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	3303      	adds	r3, #3
 8008956:	e7f3      	b.n	8008940 <_dtoa_r+0xa0>
 8008958:	ed9d 7b02 	vldr	d7, [sp, #8]
 800895c:	2200      	movs	r2, #0
 800895e:	ec51 0b17 	vmov	r0, r1, d7
 8008962:	2300      	movs	r3, #0
 8008964:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008968:	f7f8 f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800896c:	4680      	mov	r8, r0
 800896e:	b158      	cbz	r0, 8008988 <_dtoa_r+0xe8>
 8008970:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008972:	2301      	movs	r3, #1
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 8551 	beq.w	8009420 <_dtoa_r+0xb80>
 800897e:	488b      	ldr	r0, [pc, #556]	; (8008bac <_dtoa_r+0x30c>)
 8008980:	6018      	str	r0, [r3, #0]
 8008982:	1e43      	subs	r3, r0, #1
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	e7dd      	b.n	8008944 <_dtoa_r+0xa4>
 8008988:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800898c:	aa12      	add	r2, sp, #72	; 0x48
 800898e:	a913      	add	r1, sp, #76	; 0x4c
 8008990:	4620      	mov	r0, r4
 8008992:	f001 facd 	bl	8009f30 <__d2b>
 8008996:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800899a:	4683      	mov	fp, r0
 800899c:	2d00      	cmp	r5, #0
 800899e:	d07c      	beq.n	8008a9a <_dtoa_r+0x1fa>
 80089a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80089a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80089ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089ba:	4b7d      	ldr	r3, [pc, #500]	; (8008bb0 <_dtoa_r+0x310>)
 80089bc:	2200      	movs	r2, #0
 80089be:	4630      	mov	r0, r6
 80089c0:	4639      	mov	r1, r7
 80089c2:	f7f7 fc61 	bl	8000288 <__aeabi_dsub>
 80089c6:	a36e      	add	r3, pc, #440	; (adr r3, 8008b80 <_dtoa_r+0x2e0>)
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fe14 	bl	80005f8 <__aeabi_dmul>
 80089d0:	a36d      	add	r3, pc, #436	; (adr r3, 8008b88 <_dtoa_r+0x2e8>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 fc59 	bl	800028c <__adddf3>
 80089da:	4606      	mov	r6, r0
 80089dc:	4628      	mov	r0, r5
 80089de:	460f      	mov	r7, r1
 80089e0:	f7f7 fda0 	bl	8000524 <__aeabi_i2d>
 80089e4:	a36a      	add	r3, pc, #424	; (adr r3, 8008b90 <_dtoa_r+0x2f0>)
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f7f7 fe05 	bl	80005f8 <__aeabi_dmul>
 80089ee:	4602      	mov	r2, r0
 80089f0:	460b      	mov	r3, r1
 80089f2:	4630      	mov	r0, r6
 80089f4:	4639      	mov	r1, r7
 80089f6:	f7f7 fc49 	bl	800028c <__adddf3>
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	f7f8 f8ab 	bl	8000b58 <__aeabi_d2iz>
 8008a02:	2200      	movs	r2, #0
 8008a04:	4682      	mov	sl, r0
 8008a06:	2300      	movs	r3, #0
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f8 f866 	bl	8000adc <__aeabi_dcmplt>
 8008a10:	b148      	cbz	r0, 8008a26 <_dtoa_r+0x186>
 8008a12:	4650      	mov	r0, sl
 8008a14:	f7f7 fd86 	bl	8000524 <__aeabi_i2d>
 8008a18:	4632      	mov	r2, r6
 8008a1a:	463b      	mov	r3, r7
 8008a1c:	f7f8 f854 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a20:	b908      	cbnz	r0, 8008a26 <_dtoa_r+0x186>
 8008a22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a26:	f1ba 0f16 	cmp.w	sl, #22
 8008a2a:	d854      	bhi.n	8008ad6 <_dtoa_r+0x236>
 8008a2c:	4b61      	ldr	r3, [pc, #388]	; (8008bb4 <_dtoa_r+0x314>)
 8008a2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a3a:	f7f8 f84f 	bl	8000adc <__aeabi_dcmplt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d04b      	beq.n	8008ada <_dtoa_r+0x23a>
 8008a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a46:	2300      	movs	r3, #0
 8008a48:	930e      	str	r3, [sp, #56]	; 0x38
 8008a4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a4c:	1b5d      	subs	r5, r3, r5
 8008a4e:	1e6b      	subs	r3, r5, #1
 8008a50:	9304      	str	r3, [sp, #16]
 8008a52:	bf43      	ittte	mi
 8008a54:	2300      	movmi	r3, #0
 8008a56:	f1c5 0801 	rsbmi	r8, r5, #1
 8008a5a:	9304      	strmi	r3, [sp, #16]
 8008a5c:	f04f 0800 	movpl.w	r8, #0
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	db3b      	blt.n	8008ade <_dtoa_r+0x23e>
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a6c:	4453      	add	r3, sl
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	2300      	movs	r3, #0
 8008a72:	9306      	str	r3, [sp, #24]
 8008a74:	9b05      	ldr	r3, [sp, #20]
 8008a76:	2b09      	cmp	r3, #9
 8008a78:	d869      	bhi.n	8008b4e <_dtoa_r+0x2ae>
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	bfc4      	itt	gt
 8008a7e:	3b04      	subgt	r3, #4
 8008a80:	9305      	strgt	r3, [sp, #20]
 8008a82:	9b05      	ldr	r3, [sp, #20]
 8008a84:	f1a3 0302 	sub.w	r3, r3, #2
 8008a88:	bfcc      	ite	gt
 8008a8a:	2500      	movgt	r5, #0
 8008a8c:	2501      	movle	r5, #1
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d869      	bhi.n	8008b66 <_dtoa_r+0x2c6>
 8008a92:	e8df f003 	tbb	[pc, r3]
 8008a96:	4e2c      	.short	0x4e2c
 8008a98:	5a4c      	.short	0x5a4c
 8008a9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008a9e:	441d      	add	r5, r3
 8008aa0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008aa4:	2b20      	cmp	r3, #32
 8008aa6:	bfc1      	itttt	gt
 8008aa8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008aac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ab0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ab4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ab8:	bfda      	itte	le
 8008aba:	f1c3 0320 	rsble	r3, r3, #32
 8008abe:	fa06 f003 	lslle.w	r0, r6, r3
 8008ac2:	4318      	orrgt	r0, r3
 8008ac4:	f7f7 fd1e 	bl	8000504 <__aeabi_ui2d>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4606      	mov	r6, r0
 8008acc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ad0:	3d01      	subs	r5, #1
 8008ad2:	9310      	str	r3, [sp, #64]	; 0x40
 8008ad4:	e771      	b.n	80089ba <_dtoa_r+0x11a>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e7b6      	b.n	8008a48 <_dtoa_r+0x1a8>
 8008ada:	900e      	str	r0, [sp, #56]	; 0x38
 8008adc:	e7b5      	b.n	8008a4a <_dtoa_r+0x1aa>
 8008ade:	f1ca 0300 	rsb	r3, sl, #0
 8008ae2:	9306      	str	r3, [sp, #24]
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	eba8 080a 	sub.w	r8, r8, sl
 8008aea:	930d      	str	r3, [sp, #52]	; 0x34
 8008aec:	e7c2      	b.n	8008a74 <_dtoa_r+0x1d4>
 8008aee:	2300      	movs	r3, #0
 8008af0:	9308      	str	r3, [sp, #32]
 8008af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dc39      	bgt.n	8008b6c <_dtoa_r+0x2cc>
 8008af8:	f04f 0901 	mov.w	r9, #1
 8008afc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b00:	464b      	mov	r3, r9
 8008b02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b08:	2200      	movs	r2, #0
 8008b0a:	6042      	str	r2, [r0, #4]
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	f102 0614 	add.w	r6, r2, #20
 8008b12:	429e      	cmp	r6, r3
 8008b14:	6841      	ldr	r1, [r0, #4]
 8008b16:	d92f      	bls.n	8008b78 <_dtoa_r+0x2d8>
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fee7 	bl	80098ec <_Balloc>
 8008b1e:	9000      	str	r0, [sp, #0]
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d14b      	bne.n	8008bbc <_dtoa_r+0x31c>
 8008b24:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <_dtoa_r+0x318>)
 8008b26:	4602      	mov	r2, r0
 8008b28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b2c:	e6d1      	b.n	80088d2 <_dtoa_r+0x32>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e7de      	b.n	8008af0 <_dtoa_r+0x250>
 8008b32:	2300      	movs	r3, #0
 8008b34:	9308      	str	r3, [sp, #32]
 8008b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b38:	eb0a 0903 	add.w	r9, sl, r3
 8008b3c:	f109 0301 	add.w	r3, r9, #1
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	bfb8      	it	lt
 8008b46:	2301      	movlt	r3, #1
 8008b48:	e7dd      	b.n	8008b06 <_dtoa_r+0x266>
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e7f2      	b.n	8008b34 <_dtoa_r+0x294>
 8008b4e:	2501      	movs	r5, #1
 8008b50:	2300      	movs	r3, #0
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	9508      	str	r5, [sp, #32]
 8008b56:	f04f 39ff 	mov.w	r9, #4294967295
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b60:	2312      	movs	r3, #18
 8008b62:	9209      	str	r2, [sp, #36]	; 0x24
 8008b64:	e7cf      	b.n	8008b06 <_dtoa_r+0x266>
 8008b66:	2301      	movs	r3, #1
 8008b68:	9308      	str	r3, [sp, #32]
 8008b6a:	e7f4      	b.n	8008b56 <_dtoa_r+0x2b6>
 8008b6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b70:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b74:	464b      	mov	r3, r9
 8008b76:	e7c6      	b.n	8008b06 <_dtoa_r+0x266>
 8008b78:	3101      	adds	r1, #1
 8008b7a:	6041      	str	r1, [r0, #4]
 8008b7c:	0052      	lsls	r2, r2, #1
 8008b7e:	e7c6      	b.n	8008b0e <_dtoa_r+0x26e>
 8008b80:	636f4361 	.word	0x636f4361
 8008b84:	3fd287a7 	.word	0x3fd287a7
 8008b88:	8b60c8b3 	.word	0x8b60c8b3
 8008b8c:	3fc68a28 	.word	0x3fc68a28
 8008b90:	509f79fb 	.word	0x509f79fb
 8008b94:	3fd34413 	.word	0x3fd34413
 8008b98:	0800b8d5 	.word	0x0800b8d5
 8008b9c:	0800b8ec 	.word	0x0800b8ec
 8008ba0:	7ff00000 	.word	0x7ff00000
 8008ba4:	0800b8d1 	.word	0x0800b8d1
 8008ba8:	0800b8c8 	.word	0x0800b8c8
 8008bac:	0800b8a5 	.word	0x0800b8a5
 8008bb0:	3ff80000 	.word	0x3ff80000
 8008bb4:	0800ba48 	.word	0x0800ba48
 8008bb8:	0800b94b 	.word	0x0800b94b
 8008bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bbe:	9a00      	ldr	r2, [sp, #0]
 8008bc0:	601a      	str	r2, [r3, #0]
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	2b0e      	cmp	r3, #14
 8008bc6:	f200 80ad 	bhi.w	8008d24 <_dtoa_r+0x484>
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	f000 80aa 	beq.w	8008d24 <_dtoa_r+0x484>
 8008bd0:	f1ba 0f00 	cmp.w	sl, #0
 8008bd4:	dd36      	ble.n	8008c44 <_dtoa_r+0x3a4>
 8008bd6:	4ac3      	ldr	r2, [pc, #780]	; (8008ee4 <_dtoa_r+0x644>)
 8008bd8:	f00a 030f 	and.w	r3, sl, #15
 8008bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008be0:	ed93 7b00 	vldr	d7, [r3]
 8008be4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008be8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008bec:	eeb0 8a47 	vmov.f32	s16, s14
 8008bf0:	eef0 8a67 	vmov.f32	s17, s15
 8008bf4:	d016      	beq.n	8008c24 <_dtoa_r+0x384>
 8008bf6:	4bbc      	ldr	r3, [pc, #752]	; (8008ee8 <_dtoa_r+0x648>)
 8008bf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008bfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c00:	f7f7 fe24 	bl	800084c <__aeabi_ddiv>
 8008c04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c08:	f007 070f 	and.w	r7, r7, #15
 8008c0c:	2503      	movs	r5, #3
 8008c0e:	4eb6      	ldr	r6, [pc, #728]	; (8008ee8 <_dtoa_r+0x648>)
 8008c10:	b957      	cbnz	r7, 8008c28 <_dtoa_r+0x388>
 8008c12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c16:	ec53 2b18 	vmov	r2, r3, d8
 8008c1a:	f7f7 fe17 	bl	800084c <__aeabi_ddiv>
 8008c1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c22:	e029      	b.n	8008c78 <_dtoa_r+0x3d8>
 8008c24:	2502      	movs	r5, #2
 8008c26:	e7f2      	b.n	8008c0e <_dtoa_r+0x36e>
 8008c28:	07f9      	lsls	r1, r7, #31
 8008c2a:	d508      	bpl.n	8008c3e <_dtoa_r+0x39e>
 8008c2c:	ec51 0b18 	vmov	r0, r1, d8
 8008c30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c34:	f7f7 fce0 	bl	80005f8 <__aeabi_dmul>
 8008c38:	ec41 0b18 	vmov	d8, r0, r1
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	107f      	asrs	r7, r7, #1
 8008c40:	3608      	adds	r6, #8
 8008c42:	e7e5      	b.n	8008c10 <_dtoa_r+0x370>
 8008c44:	f000 80a6 	beq.w	8008d94 <_dtoa_r+0x4f4>
 8008c48:	f1ca 0600 	rsb	r6, sl, #0
 8008c4c:	4ba5      	ldr	r3, [pc, #660]	; (8008ee4 <_dtoa_r+0x644>)
 8008c4e:	4fa6      	ldr	r7, [pc, #664]	; (8008ee8 <_dtoa_r+0x648>)
 8008c50:	f006 020f 	and.w	r2, r6, #15
 8008c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c60:	f7f7 fcca 	bl	80005f8 <__aeabi_dmul>
 8008c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c68:	1136      	asrs	r6, r6, #4
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	2502      	movs	r5, #2
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	f040 8085 	bne.w	8008d7e <_dtoa_r+0x4de>
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d1d2      	bne.n	8008c1e <_dtoa_r+0x37e>
 8008c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 808c 	beq.w	8008d98 <_dtoa_r+0x4f8>
 8008c80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c84:	4b99      	ldr	r3, [pc, #612]	; (8008eec <_dtoa_r+0x64c>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	4630      	mov	r0, r6
 8008c8a:	4639      	mov	r1, r7
 8008c8c:	f7f7 ff26 	bl	8000adc <__aeabi_dcmplt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	f000 8081 	beq.w	8008d98 <_dtoa_r+0x4f8>
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d07d      	beq.n	8008d98 <_dtoa_r+0x4f8>
 8008c9c:	f1b9 0f00 	cmp.w	r9, #0
 8008ca0:	dd3c      	ble.n	8008d1c <_dtoa_r+0x47c>
 8008ca2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008ca6:	9307      	str	r3, [sp, #28]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4b91      	ldr	r3, [pc, #580]	; (8008ef0 <_dtoa_r+0x650>)
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 fca2 	bl	80005f8 <__aeabi_dmul>
 8008cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cb8:	3501      	adds	r5, #1
 8008cba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008cbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7f7 fc2e 	bl	8000524 <__aeabi_i2d>
 8008cc8:	4632      	mov	r2, r6
 8008cca:	463b      	mov	r3, r7
 8008ccc:	f7f7 fc94 	bl	80005f8 <__aeabi_dmul>
 8008cd0:	4b88      	ldr	r3, [pc, #544]	; (8008ef4 <_dtoa_r+0x654>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 fada 	bl	800028c <__adddf3>
 8008cd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ce0:	9303      	str	r3, [sp, #12]
 8008ce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d15c      	bne.n	8008da2 <_dtoa_r+0x502>
 8008ce8:	4b83      	ldr	r3, [pc, #524]	; (8008ef8 <_dtoa_r+0x658>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	4630      	mov	r0, r6
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 faca 	bl	8000288 <__aeabi_dsub>
 8008cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cf8:	4606      	mov	r6, r0
 8008cfa:	460f      	mov	r7, r1
 8008cfc:	f7f7 ff0c 	bl	8000b18 <__aeabi_dcmpgt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	f040 8296 	bne.w	8009232 <_dtoa_r+0x992>
 8008d06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d10:	4639      	mov	r1, r7
 8008d12:	f7f7 fee3 	bl	8000adc <__aeabi_dcmplt>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f040 8288 	bne.w	800922c <_dtoa_r+0x98c>
 8008d1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f2c0 8158 	blt.w	8008fdc <_dtoa_r+0x73c>
 8008d2c:	f1ba 0f0e 	cmp.w	sl, #14
 8008d30:	f300 8154 	bgt.w	8008fdc <_dtoa_r+0x73c>
 8008d34:	4b6b      	ldr	r3, [pc, #428]	; (8008ee4 <_dtoa_r+0x644>)
 8008d36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f280 80e3 	bge.w	8008f0c <_dtoa_r+0x66c>
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f300 80df 	bgt.w	8008f0c <_dtoa_r+0x66c>
 8008d4e:	f040 826d 	bne.w	800922c <_dtoa_r+0x98c>
 8008d52:	4b69      	ldr	r3, [pc, #420]	; (8008ef8 <_dtoa_r+0x658>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	4640      	mov	r0, r8
 8008d58:	4649      	mov	r1, r9
 8008d5a:	f7f7 fc4d 	bl	80005f8 <__aeabi_dmul>
 8008d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d62:	f7f7 fecf 	bl	8000b04 <__aeabi_dcmpge>
 8008d66:	9e01      	ldr	r6, [sp, #4]
 8008d68:	4637      	mov	r7, r6
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f040 8243 	bne.w	80091f6 <_dtoa_r+0x956>
 8008d70:	9d00      	ldr	r5, [sp, #0]
 8008d72:	2331      	movs	r3, #49	; 0x31
 8008d74:	f805 3b01 	strb.w	r3, [r5], #1
 8008d78:	f10a 0a01 	add.w	sl, sl, #1
 8008d7c:	e23f      	b.n	80091fe <_dtoa_r+0x95e>
 8008d7e:	07f2      	lsls	r2, r6, #31
 8008d80:	d505      	bpl.n	8008d8e <_dtoa_r+0x4ee>
 8008d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d86:	f7f7 fc37 	bl	80005f8 <__aeabi_dmul>
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	1076      	asrs	r6, r6, #1
 8008d90:	3708      	adds	r7, #8
 8008d92:	e76c      	b.n	8008c6e <_dtoa_r+0x3ce>
 8008d94:	2502      	movs	r5, #2
 8008d96:	e76f      	b.n	8008c78 <_dtoa_r+0x3d8>
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8008da0:	e78d      	b.n	8008cbe <_dtoa_r+0x41e>
 8008da2:	9900      	ldr	r1, [sp, #0]
 8008da4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008da8:	4b4e      	ldr	r3, [pc, #312]	; (8008ee4 <_dtoa_r+0x644>)
 8008daa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dae:	4401      	add	r1, r0
 8008db0:	9102      	str	r1, [sp, #8]
 8008db2:	9908      	ldr	r1, [sp, #32]
 8008db4:	eeb0 8a47 	vmov.f32	s16, s14
 8008db8:	eef0 8a67 	vmov.f32	s17, s15
 8008dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	d045      	beq.n	8008e54 <_dtoa_r+0x5b4>
 8008dc8:	494c      	ldr	r1, [pc, #304]	; (8008efc <_dtoa_r+0x65c>)
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f7f7 fd3e 	bl	800084c <__aeabi_ddiv>
 8008dd0:	ec53 2b18 	vmov	r2, r3, d8
 8008dd4:	f7f7 fa58 	bl	8000288 <__aeabi_dsub>
 8008dd8:	9d00      	ldr	r5, [sp, #0]
 8008dda:	ec41 0b18 	vmov	d8, r0, r1
 8008dde:	4639      	mov	r1, r7
 8008de0:	4630      	mov	r0, r6
 8008de2:	f7f7 feb9 	bl	8000b58 <__aeabi_d2iz>
 8008de6:	900c      	str	r0, [sp, #48]	; 0x30
 8008de8:	f7f7 fb9c 	bl	8000524 <__aeabi_i2d>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fa48 	bl	8000288 <__aeabi_dsub>
 8008df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dfa:	3330      	adds	r3, #48	; 0x30
 8008dfc:	f805 3b01 	strb.w	r3, [r5], #1
 8008e00:	ec53 2b18 	vmov	r2, r3, d8
 8008e04:	4606      	mov	r6, r0
 8008e06:	460f      	mov	r7, r1
 8008e08:	f7f7 fe68 	bl	8000adc <__aeabi_dcmplt>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d165      	bne.n	8008edc <_dtoa_r+0x63c>
 8008e10:	4632      	mov	r2, r6
 8008e12:	463b      	mov	r3, r7
 8008e14:	4935      	ldr	r1, [pc, #212]	; (8008eec <_dtoa_r+0x64c>)
 8008e16:	2000      	movs	r0, #0
 8008e18:	f7f7 fa36 	bl	8000288 <__aeabi_dsub>
 8008e1c:	ec53 2b18 	vmov	r2, r3, d8
 8008e20:	f7f7 fe5c 	bl	8000adc <__aeabi_dcmplt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f040 80b9 	bne.w	8008f9c <_dtoa_r+0x6fc>
 8008e2a:	9b02      	ldr	r3, [sp, #8]
 8008e2c:	429d      	cmp	r5, r3
 8008e2e:	f43f af75 	beq.w	8008d1c <_dtoa_r+0x47c>
 8008e32:	4b2f      	ldr	r3, [pc, #188]	; (8008ef0 <_dtoa_r+0x650>)
 8008e34:	ec51 0b18 	vmov	r0, r1, d8
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f7f7 fbdd 	bl	80005f8 <__aeabi_dmul>
 8008e3e:	4b2c      	ldr	r3, [pc, #176]	; (8008ef0 <_dtoa_r+0x650>)
 8008e40:	ec41 0b18 	vmov	d8, r0, r1
 8008e44:	2200      	movs	r2, #0
 8008e46:	4630      	mov	r0, r6
 8008e48:	4639      	mov	r1, r7
 8008e4a:	f7f7 fbd5 	bl	80005f8 <__aeabi_dmul>
 8008e4e:	4606      	mov	r6, r0
 8008e50:	460f      	mov	r7, r1
 8008e52:	e7c4      	b.n	8008dde <_dtoa_r+0x53e>
 8008e54:	ec51 0b17 	vmov	r0, r1, d7
 8008e58:	f7f7 fbce 	bl	80005f8 <__aeabi_dmul>
 8008e5c:	9b02      	ldr	r3, [sp, #8]
 8008e5e:	9d00      	ldr	r5, [sp, #0]
 8008e60:	930c      	str	r3, [sp, #48]	; 0x30
 8008e62:	ec41 0b18 	vmov	d8, r0, r1
 8008e66:	4639      	mov	r1, r7
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7f7 fe75 	bl	8000b58 <__aeabi_d2iz>
 8008e6e:	9011      	str	r0, [sp, #68]	; 0x44
 8008e70:	f7f7 fb58 	bl	8000524 <__aeabi_i2d>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	4630      	mov	r0, r6
 8008e7a:	4639      	mov	r1, r7
 8008e7c:	f7f7 fa04 	bl	8000288 <__aeabi_dsub>
 8008e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e82:	3330      	adds	r3, #48	; 0x30
 8008e84:	f805 3b01 	strb.w	r3, [r5], #1
 8008e88:	9b02      	ldr	r3, [sp, #8]
 8008e8a:	429d      	cmp	r5, r3
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	d134      	bne.n	8008f00 <_dtoa_r+0x660>
 8008e96:	4b19      	ldr	r3, [pc, #100]	; (8008efc <_dtoa_r+0x65c>)
 8008e98:	ec51 0b18 	vmov	r0, r1, d8
 8008e9c:	f7f7 f9f6 	bl	800028c <__adddf3>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	f7f7 fe36 	bl	8000b18 <__aeabi_dcmpgt>
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d175      	bne.n	8008f9c <_dtoa_r+0x6fc>
 8008eb0:	ec53 2b18 	vmov	r2, r3, d8
 8008eb4:	4911      	ldr	r1, [pc, #68]	; (8008efc <_dtoa_r+0x65c>)
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	f7f7 f9e6 	bl	8000288 <__aeabi_dsub>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fe0a 	bl	8000adc <__aeabi_dcmplt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	f43f af27 	beq.w	8008d1c <_dtoa_r+0x47c>
 8008ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ed0:	1e6b      	subs	r3, r5, #1
 8008ed2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ed4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ed8:	2b30      	cmp	r3, #48	; 0x30
 8008eda:	d0f8      	beq.n	8008ece <_dtoa_r+0x62e>
 8008edc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ee0:	e04a      	b.n	8008f78 <_dtoa_r+0x6d8>
 8008ee2:	bf00      	nop
 8008ee4:	0800ba48 	.word	0x0800ba48
 8008ee8:	0800ba20 	.word	0x0800ba20
 8008eec:	3ff00000 	.word	0x3ff00000
 8008ef0:	40240000 	.word	0x40240000
 8008ef4:	401c0000 	.word	0x401c0000
 8008ef8:	40140000 	.word	0x40140000
 8008efc:	3fe00000 	.word	0x3fe00000
 8008f00:	4baf      	ldr	r3, [pc, #700]	; (80091c0 <_dtoa_r+0x920>)
 8008f02:	f7f7 fb79 	bl	80005f8 <__aeabi_dmul>
 8008f06:	4606      	mov	r6, r0
 8008f08:	460f      	mov	r7, r1
 8008f0a:	e7ac      	b.n	8008e66 <_dtoa_r+0x5c6>
 8008f0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f10:	9d00      	ldr	r5, [sp, #0]
 8008f12:	4642      	mov	r2, r8
 8008f14:	464b      	mov	r3, r9
 8008f16:	4630      	mov	r0, r6
 8008f18:	4639      	mov	r1, r7
 8008f1a:	f7f7 fc97 	bl	800084c <__aeabi_ddiv>
 8008f1e:	f7f7 fe1b 	bl	8000b58 <__aeabi_d2iz>
 8008f22:	9002      	str	r0, [sp, #8]
 8008f24:	f7f7 fafe 	bl	8000524 <__aeabi_i2d>
 8008f28:	4642      	mov	r2, r8
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	f7f7 fb64 	bl	80005f8 <__aeabi_dmul>
 8008f30:	4602      	mov	r2, r0
 8008f32:	460b      	mov	r3, r1
 8008f34:	4630      	mov	r0, r6
 8008f36:	4639      	mov	r1, r7
 8008f38:	f7f7 f9a6 	bl	8000288 <__aeabi_dsub>
 8008f3c:	9e02      	ldr	r6, [sp, #8]
 8008f3e:	9f01      	ldr	r7, [sp, #4]
 8008f40:	3630      	adds	r6, #48	; 0x30
 8008f42:	f805 6b01 	strb.w	r6, [r5], #1
 8008f46:	9e00      	ldr	r6, [sp, #0]
 8008f48:	1bae      	subs	r6, r5, r6
 8008f4a:	42b7      	cmp	r7, r6
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	d137      	bne.n	8008fc2 <_dtoa_r+0x722>
 8008f52:	f7f7 f99b 	bl	800028c <__adddf3>
 8008f56:	4642      	mov	r2, r8
 8008f58:	464b      	mov	r3, r9
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	f7f7 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8008f62:	b9c8      	cbnz	r0, 8008f98 <_dtoa_r+0x6f8>
 8008f64:	4642      	mov	r2, r8
 8008f66:	464b      	mov	r3, r9
 8008f68:	4630      	mov	r0, r6
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	f7f7 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f70:	b110      	cbz	r0, 8008f78 <_dtoa_r+0x6d8>
 8008f72:	9b02      	ldr	r3, [sp, #8]
 8008f74:	07d9      	lsls	r1, r3, #31
 8008f76:	d40f      	bmi.n	8008f98 <_dtoa_r+0x6f8>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	f000 fcf6 	bl	800996c <_Bfree>
 8008f80:	2300      	movs	r3, #0
 8008f82:	702b      	strb	r3, [r5, #0]
 8008f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f86:	f10a 0001 	add.w	r0, sl, #1
 8008f8a:	6018      	str	r0, [r3, #0]
 8008f8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f43f acd8 	beq.w	8008944 <_dtoa_r+0xa4>
 8008f94:	601d      	str	r5, [r3, #0]
 8008f96:	e4d5      	b.n	8008944 <_dtoa_r+0xa4>
 8008f98:	f8cd a01c 	str.w	sl, [sp, #28]
 8008f9c:	462b      	mov	r3, r5
 8008f9e:	461d      	mov	r5, r3
 8008fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fa4:	2a39      	cmp	r2, #57	; 0x39
 8008fa6:	d108      	bne.n	8008fba <_dtoa_r+0x71a>
 8008fa8:	9a00      	ldr	r2, [sp, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d1f7      	bne.n	8008f9e <_dtoa_r+0x6fe>
 8008fae:	9a07      	ldr	r2, [sp, #28]
 8008fb0:	9900      	ldr	r1, [sp, #0]
 8008fb2:	3201      	adds	r2, #1
 8008fb4:	9207      	str	r2, [sp, #28]
 8008fb6:	2230      	movs	r2, #48	; 0x30
 8008fb8:	700a      	strb	r2, [r1, #0]
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	3201      	adds	r2, #1
 8008fbe:	701a      	strb	r2, [r3, #0]
 8008fc0:	e78c      	b.n	8008edc <_dtoa_r+0x63c>
 8008fc2:	4b7f      	ldr	r3, [pc, #508]	; (80091c0 <_dtoa_r+0x920>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f7f7 fb17 	bl	80005f8 <__aeabi_dmul>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4606      	mov	r6, r0
 8008fd0:	460f      	mov	r7, r1
 8008fd2:	f7f7 fd79 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d09b      	beq.n	8008f12 <_dtoa_r+0x672>
 8008fda:	e7cd      	b.n	8008f78 <_dtoa_r+0x6d8>
 8008fdc:	9a08      	ldr	r2, [sp, #32]
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	f000 80c4 	beq.w	800916c <_dtoa_r+0x8cc>
 8008fe4:	9a05      	ldr	r2, [sp, #20]
 8008fe6:	2a01      	cmp	r2, #1
 8008fe8:	f300 80a8 	bgt.w	800913c <_dtoa_r+0x89c>
 8008fec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fee:	2a00      	cmp	r2, #0
 8008ff0:	f000 80a0 	beq.w	8009134 <_dtoa_r+0x894>
 8008ff4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ff8:	9e06      	ldr	r6, [sp, #24]
 8008ffa:	4645      	mov	r5, r8
 8008ffc:	9a04      	ldr	r2, [sp, #16]
 8008ffe:	2101      	movs	r1, #1
 8009000:	441a      	add	r2, r3
 8009002:	4620      	mov	r0, r4
 8009004:	4498      	add	r8, r3
 8009006:	9204      	str	r2, [sp, #16]
 8009008:	f000 fd6c 	bl	8009ae4 <__i2b>
 800900c:	4607      	mov	r7, r0
 800900e:	2d00      	cmp	r5, #0
 8009010:	dd0b      	ble.n	800902a <_dtoa_r+0x78a>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd08      	ble.n	800902a <_dtoa_r+0x78a>
 8009018:	42ab      	cmp	r3, r5
 800901a:	9a04      	ldr	r2, [sp, #16]
 800901c:	bfa8      	it	ge
 800901e:	462b      	movge	r3, r5
 8009020:	eba8 0803 	sub.w	r8, r8, r3
 8009024:	1aed      	subs	r5, r5, r3
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	9b06      	ldr	r3, [sp, #24]
 800902c:	b1fb      	cbz	r3, 800906e <_dtoa_r+0x7ce>
 800902e:	9b08      	ldr	r3, [sp, #32]
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 809f 	beq.w	8009174 <_dtoa_r+0x8d4>
 8009036:	2e00      	cmp	r6, #0
 8009038:	dd11      	ble.n	800905e <_dtoa_r+0x7be>
 800903a:	4639      	mov	r1, r7
 800903c:	4632      	mov	r2, r6
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fe0c 	bl	8009c5c <__pow5mult>
 8009044:	465a      	mov	r2, fp
 8009046:	4601      	mov	r1, r0
 8009048:	4607      	mov	r7, r0
 800904a:	4620      	mov	r0, r4
 800904c:	f000 fd60 	bl	8009b10 <__multiply>
 8009050:	4659      	mov	r1, fp
 8009052:	9007      	str	r0, [sp, #28]
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fc89 	bl	800996c <_Bfree>
 800905a:	9b07      	ldr	r3, [sp, #28]
 800905c:	469b      	mov	fp, r3
 800905e:	9b06      	ldr	r3, [sp, #24]
 8009060:	1b9a      	subs	r2, r3, r6
 8009062:	d004      	beq.n	800906e <_dtoa_r+0x7ce>
 8009064:	4659      	mov	r1, fp
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fdf8 	bl	8009c5c <__pow5mult>
 800906c:	4683      	mov	fp, r0
 800906e:	2101      	movs	r1, #1
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fd37 	bl	8009ae4 <__i2b>
 8009076:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009078:	2b00      	cmp	r3, #0
 800907a:	4606      	mov	r6, r0
 800907c:	dd7c      	ble.n	8009178 <_dtoa_r+0x8d8>
 800907e:	461a      	mov	r2, r3
 8009080:	4601      	mov	r1, r0
 8009082:	4620      	mov	r0, r4
 8009084:	f000 fdea 	bl	8009c5c <__pow5mult>
 8009088:	9b05      	ldr	r3, [sp, #20]
 800908a:	2b01      	cmp	r3, #1
 800908c:	4606      	mov	r6, r0
 800908e:	dd76      	ble.n	800917e <_dtoa_r+0x8de>
 8009090:	2300      	movs	r3, #0
 8009092:	9306      	str	r3, [sp, #24]
 8009094:	6933      	ldr	r3, [r6, #16]
 8009096:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800909a:	6918      	ldr	r0, [r3, #16]
 800909c:	f000 fcd2 	bl	8009a44 <__hi0bits>
 80090a0:	f1c0 0020 	rsb	r0, r0, #32
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	4418      	add	r0, r3
 80090a8:	f010 001f 	ands.w	r0, r0, #31
 80090ac:	f000 8086 	beq.w	80091bc <_dtoa_r+0x91c>
 80090b0:	f1c0 0320 	rsb	r3, r0, #32
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	dd7f      	ble.n	80091b8 <_dtoa_r+0x918>
 80090b8:	f1c0 001c 	rsb	r0, r0, #28
 80090bc:	9b04      	ldr	r3, [sp, #16]
 80090be:	4403      	add	r3, r0
 80090c0:	4480      	add	r8, r0
 80090c2:	4405      	add	r5, r0
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	f1b8 0f00 	cmp.w	r8, #0
 80090ca:	dd05      	ble.n	80090d8 <_dtoa_r+0x838>
 80090cc:	4659      	mov	r1, fp
 80090ce:	4642      	mov	r2, r8
 80090d0:	4620      	mov	r0, r4
 80090d2:	f000 fe1d 	bl	8009d10 <__lshift>
 80090d6:	4683      	mov	fp, r0
 80090d8:	9b04      	ldr	r3, [sp, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dd05      	ble.n	80090ea <_dtoa_r+0x84a>
 80090de:	4631      	mov	r1, r6
 80090e0:	461a      	mov	r2, r3
 80090e2:	4620      	mov	r0, r4
 80090e4:	f000 fe14 	bl	8009d10 <__lshift>
 80090e8:	4606      	mov	r6, r0
 80090ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d069      	beq.n	80091c4 <_dtoa_r+0x924>
 80090f0:	4631      	mov	r1, r6
 80090f2:	4658      	mov	r0, fp
 80090f4:	f000 fe78 	bl	8009de8 <__mcmp>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	da63      	bge.n	80091c4 <_dtoa_r+0x924>
 80090fc:	2300      	movs	r3, #0
 80090fe:	4659      	mov	r1, fp
 8009100:	220a      	movs	r2, #10
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fc54 	bl	80099b0 <__multadd>
 8009108:	9b08      	ldr	r3, [sp, #32]
 800910a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800910e:	4683      	mov	fp, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 818f 	beq.w	8009434 <_dtoa_r+0xb94>
 8009116:	4639      	mov	r1, r7
 8009118:	2300      	movs	r3, #0
 800911a:	220a      	movs	r2, #10
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fc47 	bl	80099b0 <__multadd>
 8009122:	f1b9 0f00 	cmp.w	r9, #0
 8009126:	4607      	mov	r7, r0
 8009128:	f300 808e 	bgt.w	8009248 <_dtoa_r+0x9a8>
 800912c:	9b05      	ldr	r3, [sp, #20]
 800912e:	2b02      	cmp	r3, #2
 8009130:	dc50      	bgt.n	80091d4 <_dtoa_r+0x934>
 8009132:	e089      	b.n	8009248 <_dtoa_r+0x9a8>
 8009134:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009136:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800913a:	e75d      	b.n	8008ff8 <_dtoa_r+0x758>
 800913c:	9b01      	ldr	r3, [sp, #4]
 800913e:	1e5e      	subs	r6, r3, #1
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	42b3      	cmp	r3, r6
 8009144:	bfbf      	itttt	lt
 8009146:	9b06      	ldrlt	r3, [sp, #24]
 8009148:	9606      	strlt	r6, [sp, #24]
 800914a:	1af2      	sublt	r2, r6, r3
 800914c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800914e:	bfb6      	itet	lt
 8009150:	189b      	addlt	r3, r3, r2
 8009152:	1b9e      	subge	r6, r3, r6
 8009154:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	bfb8      	it	lt
 800915a:	2600      	movlt	r6, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	bfb5      	itete	lt
 8009160:	eba8 0503 	sublt.w	r5, r8, r3
 8009164:	9b01      	ldrge	r3, [sp, #4]
 8009166:	2300      	movlt	r3, #0
 8009168:	4645      	movge	r5, r8
 800916a:	e747      	b.n	8008ffc <_dtoa_r+0x75c>
 800916c:	9e06      	ldr	r6, [sp, #24]
 800916e:	9f08      	ldr	r7, [sp, #32]
 8009170:	4645      	mov	r5, r8
 8009172:	e74c      	b.n	800900e <_dtoa_r+0x76e>
 8009174:	9a06      	ldr	r2, [sp, #24]
 8009176:	e775      	b.n	8009064 <_dtoa_r+0x7c4>
 8009178:	9b05      	ldr	r3, [sp, #20]
 800917a:	2b01      	cmp	r3, #1
 800917c:	dc18      	bgt.n	80091b0 <_dtoa_r+0x910>
 800917e:	9b02      	ldr	r3, [sp, #8]
 8009180:	b9b3      	cbnz	r3, 80091b0 <_dtoa_r+0x910>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009188:	b9a3      	cbnz	r3, 80091b4 <_dtoa_r+0x914>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009190:	0d1b      	lsrs	r3, r3, #20
 8009192:	051b      	lsls	r3, r3, #20
 8009194:	b12b      	cbz	r3, 80091a2 <_dtoa_r+0x902>
 8009196:	9b04      	ldr	r3, [sp, #16]
 8009198:	3301      	adds	r3, #1
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	f108 0801 	add.w	r8, r8, #1
 80091a0:	2301      	movs	r3, #1
 80091a2:	9306      	str	r3, [sp, #24]
 80091a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f47f af74 	bne.w	8009094 <_dtoa_r+0x7f4>
 80091ac:	2001      	movs	r0, #1
 80091ae:	e779      	b.n	80090a4 <_dtoa_r+0x804>
 80091b0:	2300      	movs	r3, #0
 80091b2:	e7f6      	b.n	80091a2 <_dtoa_r+0x902>
 80091b4:	9b02      	ldr	r3, [sp, #8]
 80091b6:	e7f4      	b.n	80091a2 <_dtoa_r+0x902>
 80091b8:	d085      	beq.n	80090c6 <_dtoa_r+0x826>
 80091ba:	4618      	mov	r0, r3
 80091bc:	301c      	adds	r0, #28
 80091be:	e77d      	b.n	80090bc <_dtoa_r+0x81c>
 80091c0:	40240000 	.word	0x40240000
 80091c4:	9b01      	ldr	r3, [sp, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	dc38      	bgt.n	800923c <_dtoa_r+0x99c>
 80091ca:	9b05      	ldr	r3, [sp, #20]
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	dd35      	ble.n	800923c <_dtoa_r+0x99c>
 80091d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091d4:	f1b9 0f00 	cmp.w	r9, #0
 80091d8:	d10d      	bne.n	80091f6 <_dtoa_r+0x956>
 80091da:	4631      	mov	r1, r6
 80091dc:	464b      	mov	r3, r9
 80091de:	2205      	movs	r2, #5
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fbe5 	bl	80099b0 <__multadd>
 80091e6:	4601      	mov	r1, r0
 80091e8:	4606      	mov	r6, r0
 80091ea:	4658      	mov	r0, fp
 80091ec:	f000 fdfc 	bl	8009de8 <__mcmp>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	f73f adbd 	bgt.w	8008d70 <_dtoa_r+0x4d0>
 80091f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091f8:	9d00      	ldr	r5, [sp, #0]
 80091fa:	ea6f 0a03 	mvn.w	sl, r3
 80091fe:	f04f 0800 	mov.w	r8, #0
 8009202:	4631      	mov	r1, r6
 8009204:	4620      	mov	r0, r4
 8009206:	f000 fbb1 	bl	800996c <_Bfree>
 800920a:	2f00      	cmp	r7, #0
 800920c:	f43f aeb4 	beq.w	8008f78 <_dtoa_r+0x6d8>
 8009210:	f1b8 0f00 	cmp.w	r8, #0
 8009214:	d005      	beq.n	8009222 <_dtoa_r+0x982>
 8009216:	45b8      	cmp	r8, r7
 8009218:	d003      	beq.n	8009222 <_dtoa_r+0x982>
 800921a:	4641      	mov	r1, r8
 800921c:	4620      	mov	r0, r4
 800921e:	f000 fba5 	bl	800996c <_Bfree>
 8009222:	4639      	mov	r1, r7
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fba1 	bl	800996c <_Bfree>
 800922a:	e6a5      	b.n	8008f78 <_dtoa_r+0x6d8>
 800922c:	2600      	movs	r6, #0
 800922e:	4637      	mov	r7, r6
 8009230:	e7e1      	b.n	80091f6 <_dtoa_r+0x956>
 8009232:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009234:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009238:	4637      	mov	r7, r6
 800923a:	e599      	b.n	8008d70 <_dtoa_r+0x4d0>
 800923c:	9b08      	ldr	r3, [sp, #32]
 800923e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 80fd 	beq.w	8009442 <_dtoa_r+0xba2>
 8009248:	2d00      	cmp	r5, #0
 800924a:	dd05      	ble.n	8009258 <_dtoa_r+0x9b8>
 800924c:	4639      	mov	r1, r7
 800924e:	462a      	mov	r2, r5
 8009250:	4620      	mov	r0, r4
 8009252:	f000 fd5d 	bl	8009d10 <__lshift>
 8009256:	4607      	mov	r7, r0
 8009258:	9b06      	ldr	r3, [sp, #24]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d05c      	beq.n	8009318 <_dtoa_r+0xa78>
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	4620      	mov	r0, r4
 8009262:	f000 fb43 	bl	80098ec <_Balloc>
 8009266:	4605      	mov	r5, r0
 8009268:	b928      	cbnz	r0, 8009276 <_dtoa_r+0x9d6>
 800926a:	4b80      	ldr	r3, [pc, #512]	; (800946c <_dtoa_r+0xbcc>)
 800926c:	4602      	mov	r2, r0
 800926e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009272:	f7ff bb2e 	b.w	80088d2 <_dtoa_r+0x32>
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	3202      	adds	r2, #2
 800927a:	0092      	lsls	r2, r2, #2
 800927c:	f107 010c 	add.w	r1, r7, #12
 8009280:	300c      	adds	r0, #12
 8009282:	f000 fb25 	bl	80098d0 <memcpy>
 8009286:	2201      	movs	r2, #1
 8009288:	4629      	mov	r1, r5
 800928a:	4620      	mov	r0, r4
 800928c:	f000 fd40 	bl	8009d10 <__lshift>
 8009290:	9b00      	ldr	r3, [sp, #0]
 8009292:	3301      	adds	r3, #1
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	444b      	add	r3, r9
 800929a:	9307      	str	r3, [sp, #28]
 800929c:	9b02      	ldr	r3, [sp, #8]
 800929e:	f003 0301 	and.w	r3, r3, #1
 80092a2:	46b8      	mov	r8, r7
 80092a4:	9306      	str	r3, [sp, #24]
 80092a6:	4607      	mov	r7, r0
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	4631      	mov	r1, r6
 80092ac:	3b01      	subs	r3, #1
 80092ae:	4658      	mov	r0, fp
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	f7ff fa67 	bl	8008784 <quorem>
 80092b6:	4603      	mov	r3, r0
 80092b8:	3330      	adds	r3, #48	; 0x30
 80092ba:	9004      	str	r0, [sp, #16]
 80092bc:	4641      	mov	r1, r8
 80092be:	4658      	mov	r0, fp
 80092c0:	9308      	str	r3, [sp, #32]
 80092c2:	f000 fd91 	bl	8009de8 <__mcmp>
 80092c6:	463a      	mov	r2, r7
 80092c8:	4681      	mov	r9, r0
 80092ca:	4631      	mov	r1, r6
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fda7 	bl	8009e20 <__mdiff>
 80092d2:	68c2      	ldr	r2, [r0, #12]
 80092d4:	9b08      	ldr	r3, [sp, #32]
 80092d6:	4605      	mov	r5, r0
 80092d8:	bb02      	cbnz	r2, 800931c <_dtoa_r+0xa7c>
 80092da:	4601      	mov	r1, r0
 80092dc:	4658      	mov	r0, fp
 80092de:	f000 fd83 	bl	8009de8 <__mcmp>
 80092e2:	9b08      	ldr	r3, [sp, #32]
 80092e4:	4602      	mov	r2, r0
 80092e6:	4629      	mov	r1, r5
 80092e8:	4620      	mov	r0, r4
 80092ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80092ee:	f000 fb3d 	bl	800996c <_Bfree>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092f6:	9d01      	ldr	r5, [sp, #4]
 80092f8:	ea43 0102 	orr.w	r1, r3, r2
 80092fc:	9b06      	ldr	r3, [sp, #24]
 80092fe:	430b      	orrs	r3, r1
 8009300:	9b08      	ldr	r3, [sp, #32]
 8009302:	d10d      	bne.n	8009320 <_dtoa_r+0xa80>
 8009304:	2b39      	cmp	r3, #57	; 0x39
 8009306:	d029      	beq.n	800935c <_dtoa_r+0xabc>
 8009308:	f1b9 0f00 	cmp.w	r9, #0
 800930c:	dd01      	ble.n	8009312 <_dtoa_r+0xa72>
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	3331      	adds	r3, #49	; 0x31
 8009312:	9a02      	ldr	r2, [sp, #8]
 8009314:	7013      	strb	r3, [r2, #0]
 8009316:	e774      	b.n	8009202 <_dtoa_r+0x962>
 8009318:	4638      	mov	r0, r7
 800931a:	e7b9      	b.n	8009290 <_dtoa_r+0x9f0>
 800931c:	2201      	movs	r2, #1
 800931e:	e7e2      	b.n	80092e6 <_dtoa_r+0xa46>
 8009320:	f1b9 0f00 	cmp.w	r9, #0
 8009324:	db06      	blt.n	8009334 <_dtoa_r+0xa94>
 8009326:	9905      	ldr	r1, [sp, #20]
 8009328:	ea41 0909 	orr.w	r9, r1, r9
 800932c:	9906      	ldr	r1, [sp, #24]
 800932e:	ea59 0101 	orrs.w	r1, r9, r1
 8009332:	d120      	bne.n	8009376 <_dtoa_r+0xad6>
 8009334:	2a00      	cmp	r2, #0
 8009336:	ddec      	ble.n	8009312 <_dtoa_r+0xa72>
 8009338:	4659      	mov	r1, fp
 800933a:	2201      	movs	r2, #1
 800933c:	4620      	mov	r0, r4
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	f000 fce6 	bl	8009d10 <__lshift>
 8009344:	4631      	mov	r1, r6
 8009346:	4683      	mov	fp, r0
 8009348:	f000 fd4e 	bl	8009de8 <__mcmp>
 800934c:	2800      	cmp	r0, #0
 800934e:	9b01      	ldr	r3, [sp, #4]
 8009350:	dc02      	bgt.n	8009358 <_dtoa_r+0xab8>
 8009352:	d1de      	bne.n	8009312 <_dtoa_r+0xa72>
 8009354:	07da      	lsls	r2, r3, #31
 8009356:	d5dc      	bpl.n	8009312 <_dtoa_r+0xa72>
 8009358:	2b39      	cmp	r3, #57	; 0x39
 800935a:	d1d8      	bne.n	800930e <_dtoa_r+0xa6e>
 800935c:	9a02      	ldr	r2, [sp, #8]
 800935e:	2339      	movs	r3, #57	; 0x39
 8009360:	7013      	strb	r3, [r2, #0]
 8009362:	462b      	mov	r3, r5
 8009364:	461d      	mov	r5, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800936c:	2a39      	cmp	r2, #57	; 0x39
 800936e:	d050      	beq.n	8009412 <_dtoa_r+0xb72>
 8009370:	3201      	adds	r2, #1
 8009372:	701a      	strb	r2, [r3, #0]
 8009374:	e745      	b.n	8009202 <_dtoa_r+0x962>
 8009376:	2a00      	cmp	r2, #0
 8009378:	dd03      	ble.n	8009382 <_dtoa_r+0xae2>
 800937a:	2b39      	cmp	r3, #57	; 0x39
 800937c:	d0ee      	beq.n	800935c <_dtoa_r+0xabc>
 800937e:	3301      	adds	r3, #1
 8009380:	e7c7      	b.n	8009312 <_dtoa_r+0xa72>
 8009382:	9a01      	ldr	r2, [sp, #4]
 8009384:	9907      	ldr	r1, [sp, #28]
 8009386:	f802 3c01 	strb.w	r3, [r2, #-1]
 800938a:	428a      	cmp	r2, r1
 800938c:	d02a      	beq.n	80093e4 <_dtoa_r+0xb44>
 800938e:	4659      	mov	r1, fp
 8009390:	2300      	movs	r3, #0
 8009392:	220a      	movs	r2, #10
 8009394:	4620      	mov	r0, r4
 8009396:	f000 fb0b 	bl	80099b0 <__multadd>
 800939a:	45b8      	cmp	r8, r7
 800939c:	4683      	mov	fp, r0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	f04f 020a 	mov.w	r2, #10
 80093a6:	4641      	mov	r1, r8
 80093a8:	4620      	mov	r0, r4
 80093aa:	d107      	bne.n	80093bc <_dtoa_r+0xb1c>
 80093ac:	f000 fb00 	bl	80099b0 <__multadd>
 80093b0:	4680      	mov	r8, r0
 80093b2:	4607      	mov	r7, r0
 80093b4:	9b01      	ldr	r3, [sp, #4]
 80093b6:	3301      	adds	r3, #1
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	e775      	b.n	80092a8 <_dtoa_r+0xa08>
 80093bc:	f000 faf8 	bl	80099b0 <__multadd>
 80093c0:	4639      	mov	r1, r7
 80093c2:	4680      	mov	r8, r0
 80093c4:	2300      	movs	r3, #0
 80093c6:	220a      	movs	r2, #10
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 faf1 	bl	80099b0 <__multadd>
 80093ce:	4607      	mov	r7, r0
 80093d0:	e7f0      	b.n	80093b4 <_dtoa_r+0xb14>
 80093d2:	f1b9 0f00 	cmp.w	r9, #0
 80093d6:	9a00      	ldr	r2, [sp, #0]
 80093d8:	bfcc      	ite	gt
 80093da:	464d      	movgt	r5, r9
 80093dc:	2501      	movle	r5, #1
 80093de:	4415      	add	r5, r2
 80093e0:	f04f 0800 	mov.w	r8, #0
 80093e4:	4659      	mov	r1, fp
 80093e6:	2201      	movs	r2, #1
 80093e8:	4620      	mov	r0, r4
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	f000 fc90 	bl	8009d10 <__lshift>
 80093f0:	4631      	mov	r1, r6
 80093f2:	4683      	mov	fp, r0
 80093f4:	f000 fcf8 	bl	8009de8 <__mcmp>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	dcb2      	bgt.n	8009362 <_dtoa_r+0xac2>
 80093fc:	d102      	bne.n	8009404 <_dtoa_r+0xb64>
 80093fe:	9b01      	ldr	r3, [sp, #4]
 8009400:	07db      	lsls	r3, r3, #31
 8009402:	d4ae      	bmi.n	8009362 <_dtoa_r+0xac2>
 8009404:	462b      	mov	r3, r5
 8009406:	461d      	mov	r5, r3
 8009408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800940c:	2a30      	cmp	r2, #48	; 0x30
 800940e:	d0fa      	beq.n	8009406 <_dtoa_r+0xb66>
 8009410:	e6f7      	b.n	8009202 <_dtoa_r+0x962>
 8009412:	9a00      	ldr	r2, [sp, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d1a5      	bne.n	8009364 <_dtoa_r+0xac4>
 8009418:	f10a 0a01 	add.w	sl, sl, #1
 800941c:	2331      	movs	r3, #49	; 0x31
 800941e:	e779      	b.n	8009314 <_dtoa_r+0xa74>
 8009420:	4b13      	ldr	r3, [pc, #76]	; (8009470 <_dtoa_r+0xbd0>)
 8009422:	f7ff baaf 	b.w	8008984 <_dtoa_r+0xe4>
 8009426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009428:	2b00      	cmp	r3, #0
 800942a:	f47f aa86 	bne.w	800893a <_dtoa_r+0x9a>
 800942e:	4b11      	ldr	r3, [pc, #68]	; (8009474 <_dtoa_r+0xbd4>)
 8009430:	f7ff baa8 	b.w	8008984 <_dtoa_r+0xe4>
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	dc03      	bgt.n	8009442 <_dtoa_r+0xba2>
 800943a:	9b05      	ldr	r3, [sp, #20]
 800943c:	2b02      	cmp	r3, #2
 800943e:	f73f aec9 	bgt.w	80091d4 <_dtoa_r+0x934>
 8009442:	9d00      	ldr	r5, [sp, #0]
 8009444:	4631      	mov	r1, r6
 8009446:	4658      	mov	r0, fp
 8009448:	f7ff f99c 	bl	8008784 <quorem>
 800944c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009450:	f805 3b01 	strb.w	r3, [r5], #1
 8009454:	9a00      	ldr	r2, [sp, #0]
 8009456:	1aaa      	subs	r2, r5, r2
 8009458:	4591      	cmp	r9, r2
 800945a:	ddba      	ble.n	80093d2 <_dtoa_r+0xb32>
 800945c:	4659      	mov	r1, fp
 800945e:	2300      	movs	r3, #0
 8009460:	220a      	movs	r2, #10
 8009462:	4620      	mov	r0, r4
 8009464:	f000 faa4 	bl	80099b0 <__multadd>
 8009468:	4683      	mov	fp, r0
 800946a:	e7eb      	b.n	8009444 <_dtoa_r+0xba4>
 800946c:	0800b94b 	.word	0x0800b94b
 8009470:	0800b8a4 	.word	0x0800b8a4
 8009474:	0800b8c8 	.word	0x0800b8c8

08009478 <__sflush_r>:
 8009478:	898a      	ldrh	r2, [r1, #12]
 800947a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800947e:	4605      	mov	r5, r0
 8009480:	0710      	lsls	r0, r2, #28
 8009482:	460c      	mov	r4, r1
 8009484:	d458      	bmi.n	8009538 <__sflush_r+0xc0>
 8009486:	684b      	ldr	r3, [r1, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	dc05      	bgt.n	8009498 <__sflush_r+0x20>
 800948c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	dc02      	bgt.n	8009498 <__sflush_r+0x20>
 8009492:	2000      	movs	r0, #0
 8009494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800949a:	2e00      	cmp	r6, #0
 800949c:	d0f9      	beq.n	8009492 <__sflush_r+0x1a>
 800949e:	2300      	movs	r3, #0
 80094a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094a4:	682f      	ldr	r7, [r5, #0]
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	d032      	beq.n	8009510 <__sflush_r+0x98>
 80094aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	075a      	lsls	r2, r3, #29
 80094b0:	d505      	bpl.n	80094be <__sflush_r+0x46>
 80094b2:	6863      	ldr	r3, [r4, #4]
 80094b4:	1ac0      	subs	r0, r0, r3
 80094b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094b8:	b10b      	cbz	r3, 80094be <__sflush_r+0x46>
 80094ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094bc:	1ac0      	subs	r0, r0, r3
 80094be:	2300      	movs	r3, #0
 80094c0:	4602      	mov	r2, r0
 80094c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094c4:	6a21      	ldr	r1, [r4, #32]
 80094c6:	4628      	mov	r0, r5
 80094c8:	47b0      	blx	r6
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	d106      	bne.n	80094de <__sflush_r+0x66>
 80094d0:	6829      	ldr	r1, [r5, #0]
 80094d2:	291d      	cmp	r1, #29
 80094d4:	d82c      	bhi.n	8009530 <__sflush_r+0xb8>
 80094d6:	4a2a      	ldr	r2, [pc, #168]	; (8009580 <__sflush_r+0x108>)
 80094d8:	40ca      	lsrs	r2, r1
 80094da:	07d6      	lsls	r6, r2, #31
 80094dc:	d528      	bpl.n	8009530 <__sflush_r+0xb8>
 80094de:	2200      	movs	r2, #0
 80094e0:	6062      	str	r2, [r4, #4]
 80094e2:	04d9      	lsls	r1, r3, #19
 80094e4:	6922      	ldr	r2, [r4, #16]
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	d504      	bpl.n	80094f4 <__sflush_r+0x7c>
 80094ea:	1c42      	adds	r2, r0, #1
 80094ec:	d101      	bne.n	80094f2 <__sflush_r+0x7a>
 80094ee:	682b      	ldr	r3, [r5, #0]
 80094f0:	b903      	cbnz	r3, 80094f4 <__sflush_r+0x7c>
 80094f2:	6560      	str	r0, [r4, #84]	; 0x54
 80094f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094f6:	602f      	str	r7, [r5, #0]
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d0ca      	beq.n	8009492 <__sflush_r+0x1a>
 80094fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009500:	4299      	cmp	r1, r3
 8009502:	d002      	beq.n	800950a <__sflush_r+0x92>
 8009504:	4628      	mov	r0, r5
 8009506:	f000 fd7f 	bl	800a008 <_free_r>
 800950a:	2000      	movs	r0, #0
 800950c:	6360      	str	r0, [r4, #52]	; 0x34
 800950e:	e7c1      	b.n	8009494 <__sflush_r+0x1c>
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	2301      	movs	r3, #1
 8009514:	4628      	mov	r0, r5
 8009516:	47b0      	blx	r6
 8009518:	1c41      	adds	r1, r0, #1
 800951a:	d1c7      	bne.n	80094ac <__sflush_r+0x34>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0c4      	beq.n	80094ac <__sflush_r+0x34>
 8009522:	2b1d      	cmp	r3, #29
 8009524:	d001      	beq.n	800952a <__sflush_r+0xb2>
 8009526:	2b16      	cmp	r3, #22
 8009528:	d101      	bne.n	800952e <__sflush_r+0xb6>
 800952a:	602f      	str	r7, [r5, #0]
 800952c:	e7b1      	b.n	8009492 <__sflush_r+0x1a>
 800952e:	89a3      	ldrh	r3, [r4, #12]
 8009530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009534:	81a3      	strh	r3, [r4, #12]
 8009536:	e7ad      	b.n	8009494 <__sflush_r+0x1c>
 8009538:	690f      	ldr	r7, [r1, #16]
 800953a:	2f00      	cmp	r7, #0
 800953c:	d0a9      	beq.n	8009492 <__sflush_r+0x1a>
 800953e:	0793      	lsls	r3, r2, #30
 8009540:	680e      	ldr	r6, [r1, #0]
 8009542:	bf08      	it	eq
 8009544:	694b      	ldreq	r3, [r1, #20]
 8009546:	600f      	str	r7, [r1, #0]
 8009548:	bf18      	it	ne
 800954a:	2300      	movne	r3, #0
 800954c:	eba6 0807 	sub.w	r8, r6, r7
 8009550:	608b      	str	r3, [r1, #8]
 8009552:	f1b8 0f00 	cmp.w	r8, #0
 8009556:	dd9c      	ble.n	8009492 <__sflush_r+0x1a>
 8009558:	6a21      	ldr	r1, [r4, #32]
 800955a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800955c:	4643      	mov	r3, r8
 800955e:	463a      	mov	r2, r7
 8009560:	4628      	mov	r0, r5
 8009562:	47b0      	blx	r6
 8009564:	2800      	cmp	r0, #0
 8009566:	dc06      	bgt.n	8009576 <__sflush_r+0xfe>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	f04f 30ff 	mov.w	r0, #4294967295
 8009574:	e78e      	b.n	8009494 <__sflush_r+0x1c>
 8009576:	4407      	add	r7, r0
 8009578:	eba8 0800 	sub.w	r8, r8, r0
 800957c:	e7e9      	b.n	8009552 <__sflush_r+0xda>
 800957e:	bf00      	nop
 8009580:	20400001 	.word	0x20400001

08009584 <_fflush_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	690b      	ldr	r3, [r1, #16]
 8009588:	4605      	mov	r5, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b913      	cbnz	r3, 8009594 <_fflush_r+0x10>
 800958e:	2500      	movs	r5, #0
 8009590:	4628      	mov	r0, r5
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	b118      	cbz	r0, 800959e <_fflush_r+0x1a>
 8009596:	6983      	ldr	r3, [r0, #24]
 8009598:	b90b      	cbnz	r3, 800959e <_fflush_r+0x1a>
 800959a:	f000 f887 	bl	80096ac <__sinit>
 800959e:	4b14      	ldr	r3, [pc, #80]	; (80095f0 <_fflush_r+0x6c>)
 80095a0:	429c      	cmp	r4, r3
 80095a2:	d11b      	bne.n	80095dc <_fflush_r+0x58>
 80095a4:	686c      	ldr	r4, [r5, #4]
 80095a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d0ef      	beq.n	800958e <_fflush_r+0xa>
 80095ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095b0:	07d0      	lsls	r0, r2, #31
 80095b2:	d404      	bmi.n	80095be <_fflush_r+0x3a>
 80095b4:	0599      	lsls	r1, r3, #22
 80095b6:	d402      	bmi.n	80095be <_fflush_r+0x3a>
 80095b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ba:	f000 f91a 	bl	80097f2 <__retarget_lock_acquire_recursive>
 80095be:	4628      	mov	r0, r5
 80095c0:	4621      	mov	r1, r4
 80095c2:	f7ff ff59 	bl	8009478 <__sflush_r>
 80095c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095c8:	07da      	lsls	r2, r3, #31
 80095ca:	4605      	mov	r5, r0
 80095cc:	d4e0      	bmi.n	8009590 <_fflush_r+0xc>
 80095ce:	89a3      	ldrh	r3, [r4, #12]
 80095d0:	059b      	lsls	r3, r3, #22
 80095d2:	d4dd      	bmi.n	8009590 <_fflush_r+0xc>
 80095d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095d6:	f000 f90d 	bl	80097f4 <__retarget_lock_release_recursive>
 80095da:	e7d9      	b.n	8009590 <_fflush_r+0xc>
 80095dc:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <_fflush_r+0x70>)
 80095de:	429c      	cmp	r4, r3
 80095e0:	d101      	bne.n	80095e6 <_fflush_r+0x62>
 80095e2:	68ac      	ldr	r4, [r5, #8]
 80095e4:	e7df      	b.n	80095a6 <_fflush_r+0x22>
 80095e6:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <_fflush_r+0x74>)
 80095e8:	429c      	cmp	r4, r3
 80095ea:	bf08      	it	eq
 80095ec:	68ec      	ldreq	r4, [r5, #12]
 80095ee:	e7da      	b.n	80095a6 <_fflush_r+0x22>
 80095f0:	0800b97c 	.word	0x0800b97c
 80095f4:	0800b99c 	.word	0x0800b99c
 80095f8:	0800b95c 	.word	0x0800b95c

080095fc <std>:
 80095fc:	2300      	movs	r3, #0
 80095fe:	b510      	push	{r4, lr}
 8009600:	4604      	mov	r4, r0
 8009602:	e9c0 3300 	strd	r3, r3, [r0]
 8009606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800960a:	6083      	str	r3, [r0, #8]
 800960c:	8181      	strh	r1, [r0, #12]
 800960e:	6643      	str	r3, [r0, #100]	; 0x64
 8009610:	81c2      	strh	r2, [r0, #14]
 8009612:	6183      	str	r3, [r0, #24]
 8009614:	4619      	mov	r1, r3
 8009616:	2208      	movs	r2, #8
 8009618:	305c      	adds	r0, #92	; 0x5c
 800961a:	f7fe fa8f 	bl	8007b3c <memset>
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <std+0x38>)
 8009620:	6263      	str	r3, [r4, #36]	; 0x24
 8009622:	4b05      	ldr	r3, [pc, #20]	; (8009638 <std+0x3c>)
 8009624:	62a3      	str	r3, [r4, #40]	; 0x28
 8009626:	4b05      	ldr	r3, [pc, #20]	; (800963c <std+0x40>)
 8009628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800962a:	4b05      	ldr	r3, [pc, #20]	; (8009640 <std+0x44>)
 800962c:	6224      	str	r4, [r4, #32]
 800962e:	6323      	str	r3, [r4, #48]	; 0x30
 8009630:	bd10      	pop	{r4, pc}
 8009632:	bf00      	nop
 8009634:	0800a6e9 	.word	0x0800a6e9
 8009638:	0800a70b 	.word	0x0800a70b
 800963c:	0800a743 	.word	0x0800a743
 8009640:	0800a767 	.word	0x0800a767

08009644 <_cleanup_r>:
 8009644:	4901      	ldr	r1, [pc, #4]	; (800964c <_cleanup_r+0x8>)
 8009646:	f000 b8af 	b.w	80097a8 <_fwalk_reent>
 800964a:	bf00      	nop
 800964c:	08009585 	.word	0x08009585

08009650 <__sfmoreglue>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	1e4a      	subs	r2, r1, #1
 8009654:	2568      	movs	r5, #104	; 0x68
 8009656:	4355      	muls	r5, r2
 8009658:	460e      	mov	r6, r1
 800965a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800965e:	f000 fd23 	bl	800a0a8 <_malloc_r>
 8009662:	4604      	mov	r4, r0
 8009664:	b140      	cbz	r0, 8009678 <__sfmoreglue+0x28>
 8009666:	2100      	movs	r1, #0
 8009668:	e9c0 1600 	strd	r1, r6, [r0]
 800966c:	300c      	adds	r0, #12
 800966e:	60a0      	str	r0, [r4, #8]
 8009670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009674:	f7fe fa62 	bl	8007b3c <memset>
 8009678:	4620      	mov	r0, r4
 800967a:	bd70      	pop	{r4, r5, r6, pc}

0800967c <__sfp_lock_acquire>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__sfp_lock_acquire+0x8>)
 800967e:	f000 b8b8 	b.w	80097f2 <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	20000930 	.word	0x20000930

08009688 <__sfp_lock_release>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sfp_lock_release+0x8>)
 800968a:	f000 b8b3 	b.w	80097f4 <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	20000930 	.word	0x20000930

08009694 <__sinit_lock_acquire>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__sinit_lock_acquire+0x8>)
 8009696:	f000 b8ac 	b.w	80097f2 <__retarget_lock_acquire_recursive>
 800969a:	bf00      	nop
 800969c:	2000092b 	.word	0x2000092b

080096a0 <__sinit_lock_release>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__sinit_lock_release+0x8>)
 80096a2:	f000 b8a7 	b.w	80097f4 <__retarget_lock_release_recursive>
 80096a6:	bf00      	nop
 80096a8:	2000092b 	.word	0x2000092b

080096ac <__sinit>:
 80096ac:	b510      	push	{r4, lr}
 80096ae:	4604      	mov	r4, r0
 80096b0:	f7ff fff0 	bl	8009694 <__sinit_lock_acquire>
 80096b4:	69a3      	ldr	r3, [r4, #24]
 80096b6:	b11b      	cbz	r3, 80096c0 <__sinit+0x14>
 80096b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096bc:	f7ff bff0 	b.w	80096a0 <__sinit_lock_release>
 80096c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096c4:	6523      	str	r3, [r4, #80]	; 0x50
 80096c6:	4b13      	ldr	r3, [pc, #76]	; (8009714 <__sinit+0x68>)
 80096c8:	4a13      	ldr	r2, [pc, #76]	; (8009718 <__sinit+0x6c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ce:	42a3      	cmp	r3, r4
 80096d0:	bf04      	itt	eq
 80096d2:	2301      	moveq	r3, #1
 80096d4:	61a3      	streq	r3, [r4, #24]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 f820 	bl	800971c <__sfp>
 80096dc:	6060      	str	r0, [r4, #4]
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 f81c 	bl	800971c <__sfp>
 80096e4:	60a0      	str	r0, [r4, #8]
 80096e6:	4620      	mov	r0, r4
 80096e8:	f000 f818 	bl	800971c <__sfp>
 80096ec:	2200      	movs	r2, #0
 80096ee:	60e0      	str	r0, [r4, #12]
 80096f0:	2104      	movs	r1, #4
 80096f2:	6860      	ldr	r0, [r4, #4]
 80096f4:	f7ff ff82 	bl	80095fc <std>
 80096f8:	68a0      	ldr	r0, [r4, #8]
 80096fa:	2201      	movs	r2, #1
 80096fc:	2109      	movs	r1, #9
 80096fe:	f7ff ff7d 	bl	80095fc <std>
 8009702:	68e0      	ldr	r0, [r4, #12]
 8009704:	2202      	movs	r2, #2
 8009706:	2112      	movs	r1, #18
 8009708:	f7ff ff78 	bl	80095fc <std>
 800970c:	2301      	movs	r3, #1
 800970e:	61a3      	str	r3, [r4, #24]
 8009710:	e7d2      	b.n	80096b8 <__sinit+0xc>
 8009712:	bf00      	nop
 8009714:	0800b890 	.word	0x0800b890
 8009718:	08009645 	.word	0x08009645

0800971c <__sfp>:
 800971c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800971e:	4607      	mov	r7, r0
 8009720:	f7ff ffac 	bl	800967c <__sfp_lock_acquire>
 8009724:	4b1e      	ldr	r3, [pc, #120]	; (80097a0 <__sfp+0x84>)
 8009726:	681e      	ldr	r6, [r3, #0]
 8009728:	69b3      	ldr	r3, [r6, #24]
 800972a:	b913      	cbnz	r3, 8009732 <__sfp+0x16>
 800972c:	4630      	mov	r0, r6
 800972e:	f7ff ffbd 	bl	80096ac <__sinit>
 8009732:	3648      	adds	r6, #72	; 0x48
 8009734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009738:	3b01      	subs	r3, #1
 800973a:	d503      	bpl.n	8009744 <__sfp+0x28>
 800973c:	6833      	ldr	r3, [r6, #0]
 800973e:	b30b      	cbz	r3, 8009784 <__sfp+0x68>
 8009740:	6836      	ldr	r6, [r6, #0]
 8009742:	e7f7      	b.n	8009734 <__sfp+0x18>
 8009744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009748:	b9d5      	cbnz	r5, 8009780 <__sfp+0x64>
 800974a:	4b16      	ldr	r3, [pc, #88]	; (80097a4 <__sfp+0x88>)
 800974c:	60e3      	str	r3, [r4, #12]
 800974e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009752:	6665      	str	r5, [r4, #100]	; 0x64
 8009754:	f000 f84c 	bl	80097f0 <__retarget_lock_init_recursive>
 8009758:	f7ff ff96 	bl	8009688 <__sfp_lock_release>
 800975c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009764:	6025      	str	r5, [r4, #0]
 8009766:	61a5      	str	r5, [r4, #24]
 8009768:	2208      	movs	r2, #8
 800976a:	4629      	mov	r1, r5
 800976c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009770:	f7fe f9e4 	bl	8007b3c <memset>
 8009774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800977c:	4620      	mov	r0, r4
 800977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009780:	3468      	adds	r4, #104	; 0x68
 8009782:	e7d9      	b.n	8009738 <__sfp+0x1c>
 8009784:	2104      	movs	r1, #4
 8009786:	4638      	mov	r0, r7
 8009788:	f7ff ff62 	bl	8009650 <__sfmoreglue>
 800978c:	4604      	mov	r4, r0
 800978e:	6030      	str	r0, [r6, #0]
 8009790:	2800      	cmp	r0, #0
 8009792:	d1d5      	bne.n	8009740 <__sfp+0x24>
 8009794:	f7ff ff78 	bl	8009688 <__sfp_lock_release>
 8009798:	230c      	movs	r3, #12
 800979a:	603b      	str	r3, [r7, #0]
 800979c:	e7ee      	b.n	800977c <__sfp+0x60>
 800979e:	bf00      	nop
 80097a0:	0800b890 	.word	0x0800b890
 80097a4:	ffff0001 	.word	0xffff0001

080097a8 <_fwalk_reent>:
 80097a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097ac:	4606      	mov	r6, r0
 80097ae:	4688      	mov	r8, r1
 80097b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097b4:	2700      	movs	r7, #0
 80097b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097ba:	f1b9 0901 	subs.w	r9, r9, #1
 80097be:	d505      	bpl.n	80097cc <_fwalk_reent+0x24>
 80097c0:	6824      	ldr	r4, [r4, #0]
 80097c2:	2c00      	cmp	r4, #0
 80097c4:	d1f7      	bne.n	80097b6 <_fwalk_reent+0xe>
 80097c6:	4638      	mov	r0, r7
 80097c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097cc:	89ab      	ldrh	r3, [r5, #12]
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d907      	bls.n	80097e2 <_fwalk_reent+0x3a>
 80097d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097d6:	3301      	adds	r3, #1
 80097d8:	d003      	beq.n	80097e2 <_fwalk_reent+0x3a>
 80097da:	4629      	mov	r1, r5
 80097dc:	4630      	mov	r0, r6
 80097de:	47c0      	blx	r8
 80097e0:	4307      	orrs	r7, r0
 80097e2:	3568      	adds	r5, #104	; 0x68
 80097e4:	e7e9      	b.n	80097ba <_fwalk_reent+0x12>
	...

080097e8 <_localeconv_r>:
 80097e8:	4800      	ldr	r0, [pc, #0]	; (80097ec <_localeconv_r+0x4>)
 80097ea:	4770      	bx	lr
 80097ec:	2000016c 	.word	0x2000016c

080097f0 <__retarget_lock_init_recursive>:
 80097f0:	4770      	bx	lr

080097f2 <__retarget_lock_acquire_recursive>:
 80097f2:	4770      	bx	lr

080097f4 <__retarget_lock_release_recursive>:
 80097f4:	4770      	bx	lr

080097f6 <__swhatbuf_r>:
 80097f6:	b570      	push	{r4, r5, r6, lr}
 80097f8:	460e      	mov	r6, r1
 80097fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fe:	2900      	cmp	r1, #0
 8009800:	b096      	sub	sp, #88	; 0x58
 8009802:	4614      	mov	r4, r2
 8009804:	461d      	mov	r5, r3
 8009806:	da07      	bge.n	8009818 <__swhatbuf_r+0x22>
 8009808:	2300      	movs	r3, #0
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	89b3      	ldrh	r3, [r6, #12]
 800980e:	061a      	lsls	r2, r3, #24
 8009810:	d410      	bmi.n	8009834 <__swhatbuf_r+0x3e>
 8009812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009816:	e00e      	b.n	8009836 <__swhatbuf_r+0x40>
 8009818:	466a      	mov	r2, sp
 800981a:	f000 fffb 	bl	800a814 <_fstat_r>
 800981e:	2800      	cmp	r0, #0
 8009820:	dbf2      	blt.n	8009808 <__swhatbuf_r+0x12>
 8009822:	9a01      	ldr	r2, [sp, #4]
 8009824:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009828:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800982c:	425a      	negs	r2, r3
 800982e:	415a      	adcs	r2, r3
 8009830:	602a      	str	r2, [r5, #0]
 8009832:	e7ee      	b.n	8009812 <__swhatbuf_r+0x1c>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	2000      	movs	r0, #0
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	b016      	add	sp, #88	; 0x58
 800983c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009840 <__smakebuf_r>:
 8009840:	898b      	ldrh	r3, [r1, #12]
 8009842:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009844:	079d      	lsls	r5, r3, #30
 8009846:	4606      	mov	r6, r0
 8009848:	460c      	mov	r4, r1
 800984a:	d507      	bpl.n	800985c <__smakebuf_r+0x1c>
 800984c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	2301      	movs	r3, #1
 8009856:	6163      	str	r3, [r4, #20]
 8009858:	b002      	add	sp, #8
 800985a:	bd70      	pop	{r4, r5, r6, pc}
 800985c:	ab01      	add	r3, sp, #4
 800985e:	466a      	mov	r2, sp
 8009860:	f7ff ffc9 	bl	80097f6 <__swhatbuf_r>
 8009864:	9900      	ldr	r1, [sp, #0]
 8009866:	4605      	mov	r5, r0
 8009868:	4630      	mov	r0, r6
 800986a:	f000 fc1d 	bl	800a0a8 <_malloc_r>
 800986e:	b948      	cbnz	r0, 8009884 <__smakebuf_r+0x44>
 8009870:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009874:	059a      	lsls	r2, r3, #22
 8009876:	d4ef      	bmi.n	8009858 <__smakebuf_r+0x18>
 8009878:	f023 0303 	bic.w	r3, r3, #3
 800987c:	f043 0302 	orr.w	r3, r3, #2
 8009880:	81a3      	strh	r3, [r4, #12]
 8009882:	e7e3      	b.n	800984c <__smakebuf_r+0xc>
 8009884:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <__smakebuf_r+0x7c>)
 8009886:	62b3      	str	r3, [r6, #40]	; 0x28
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	6020      	str	r0, [r4, #0]
 800988c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009890:	81a3      	strh	r3, [r4, #12]
 8009892:	9b00      	ldr	r3, [sp, #0]
 8009894:	6163      	str	r3, [r4, #20]
 8009896:	9b01      	ldr	r3, [sp, #4]
 8009898:	6120      	str	r0, [r4, #16]
 800989a:	b15b      	cbz	r3, 80098b4 <__smakebuf_r+0x74>
 800989c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a0:	4630      	mov	r0, r6
 80098a2:	f000 ffc9 	bl	800a838 <_isatty_r>
 80098a6:	b128      	cbz	r0, 80098b4 <__smakebuf_r+0x74>
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	f023 0303 	bic.w	r3, r3, #3
 80098ae:	f043 0301 	orr.w	r3, r3, #1
 80098b2:	81a3      	strh	r3, [r4, #12]
 80098b4:	89a0      	ldrh	r0, [r4, #12]
 80098b6:	4305      	orrs	r5, r0
 80098b8:	81a5      	strh	r5, [r4, #12]
 80098ba:	e7cd      	b.n	8009858 <__smakebuf_r+0x18>
 80098bc:	08009645 	.word	0x08009645

080098c0 <malloc>:
 80098c0:	4b02      	ldr	r3, [pc, #8]	; (80098cc <malloc+0xc>)
 80098c2:	4601      	mov	r1, r0
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f000 bbef 	b.w	800a0a8 <_malloc_r>
 80098ca:	bf00      	nop
 80098cc:	20000018 	.word	0x20000018

080098d0 <memcpy>:
 80098d0:	440a      	add	r2, r1
 80098d2:	4291      	cmp	r1, r2
 80098d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d8:	d100      	bne.n	80098dc <memcpy+0xc>
 80098da:	4770      	bx	lr
 80098dc:	b510      	push	{r4, lr}
 80098de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e6:	4291      	cmp	r1, r2
 80098e8:	d1f9      	bne.n	80098de <memcpy+0xe>
 80098ea:	bd10      	pop	{r4, pc}

080098ec <_Balloc>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80098f0:	4604      	mov	r4, r0
 80098f2:	460d      	mov	r5, r1
 80098f4:	b976      	cbnz	r6, 8009914 <_Balloc+0x28>
 80098f6:	2010      	movs	r0, #16
 80098f8:	f7ff ffe2 	bl	80098c0 <malloc>
 80098fc:	4602      	mov	r2, r0
 80098fe:	6260      	str	r0, [r4, #36]	; 0x24
 8009900:	b920      	cbnz	r0, 800990c <_Balloc+0x20>
 8009902:	4b18      	ldr	r3, [pc, #96]	; (8009964 <_Balloc+0x78>)
 8009904:	4818      	ldr	r0, [pc, #96]	; (8009968 <_Balloc+0x7c>)
 8009906:	2166      	movs	r1, #102	; 0x66
 8009908:	f000 ff44 	bl	800a794 <__assert_func>
 800990c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009910:	6006      	str	r6, [r0, #0]
 8009912:	60c6      	str	r6, [r0, #12]
 8009914:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009916:	68f3      	ldr	r3, [r6, #12]
 8009918:	b183      	cbz	r3, 800993c <_Balloc+0x50>
 800991a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009922:	b9b8      	cbnz	r0, 8009954 <_Balloc+0x68>
 8009924:	2101      	movs	r1, #1
 8009926:	fa01 f605 	lsl.w	r6, r1, r5
 800992a:	1d72      	adds	r2, r6, #5
 800992c:	0092      	lsls	r2, r2, #2
 800992e:	4620      	mov	r0, r4
 8009930:	f000 fb5a 	bl	8009fe8 <_calloc_r>
 8009934:	b160      	cbz	r0, 8009950 <_Balloc+0x64>
 8009936:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800993a:	e00e      	b.n	800995a <_Balloc+0x6e>
 800993c:	2221      	movs	r2, #33	; 0x21
 800993e:	2104      	movs	r1, #4
 8009940:	4620      	mov	r0, r4
 8009942:	f000 fb51 	bl	8009fe8 <_calloc_r>
 8009946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009948:	60f0      	str	r0, [r6, #12]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d1e4      	bne.n	800991a <_Balloc+0x2e>
 8009950:	2000      	movs	r0, #0
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	6802      	ldr	r2, [r0, #0]
 8009956:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800995a:	2300      	movs	r3, #0
 800995c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009960:	e7f7      	b.n	8009952 <_Balloc+0x66>
 8009962:	bf00      	nop
 8009964:	0800b8d5 	.word	0x0800b8d5
 8009968:	0800b9bc 	.word	0x0800b9bc

0800996c <_Bfree>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009970:	4605      	mov	r5, r0
 8009972:	460c      	mov	r4, r1
 8009974:	b976      	cbnz	r6, 8009994 <_Bfree+0x28>
 8009976:	2010      	movs	r0, #16
 8009978:	f7ff ffa2 	bl	80098c0 <malloc>
 800997c:	4602      	mov	r2, r0
 800997e:	6268      	str	r0, [r5, #36]	; 0x24
 8009980:	b920      	cbnz	r0, 800998c <_Bfree+0x20>
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <_Bfree+0x3c>)
 8009984:	4809      	ldr	r0, [pc, #36]	; (80099ac <_Bfree+0x40>)
 8009986:	218a      	movs	r1, #138	; 0x8a
 8009988:	f000 ff04 	bl	800a794 <__assert_func>
 800998c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009990:	6006      	str	r6, [r0, #0]
 8009992:	60c6      	str	r6, [r0, #12]
 8009994:	b13c      	cbz	r4, 80099a6 <_Bfree+0x3a>
 8009996:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009998:	6862      	ldr	r2, [r4, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099a0:	6021      	str	r1, [r4, #0]
 80099a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	0800b8d5 	.word	0x0800b8d5
 80099ac:	0800b9bc 	.word	0x0800b9bc

080099b0 <__multadd>:
 80099b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b4:	690e      	ldr	r6, [r1, #16]
 80099b6:	4607      	mov	r7, r0
 80099b8:	4698      	mov	r8, r3
 80099ba:	460c      	mov	r4, r1
 80099bc:	f101 0014 	add.w	r0, r1, #20
 80099c0:	2300      	movs	r3, #0
 80099c2:	6805      	ldr	r5, [r0, #0]
 80099c4:	b2a9      	uxth	r1, r5
 80099c6:	fb02 8101 	mla	r1, r2, r1, r8
 80099ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80099ce:	0c2d      	lsrs	r5, r5, #16
 80099d0:	fb02 c505 	mla	r5, r2, r5, ip
 80099d4:	b289      	uxth	r1, r1
 80099d6:	3301      	adds	r3, #1
 80099d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80099dc:	429e      	cmp	r6, r3
 80099de:	f840 1b04 	str.w	r1, [r0], #4
 80099e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80099e6:	dcec      	bgt.n	80099c2 <__multadd+0x12>
 80099e8:	f1b8 0f00 	cmp.w	r8, #0
 80099ec:	d022      	beq.n	8009a34 <__multadd+0x84>
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	42b3      	cmp	r3, r6
 80099f2:	dc19      	bgt.n	8009a28 <__multadd+0x78>
 80099f4:	6861      	ldr	r1, [r4, #4]
 80099f6:	4638      	mov	r0, r7
 80099f8:	3101      	adds	r1, #1
 80099fa:	f7ff ff77 	bl	80098ec <_Balloc>
 80099fe:	4605      	mov	r5, r0
 8009a00:	b928      	cbnz	r0, 8009a0e <__multadd+0x5e>
 8009a02:	4602      	mov	r2, r0
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <__multadd+0x8c>)
 8009a06:	480e      	ldr	r0, [pc, #56]	; (8009a40 <__multadd+0x90>)
 8009a08:	21b5      	movs	r1, #181	; 0xb5
 8009a0a:	f000 fec3 	bl	800a794 <__assert_func>
 8009a0e:	6922      	ldr	r2, [r4, #16]
 8009a10:	3202      	adds	r2, #2
 8009a12:	f104 010c 	add.w	r1, r4, #12
 8009a16:	0092      	lsls	r2, r2, #2
 8009a18:	300c      	adds	r0, #12
 8009a1a:	f7ff ff59 	bl	80098d0 <memcpy>
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff ffa3 	bl	800996c <_Bfree>
 8009a26:	462c      	mov	r4, r5
 8009a28:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009a2c:	3601      	adds	r6, #1
 8009a2e:	f8c3 8014 	str.w	r8, [r3, #20]
 8009a32:	6126      	str	r6, [r4, #16]
 8009a34:	4620      	mov	r0, r4
 8009a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a3a:	bf00      	nop
 8009a3c:	0800b94b 	.word	0x0800b94b
 8009a40:	0800b9bc 	.word	0x0800b9bc

08009a44 <__hi0bits>:
 8009a44:	0c03      	lsrs	r3, r0, #16
 8009a46:	041b      	lsls	r3, r3, #16
 8009a48:	b9d3      	cbnz	r3, 8009a80 <__hi0bits+0x3c>
 8009a4a:	0400      	lsls	r0, r0, #16
 8009a4c:	2310      	movs	r3, #16
 8009a4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a52:	bf04      	itt	eq
 8009a54:	0200      	lsleq	r0, r0, #8
 8009a56:	3308      	addeq	r3, #8
 8009a58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a5c:	bf04      	itt	eq
 8009a5e:	0100      	lsleq	r0, r0, #4
 8009a60:	3304      	addeq	r3, #4
 8009a62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a66:	bf04      	itt	eq
 8009a68:	0080      	lsleq	r0, r0, #2
 8009a6a:	3302      	addeq	r3, #2
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	db05      	blt.n	8009a7c <__hi0bits+0x38>
 8009a70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a74:	f103 0301 	add.w	r3, r3, #1
 8009a78:	bf08      	it	eq
 8009a7a:	2320      	moveq	r3, #32
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	4770      	bx	lr
 8009a80:	2300      	movs	r3, #0
 8009a82:	e7e4      	b.n	8009a4e <__hi0bits+0xa>

08009a84 <__lo0bits>:
 8009a84:	6803      	ldr	r3, [r0, #0]
 8009a86:	f013 0207 	ands.w	r2, r3, #7
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	d00b      	beq.n	8009aa6 <__lo0bits+0x22>
 8009a8e:	07da      	lsls	r2, r3, #31
 8009a90:	d424      	bmi.n	8009adc <__lo0bits+0x58>
 8009a92:	0798      	lsls	r0, r3, #30
 8009a94:	bf49      	itett	mi
 8009a96:	085b      	lsrmi	r3, r3, #1
 8009a98:	089b      	lsrpl	r3, r3, #2
 8009a9a:	2001      	movmi	r0, #1
 8009a9c:	600b      	strmi	r3, [r1, #0]
 8009a9e:	bf5c      	itt	pl
 8009aa0:	600b      	strpl	r3, [r1, #0]
 8009aa2:	2002      	movpl	r0, #2
 8009aa4:	4770      	bx	lr
 8009aa6:	b298      	uxth	r0, r3
 8009aa8:	b9b0      	cbnz	r0, 8009ad8 <__lo0bits+0x54>
 8009aaa:	0c1b      	lsrs	r3, r3, #16
 8009aac:	2010      	movs	r0, #16
 8009aae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ab2:	bf04      	itt	eq
 8009ab4:	0a1b      	lsreq	r3, r3, #8
 8009ab6:	3008      	addeq	r0, #8
 8009ab8:	071a      	lsls	r2, r3, #28
 8009aba:	bf04      	itt	eq
 8009abc:	091b      	lsreq	r3, r3, #4
 8009abe:	3004      	addeq	r0, #4
 8009ac0:	079a      	lsls	r2, r3, #30
 8009ac2:	bf04      	itt	eq
 8009ac4:	089b      	lsreq	r3, r3, #2
 8009ac6:	3002      	addeq	r0, #2
 8009ac8:	07da      	lsls	r2, r3, #31
 8009aca:	d403      	bmi.n	8009ad4 <__lo0bits+0x50>
 8009acc:	085b      	lsrs	r3, r3, #1
 8009ace:	f100 0001 	add.w	r0, r0, #1
 8009ad2:	d005      	beq.n	8009ae0 <__lo0bits+0x5c>
 8009ad4:	600b      	str	r3, [r1, #0]
 8009ad6:	4770      	bx	lr
 8009ad8:	4610      	mov	r0, r2
 8009ada:	e7e8      	b.n	8009aae <__lo0bits+0x2a>
 8009adc:	2000      	movs	r0, #0
 8009ade:	4770      	bx	lr
 8009ae0:	2020      	movs	r0, #32
 8009ae2:	4770      	bx	lr

08009ae4 <__i2b>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	460c      	mov	r4, r1
 8009ae8:	2101      	movs	r1, #1
 8009aea:	f7ff feff 	bl	80098ec <_Balloc>
 8009aee:	4602      	mov	r2, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__i2b+0x1a>
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <__i2b+0x24>)
 8009af4:	4805      	ldr	r0, [pc, #20]	; (8009b0c <__i2b+0x28>)
 8009af6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009afa:	f000 fe4b 	bl	800a794 <__assert_func>
 8009afe:	2301      	movs	r3, #1
 8009b00:	6144      	str	r4, [r0, #20]
 8009b02:	6103      	str	r3, [r0, #16]
 8009b04:	bd10      	pop	{r4, pc}
 8009b06:	bf00      	nop
 8009b08:	0800b94b 	.word	0x0800b94b
 8009b0c:	0800b9bc 	.word	0x0800b9bc

08009b10 <__multiply>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	4614      	mov	r4, r2
 8009b16:	690a      	ldr	r2, [r1, #16]
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	bfb8      	it	lt
 8009b1e:	460b      	movlt	r3, r1
 8009b20:	460d      	mov	r5, r1
 8009b22:	bfbc      	itt	lt
 8009b24:	4625      	movlt	r5, r4
 8009b26:	461c      	movlt	r4, r3
 8009b28:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b2c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b30:	68ab      	ldr	r3, [r5, #8]
 8009b32:	6869      	ldr	r1, [r5, #4]
 8009b34:	eb0a 0709 	add.w	r7, sl, r9
 8009b38:	42bb      	cmp	r3, r7
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	bfb8      	it	lt
 8009b3e:	3101      	addlt	r1, #1
 8009b40:	f7ff fed4 	bl	80098ec <_Balloc>
 8009b44:	b930      	cbnz	r0, 8009b54 <__multiply+0x44>
 8009b46:	4602      	mov	r2, r0
 8009b48:	4b42      	ldr	r3, [pc, #264]	; (8009c54 <__multiply+0x144>)
 8009b4a:	4843      	ldr	r0, [pc, #268]	; (8009c58 <__multiply+0x148>)
 8009b4c:	f240 115d 	movw	r1, #349	; 0x15d
 8009b50:	f000 fe20 	bl	800a794 <__assert_func>
 8009b54:	f100 0614 	add.w	r6, r0, #20
 8009b58:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009b5c:	4633      	mov	r3, r6
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4543      	cmp	r3, r8
 8009b62:	d31e      	bcc.n	8009ba2 <__multiply+0x92>
 8009b64:	f105 0c14 	add.w	ip, r5, #20
 8009b68:	f104 0314 	add.w	r3, r4, #20
 8009b6c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009b70:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009b74:	9202      	str	r2, [sp, #8]
 8009b76:	ebac 0205 	sub.w	r2, ip, r5
 8009b7a:	3a15      	subs	r2, #21
 8009b7c:	f022 0203 	bic.w	r2, r2, #3
 8009b80:	3204      	adds	r2, #4
 8009b82:	f105 0115 	add.w	r1, r5, #21
 8009b86:	458c      	cmp	ip, r1
 8009b88:	bf38      	it	cc
 8009b8a:	2204      	movcc	r2, #4
 8009b8c:	9201      	str	r2, [sp, #4]
 8009b8e:	9a02      	ldr	r2, [sp, #8]
 8009b90:	9303      	str	r3, [sp, #12]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d808      	bhi.n	8009ba8 <__multiply+0x98>
 8009b96:	2f00      	cmp	r7, #0
 8009b98:	dc55      	bgt.n	8009c46 <__multiply+0x136>
 8009b9a:	6107      	str	r7, [r0, #16]
 8009b9c:	b005      	add	sp, #20
 8009b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba2:	f843 2b04 	str.w	r2, [r3], #4
 8009ba6:	e7db      	b.n	8009b60 <__multiply+0x50>
 8009ba8:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bac:	f1ba 0f00 	cmp.w	sl, #0
 8009bb0:	d020      	beq.n	8009bf4 <__multiply+0xe4>
 8009bb2:	f105 0e14 	add.w	lr, r5, #20
 8009bb6:	46b1      	mov	r9, r6
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009bbe:	f8d9 b000 	ldr.w	fp, [r9]
 8009bc2:	b2a1      	uxth	r1, r4
 8009bc4:	fa1f fb8b 	uxth.w	fp, fp
 8009bc8:	fb0a b101 	mla	r1, sl, r1, fp
 8009bcc:	4411      	add	r1, r2
 8009bce:	f8d9 2000 	ldr.w	r2, [r9]
 8009bd2:	0c24      	lsrs	r4, r4, #16
 8009bd4:	0c12      	lsrs	r2, r2, #16
 8009bd6:	fb0a 2404 	mla	r4, sl, r4, r2
 8009bda:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009bde:	b289      	uxth	r1, r1
 8009be0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009be4:	45f4      	cmp	ip, lr
 8009be6:	f849 1b04 	str.w	r1, [r9], #4
 8009bea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009bee:	d8e4      	bhi.n	8009bba <__multiply+0xaa>
 8009bf0:	9901      	ldr	r1, [sp, #4]
 8009bf2:	5072      	str	r2, [r6, r1]
 8009bf4:	9a03      	ldr	r2, [sp, #12]
 8009bf6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	f1b9 0f00 	cmp.w	r9, #0
 8009c00:	d01f      	beq.n	8009c42 <__multiply+0x132>
 8009c02:	6834      	ldr	r4, [r6, #0]
 8009c04:	f105 0114 	add.w	r1, r5, #20
 8009c08:	46b6      	mov	lr, r6
 8009c0a:	f04f 0a00 	mov.w	sl, #0
 8009c0e:	880a      	ldrh	r2, [r1, #0]
 8009c10:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c14:	fb09 b202 	mla	r2, r9, r2, fp
 8009c18:	4492      	add	sl, r2
 8009c1a:	b2a4      	uxth	r4, r4
 8009c1c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009c20:	f84e 4b04 	str.w	r4, [lr], #4
 8009c24:	f851 4b04 	ldr.w	r4, [r1], #4
 8009c28:	f8be 2000 	ldrh.w	r2, [lr]
 8009c2c:	0c24      	lsrs	r4, r4, #16
 8009c2e:	fb09 2404 	mla	r4, r9, r4, r2
 8009c32:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009c36:	458c      	cmp	ip, r1
 8009c38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c3c:	d8e7      	bhi.n	8009c0e <__multiply+0xfe>
 8009c3e:	9a01      	ldr	r2, [sp, #4]
 8009c40:	50b4      	str	r4, [r6, r2]
 8009c42:	3604      	adds	r6, #4
 8009c44:	e7a3      	b.n	8009b8e <__multiply+0x7e>
 8009c46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1a5      	bne.n	8009b9a <__multiply+0x8a>
 8009c4e:	3f01      	subs	r7, #1
 8009c50:	e7a1      	b.n	8009b96 <__multiply+0x86>
 8009c52:	bf00      	nop
 8009c54:	0800b94b 	.word	0x0800b94b
 8009c58:	0800b9bc 	.word	0x0800b9bc

08009c5c <__pow5mult>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	4615      	mov	r5, r2
 8009c62:	f012 0203 	ands.w	r2, r2, #3
 8009c66:	4606      	mov	r6, r0
 8009c68:	460f      	mov	r7, r1
 8009c6a:	d007      	beq.n	8009c7c <__pow5mult+0x20>
 8009c6c:	4c25      	ldr	r4, [pc, #148]	; (8009d04 <__pow5mult+0xa8>)
 8009c6e:	3a01      	subs	r2, #1
 8009c70:	2300      	movs	r3, #0
 8009c72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c76:	f7ff fe9b 	bl	80099b0 <__multadd>
 8009c7a:	4607      	mov	r7, r0
 8009c7c:	10ad      	asrs	r5, r5, #2
 8009c7e:	d03d      	beq.n	8009cfc <__pow5mult+0xa0>
 8009c80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009c82:	b97c      	cbnz	r4, 8009ca4 <__pow5mult+0x48>
 8009c84:	2010      	movs	r0, #16
 8009c86:	f7ff fe1b 	bl	80098c0 <malloc>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6270      	str	r0, [r6, #36]	; 0x24
 8009c8e:	b928      	cbnz	r0, 8009c9c <__pow5mult+0x40>
 8009c90:	4b1d      	ldr	r3, [pc, #116]	; (8009d08 <__pow5mult+0xac>)
 8009c92:	481e      	ldr	r0, [pc, #120]	; (8009d0c <__pow5mult+0xb0>)
 8009c94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009c98:	f000 fd7c 	bl	800a794 <__assert_func>
 8009c9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ca0:	6004      	str	r4, [r0, #0]
 8009ca2:	60c4      	str	r4, [r0, #12]
 8009ca4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ca8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cac:	b94c      	cbnz	r4, 8009cc2 <__pow5mult+0x66>
 8009cae:	f240 2171 	movw	r1, #625	; 0x271
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff16 	bl	8009ae4 <__i2b>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	6003      	str	r3, [r0, #0]
 8009cc2:	f04f 0900 	mov.w	r9, #0
 8009cc6:	07eb      	lsls	r3, r5, #31
 8009cc8:	d50a      	bpl.n	8009ce0 <__pow5mult+0x84>
 8009cca:	4639      	mov	r1, r7
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4630      	mov	r0, r6
 8009cd0:	f7ff ff1e 	bl	8009b10 <__multiply>
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff fe47 	bl	800996c <_Bfree>
 8009cde:	4647      	mov	r7, r8
 8009ce0:	106d      	asrs	r5, r5, #1
 8009ce2:	d00b      	beq.n	8009cfc <__pow5mult+0xa0>
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	b938      	cbnz	r0, 8009cf8 <__pow5mult+0x9c>
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4621      	mov	r1, r4
 8009cec:	4630      	mov	r0, r6
 8009cee:	f7ff ff0f 	bl	8009b10 <__multiply>
 8009cf2:	6020      	str	r0, [r4, #0]
 8009cf4:	f8c0 9000 	str.w	r9, [r0]
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	e7e4      	b.n	8009cc6 <__pow5mult+0x6a>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d02:	bf00      	nop
 8009d04:	0800bb10 	.word	0x0800bb10
 8009d08:	0800b8d5 	.word	0x0800b8d5
 8009d0c:	0800b9bc 	.word	0x0800b9bc

08009d10 <__lshift>:
 8009d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d14:	460c      	mov	r4, r1
 8009d16:	6849      	ldr	r1, [r1, #4]
 8009d18:	6923      	ldr	r3, [r4, #16]
 8009d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	4607      	mov	r7, r0
 8009d22:	4691      	mov	r9, r2
 8009d24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d28:	f108 0601 	add.w	r6, r8, #1
 8009d2c:	42b3      	cmp	r3, r6
 8009d2e:	db0b      	blt.n	8009d48 <__lshift+0x38>
 8009d30:	4638      	mov	r0, r7
 8009d32:	f7ff fddb 	bl	80098ec <_Balloc>
 8009d36:	4605      	mov	r5, r0
 8009d38:	b948      	cbnz	r0, 8009d4e <__lshift+0x3e>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	4b28      	ldr	r3, [pc, #160]	; (8009de0 <__lshift+0xd0>)
 8009d3e:	4829      	ldr	r0, [pc, #164]	; (8009de4 <__lshift+0xd4>)
 8009d40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d44:	f000 fd26 	bl	800a794 <__assert_func>
 8009d48:	3101      	adds	r1, #1
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	e7ee      	b.n	8009d2c <__lshift+0x1c>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f100 0114 	add.w	r1, r0, #20
 8009d54:	f100 0210 	add.w	r2, r0, #16
 8009d58:	4618      	mov	r0, r3
 8009d5a:	4553      	cmp	r3, sl
 8009d5c:	db33      	blt.n	8009dc6 <__lshift+0xb6>
 8009d5e:	6920      	ldr	r0, [r4, #16]
 8009d60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d64:	f104 0314 	add.w	r3, r4, #20
 8009d68:	f019 091f 	ands.w	r9, r9, #31
 8009d6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d74:	d02b      	beq.n	8009dce <__lshift+0xbe>
 8009d76:	f1c9 0e20 	rsb	lr, r9, #32
 8009d7a:	468a      	mov	sl, r1
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	6818      	ldr	r0, [r3, #0]
 8009d80:	fa00 f009 	lsl.w	r0, r0, r9
 8009d84:	4302      	orrs	r2, r0
 8009d86:	f84a 2b04 	str.w	r2, [sl], #4
 8009d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8e:	459c      	cmp	ip, r3
 8009d90:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d94:	d8f3      	bhi.n	8009d7e <__lshift+0x6e>
 8009d96:	ebac 0304 	sub.w	r3, ip, r4
 8009d9a:	3b15      	subs	r3, #21
 8009d9c:	f023 0303 	bic.w	r3, r3, #3
 8009da0:	3304      	adds	r3, #4
 8009da2:	f104 0015 	add.w	r0, r4, #21
 8009da6:	4584      	cmp	ip, r0
 8009da8:	bf38      	it	cc
 8009daa:	2304      	movcc	r3, #4
 8009dac:	50ca      	str	r2, [r1, r3]
 8009dae:	b10a      	cbz	r2, 8009db4 <__lshift+0xa4>
 8009db0:	f108 0602 	add.w	r6, r8, #2
 8009db4:	3e01      	subs	r6, #1
 8009db6:	4638      	mov	r0, r7
 8009db8:	612e      	str	r6, [r5, #16]
 8009dba:	4621      	mov	r1, r4
 8009dbc:	f7ff fdd6 	bl	800996c <_Bfree>
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dca:	3301      	adds	r3, #1
 8009dcc:	e7c5      	b.n	8009d5a <__lshift+0x4a>
 8009dce:	3904      	subs	r1, #4
 8009dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dd8:	459c      	cmp	ip, r3
 8009dda:	d8f9      	bhi.n	8009dd0 <__lshift+0xc0>
 8009ddc:	e7ea      	b.n	8009db4 <__lshift+0xa4>
 8009dde:	bf00      	nop
 8009de0:	0800b94b 	.word	0x0800b94b
 8009de4:	0800b9bc 	.word	0x0800b9bc

08009de8 <__mcmp>:
 8009de8:	b530      	push	{r4, r5, lr}
 8009dea:	6902      	ldr	r2, [r0, #16]
 8009dec:	690c      	ldr	r4, [r1, #16]
 8009dee:	1b12      	subs	r2, r2, r4
 8009df0:	d10e      	bne.n	8009e10 <__mcmp+0x28>
 8009df2:	f100 0314 	add.w	r3, r0, #20
 8009df6:	3114      	adds	r1, #20
 8009df8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009dfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e08:	42a5      	cmp	r5, r4
 8009e0a:	d003      	beq.n	8009e14 <__mcmp+0x2c>
 8009e0c:	d305      	bcc.n	8009e1a <__mcmp+0x32>
 8009e0e:	2201      	movs	r2, #1
 8009e10:	4610      	mov	r0, r2
 8009e12:	bd30      	pop	{r4, r5, pc}
 8009e14:	4283      	cmp	r3, r0
 8009e16:	d3f3      	bcc.n	8009e00 <__mcmp+0x18>
 8009e18:	e7fa      	b.n	8009e10 <__mcmp+0x28>
 8009e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1e:	e7f7      	b.n	8009e10 <__mcmp+0x28>

08009e20 <__mdiff>:
 8009e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	4606      	mov	r6, r0
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	4617      	mov	r7, r2
 8009e2e:	f7ff ffdb 	bl	8009de8 <__mcmp>
 8009e32:	1e05      	subs	r5, r0, #0
 8009e34:	d110      	bne.n	8009e58 <__mdiff+0x38>
 8009e36:	4629      	mov	r1, r5
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff fd57 	bl	80098ec <_Balloc>
 8009e3e:	b930      	cbnz	r0, 8009e4e <__mdiff+0x2e>
 8009e40:	4b39      	ldr	r3, [pc, #228]	; (8009f28 <__mdiff+0x108>)
 8009e42:	4602      	mov	r2, r0
 8009e44:	f240 2132 	movw	r1, #562	; 0x232
 8009e48:	4838      	ldr	r0, [pc, #224]	; (8009f2c <__mdiff+0x10c>)
 8009e4a:	f000 fca3 	bl	800a794 <__assert_func>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	bfa4      	itt	ge
 8009e5a:	463b      	movge	r3, r7
 8009e5c:	4627      	movge	r7, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	6879      	ldr	r1, [r7, #4]
 8009e62:	bfa6      	itte	ge
 8009e64:	461c      	movge	r4, r3
 8009e66:	2500      	movge	r5, #0
 8009e68:	2501      	movlt	r5, #1
 8009e6a:	f7ff fd3f 	bl	80098ec <_Balloc>
 8009e6e:	b920      	cbnz	r0, 8009e7a <__mdiff+0x5a>
 8009e70:	4b2d      	ldr	r3, [pc, #180]	; (8009f28 <__mdiff+0x108>)
 8009e72:	4602      	mov	r2, r0
 8009e74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009e78:	e7e6      	b.n	8009e48 <__mdiff+0x28>
 8009e7a:	693e      	ldr	r6, [r7, #16]
 8009e7c:	60c5      	str	r5, [r0, #12]
 8009e7e:	6925      	ldr	r5, [r4, #16]
 8009e80:	f107 0114 	add.w	r1, r7, #20
 8009e84:	f104 0914 	add.w	r9, r4, #20
 8009e88:	f100 0e14 	add.w	lr, r0, #20
 8009e8c:	f107 0210 	add.w	r2, r7, #16
 8009e90:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009e94:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009e98:	46f2      	mov	sl, lr
 8009e9a:	2700      	movs	r7, #0
 8009e9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ea0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ea4:	fa1f f883 	uxth.w	r8, r3
 8009ea8:	fa17 f78b 	uxtah	r7, r7, fp
 8009eac:	0c1b      	lsrs	r3, r3, #16
 8009eae:	eba7 0808 	sub.w	r8, r7, r8
 8009eb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009eb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009eba:	fa1f f888 	uxth.w	r8, r8
 8009ebe:	141f      	asrs	r7, r3, #16
 8009ec0:	454d      	cmp	r5, r9
 8009ec2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009ec6:	f84a 3b04 	str.w	r3, [sl], #4
 8009eca:	d8e7      	bhi.n	8009e9c <__mdiff+0x7c>
 8009ecc:	1b2b      	subs	r3, r5, r4
 8009ece:	3b15      	subs	r3, #21
 8009ed0:	f023 0303 	bic.w	r3, r3, #3
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	3415      	adds	r4, #21
 8009ed8:	42a5      	cmp	r5, r4
 8009eda:	bf38      	it	cc
 8009edc:	2304      	movcc	r3, #4
 8009ede:	4419      	add	r1, r3
 8009ee0:	4473      	add	r3, lr
 8009ee2:	469e      	mov	lr, r3
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	4565      	cmp	r5, ip
 8009ee8:	d30e      	bcc.n	8009f08 <__mdiff+0xe8>
 8009eea:	f10c 0203 	add.w	r2, ip, #3
 8009eee:	1a52      	subs	r2, r2, r1
 8009ef0:	f022 0203 	bic.w	r2, r2, #3
 8009ef4:	3903      	subs	r1, #3
 8009ef6:	458c      	cmp	ip, r1
 8009ef8:	bf38      	it	cc
 8009efa:	2200      	movcc	r2, #0
 8009efc:	441a      	add	r2, r3
 8009efe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f02:	b17b      	cbz	r3, 8009f24 <__mdiff+0x104>
 8009f04:	6106      	str	r6, [r0, #16]
 8009f06:	e7a5      	b.n	8009e54 <__mdiff+0x34>
 8009f08:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f0c:	fa17 f488 	uxtah	r4, r7, r8
 8009f10:	1422      	asrs	r2, r4, #16
 8009f12:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009f16:	b2a4      	uxth	r4, r4
 8009f18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009f1c:	f84e 4b04 	str.w	r4, [lr], #4
 8009f20:	1417      	asrs	r7, r2, #16
 8009f22:	e7e0      	b.n	8009ee6 <__mdiff+0xc6>
 8009f24:	3e01      	subs	r6, #1
 8009f26:	e7ea      	b.n	8009efe <__mdiff+0xde>
 8009f28:	0800b94b 	.word	0x0800b94b
 8009f2c:	0800b9bc 	.word	0x0800b9bc

08009f30 <__d2b>:
 8009f30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f34:	4689      	mov	r9, r1
 8009f36:	2101      	movs	r1, #1
 8009f38:	ec57 6b10 	vmov	r6, r7, d0
 8009f3c:	4690      	mov	r8, r2
 8009f3e:	f7ff fcd5 	bl	80098ec <_Balloc>
 8009f42:	4604      	mov	r4, r0
 8009f44:	b930      	cbnz	r0, 8009f54 <__d2b+0x24>
 8009f46:	4602      	mov	r2, r0
 8009f48:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <__d2b+0xb0>)
 8009f4a:	4826      	ldr	r0, [pc, #152]	; (8009fe4 <__d2b+0xb4>)
 8009f4c:	f240 310a 	movw	r1, #778	; 0x30a
 8009f50:	f000 fc20 	bl	800a794 <__assert_func>
 8009f54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009f58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009f5c:	bb35      	cbnz	r5, 8009fac <__d2b+0x7c>
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	d028      	beq.n	8009fb6 <__d2b+0x86>
 8009f64:	4668      	mov	r0, sp
 8009f66:	9600      	str	r6, [sp, #0]
 8009f68:	f7ff fd8c 	bl	8009a84 <__lo0bits>
 8009f6c:	9900      	ldr	r1, [sp, #0]
 8009f6e:	b300      	cbz	r0, 8009fb2 <__d2b+0x82>
 8009f70:	9a01      	ldr	r2, [sp, #4]
 8009f72:	f1c0 0320 	rsb	r3, r0, #32
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	430b      	orrs	r3, r1
 8009f7c:	40c2      	lsrs	r2, r0
 8009f7e:	6163      	str	r3, [r4, #20]
 8009f80:	9201      	str	r2, [sp, #4]
 8009f82:	9b01      	ldr	r3, [sp, #4]
 8009f84:	61a3      	str	r3, [r4, #24]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bf14      	ite	ne
 8009f8a:	2202      	movne	r2, #2
 8009f8c:	2201      	moveq	r2, #1
 8009f8e:	6122      	str	r2, [r4, #16]
 8009f90:	b1d5      	cbz	r5, 8009fc8 <__d2b+0x98>
 8009f92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f96:	4405      	add	r5, r0
 8009f98:	f8c9 5000 	str.w	r5, [r9]
 8009f9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009fa0:	f8c8 0000 	str.w	r0, [r8]
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	b003      	add	sp, #12
 8009fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fb0:	e7d5      	b.n	8009f5e <__d2b+0x2e>
 8009fb2:	6161      	str	r1, [r4, #20]
 8009fb4:	e7e5      	b.n	8009f82 <__d2b+0x52>
 8009fb6:	a801      	add	r0, sp, #4
 8009fb8:	f7ff fd64 	bl	8009a84 <__lo0bits>
 8009fbc:	9b01      	ldr	r3, [sp, #4]
 8009fbe:	6163      	str	r3, [r4, #20]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	6122      	str	r2, [r4, #16]
 8009fc4:	3020      	adds	r0, #32
 8009fc6:	e7e3      	b.n	8009f90 <__d2b+0x60>
 8009fc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fd0:	f8c9 0000 	str.w	r0, [r9]
 8009fd4:	6918      	ldr	r0, [r3, #16]
 8009fd6:	f7ff fd35 	bl	8009a44 <__hi0bits>
 8009fda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fde:	e7df      	b.n	8009fa0 <__d2b+0x70>
 8009fe0:	0800b94b 	.word	0x0800b94b
 8009fe4:	0800b9bc 	.word	0x0800b9bc

08009fe8 <_calloc_r>:
 8009fe8:	b513      	push	{r0, r1, r4, lr}
 8009fea:	434a      	muls	r2, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	9201      	str	r2, [sp, #4]
 8009ff0:	f000 f85a 	bl	800a0a8 <_malloc_r>
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	b118      	cbz	r0, 800a000 <_calloc_r+0x18>
 8009ff8:	9a01      	ldr	r2, [sp, #4]
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f7fd fd9e 	bl	8007b3c <memset>
 800a000:	4620      	mov	r0, r4
 800a002:	b002      	add	sp, #8
 800a004:	bd10      	pop	{r4, pc}
	...

0800a008 <_free_r>:
 800a008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a00a:	2900      	cmp	r1, #0
 800a00c:	d048      	beq.n	800a0a0 <_free_r+0x98>
 800a00e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a012:	9001      	str	r0, [sp, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	f1a1 0404 	sub.w	r4, r1, #4
 800a01a:	bfb8      	it	lt
 800a01c:	18e4      	addlt	r4, r4, r3
 800a01e:	f000 fc59 	bl	800a8d4 <__malloc_lock>
 800a022:	4a20      	ldr	r2, [pc, #128]	; (800a0a4 <_free_r+0x9c>)
 800a024:	9801      	ldr	r0, [sp, #4]
 800a026:	6813      	ldr	r3, [r2, #0]
 800a028:	4615      	mov	r5, r2
 800a02a:	b933      	cbnz	r3, 800a03a <_free_r+0x32>
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	6014      	str	r4, [r2, #0]
 800a030:	b003      	add	sp, #12
 800a032:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a036:	f000 bc53 	b.w	800a8e0 <__malloc_unlock>
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	d90b      	bls.n	800a056 <_free_r+0x4e>
 800a03e:	6821      	ldr	r1, [r4, #0]
 800a040:	1862      	adds	r2, r4, r1
 800a042:	4293      	cmp	r3, r2
 800a044:	bf04      	itt	eq
 800a046:	681a      	ldreq	r2, [r3, #0]
 800a048:	685b      	ldreq	r3, [r3, #4]
 800a04a:	6063      	str	r3, [r4, #4]
 800a04c:	bf04      	itt	eq
 800a04e:	1852      	addeq	r2, r2, r1
 800a050:	6022      	streq	r2, [r4, #0]
 800a052:	602c      	str	r4, [r5, #0]
 800a054:	e7ec      	b.n	800a030 <_free_r+0x28>
 800a056:	461a      	mov	r2, r3
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	b10b      	cbz	r3, 800a060 <_free_r+0x58>
 800a05c:	42a3      	cmp	r3, r4
 800a05e:	d9fa      	bls.n	800a056 <_free_r+0x4e>
 800a060:	6811      	ldr	r1, [r2, #0]
 800a062:	1855      	adds	r5, r2, r1
 800a064:	42a5      	cmp	r5, r4
 800a066:	d10b      	bne.n	800a080 <_free_r+0x78>
 800a068:	6824      	ldr	r4, [r4, #0]
 800a06a:	4421      	add	r1, r4
 800a06c:	1854      	adds	r4, r2, r1
 800a06e:	42a3      	cmp	r3, r4
 800a070:	6011      	str	r1, [r2, #0]
 800a072:	d1dd      	bne.n	800a030 <_free_r+0x28>
 800a074:	681c      	ldr	r4, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	6053      	str	r3, [r2, #4]
 800a07a:	4421      	add	r1, r4
 800a07c:	6011      	str	r1, [r2, #0]
 800a07e:	e7d7      	b.n	800a030 <_free_r+0x28>
 800a080:	d902      	bls.n	800a088 <_free_r+0x80>
 800a082:	230c      	movs	r3, #12
 800a084:	6003      	str	r3, [r0, #0]
 800a086:	e7d3      	b.n	800a030 <_free_r+0x28>
 800a088:	6825      	ldr	r5, [r4, #0]
 800a08a:	1961      	adds	r1, r4, r5
 800a08c:	428b      	cmp	r3, r1
 800a08e:	bf04      	itt	eq
 800a090:	6819      	ldreq	r1, [r3, #0]
 800a092:	685b      	ldreq	r3, [r3, #4]
 800a094:	6063      	str	r3, [r4, #4]
 800a096:	bf04      	itt	eq
 800a098:	1949      	addeq	r1, r1, r5
 800a09a:	6021      	streq	r1, [r4, #0]
 800a09c:	6054      	str	r4, [r2, #4]
 800a09e:	e7c7      	b.n	800a030 <_free_r+0x28>
 800a0a0:	b003      	add	sp, #12
 800a0a2:	bd30      	pop	{r4, r5, pc}
 800a0a4:	2000066c 	.word	0x2000066c

0800a0a8 <_malloc_r>:
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	1ccd      	adds	r5, r1, #3
 800a0ac:	f025 0503 	bic.w	r5, r5, #3
 800a0b0:	3508      	adds	r5, #8
 800a0b2:	2d0c      	cmp	r5, #12
 800a0b4:	bf38      	it	cc
 800a0b6:	250c      	movcc	r5, #12
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	db01      	blt.n	800a0c2 <_malloc_r+0x1a>
 800a0be:	42a9      	cmp	r1, r5
 800a0c0:	d903      	bls.n	800a0ca <_malloc_r+0x22>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	6033      	str	r3, [r6, #0]
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ca:	f000 fc03 	bl	800a8d4 <__malloc_lock>
 800a0ce:	4921      	ldr	r1, [pc, #132]	; (800a154 <_malloc_r+0xac>)
 800a0d0:	680a      	ldr	r2, [r1, #0]
 800a0d2:	4614      	mov	r4, r2
 800a0d4:	b99c      	cbnz	r4, 800a0fe <_malloc_r+0x56>
 800a0d6:	4f20      	ldr	r7, [pc, #128]	; (800a158 <_malloc_r+0xb0>)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	b923      	cbnz	r3, 800a0e6 <_malloc_r+0x3e>
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4630      	mov	r0, r6
 800a0e0:	f000 faf2 	bl	800a6c8 <_sbrk_r>
 800a0e4:	6038      	str	r0, [r7, #0]
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f000 faed 	bl	800a6c8 <_sbrk_r>
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	d123      	bne.n	800a13a <_malloc_r+0x92>
 800a0f2:	230c      	movs	r3, #12
 800a0f4:	6033      	str	r3, [r6, #0]
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f000 fbf2 	bl	800a8e0 <__malloc_unlock>
 800a0fc:	e7e3      	b.n	800a0c6 <_malloc_r+0x1e>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	1b5b      	subs	r3, r3, r5
 800a102:	d417      	bmi.n	800a134 <_malloc_r+0x8c>
 800a104:	2b0b      	cmp	r3, #11
 800a106:	d903      	bls.n	800a110 <_malloc_r+0x68>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	441c      	add	r4, r3
 800a10c:	6025      	str	r5, [r4, #0]
 800a10e:	e004      	b.n	800a11a <_malloc_r+0x72>
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	42a2      	cmp	r2, r4
 800a114:	bf0c      	ite	eq
 800a116:	600b      	streq	r3, [r1, #0]
 800a118:	6053      	strne	r3, [r2, #4]
 800a11a:	4630      	mov	r0, r6
 800a11c:	f000 fbe0 	bl	800a8e0 <__malloc_unlock>
 800a120:	f104 000b 	add.w	r0, r4, #11
 800a124:	1d23      	adds	r3, r4, #4
 800a126:	f020 0007 	bic.w	r0, r0, #7
 800a12a:	1ac2      	subs	r2, r0, r3
 800a12c:	d0cc      	beq.n	800a0c8 <_malloc_r+0x20>
 800a12e:	1a1b      	subs	r3, r3, r0
 800a130:	50a3      	str	r3, [r4, r2]
 800a132:	e7c9      	b.n	800a0c8 <_malloc_r+0x20>
 800a134:	4622      	mov	r2, r4
 800a136:	6864      	ldr	r4, [r4, #4]
 800a138:	e7cc      	b.n	800a0d4 <_malloc_r+0x2c>
 800a13a:	1cc4      	adds	r4, r0, #3
 800a13c:	f024 0403 	bic.w	r4, r4, #3
 800a140:	42a0      	cmp	r0, r4
 800a142:	d0e3      	beq.n	800a10c <_malloc_r+0x64>
 800a144:	1a21      	subs	r1, r4, r0
 800a146:	4630      	mov	r0, r6
 800a148:	f000 fabe 	bl	800a6c8 <_sbrk_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	d1dd      	bne.n	800a10c <_malloc_r+0x64>
 800a150:	e7cf      	b.n	800a0f2 <_malloc_r+0x4a>
 800a152:	bf00      	nop
 800a154:	2000066c 	.word	0x2000066c
 800a158:	20000670 	.word	0x20000670

0800a15c <__ssputs_r>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	688e      	ldr	r6, [r1, #8]
 800a162:	429e      	cmp	r6, r3
 800a164:	4682      	mov	sl, r0
 800a166:	460c      	mov	r4, r1
 800a168:	4690      	mov	r8, r2
 800a16a:	461f      	mov	r7, r3
 800a16c:	d838      	bhi.n	800a1e0 <__ssputs_r+0x84>
 800a16e:	898a      	ldrh	r2, [r1, #12]
 800a170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a174:	d032      	beq.n	800a1dc <__ssputs_r+0x80>
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	6909      	ldr	r1, [r1, #16]
 800a17a:	eba5 0901 	sub.w	r9, r5, r1
 800a17e:	6965      	ldr	r5, [r4, #20]
 800a180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a188:	3301      	adds	r3, #1
 800a18a:	444b      	add	r3, r9
 800a18c:	106d      	asrs	r5, r5, #1
 800a18e:	429d      	cmp	r5, r3
 800a190:	bf38      	it	cc
 800a192:	461d      	movcc	r5, r3
 800a194:	0553      	lsls	r3, r2, #21
 800a196:	d531      	bpl.n	800a1fc <__ssputs_r+0xa0>
 800a198:	4629      	mov	r1, r5
 800a19a:	f7ff ff85 	bl	800a0a8 <_malloc_r>
 800a19e:	4606      	mov	r6, r0
 800a1a0:	b950      	cbnz	r0, 800a1b8 <__ssputs_r+0x5c>
 800a1a2:	230c      	movs	r3, #12
 800a1a4:	f8ca 3000 	str.w	r3, [sl]
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1ae:	81a3      	strh	r3, [r4, #12]
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b8:	6921      	ldr	r1, [r4, #16]
 800a1ba:	464a      	mov	r2, r9
 800a1bc:	f7ff fb88 	bl	80098d0 <memcpy>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	6126      	str	r6, [r4, #16]
 800a1ce:	6165      	str	r5, [r4, #20]
 800a1d0:	444e      	add	r6, r9
 800a1d2:	eba5 0509 	sub.w	r5, r5, r9
 800a1d6:	6026      	str	r6, [r4, #0]
 800a1d8:	60a5      	str	r5, [r4, #8]
 800a1da:	463e      	mov	r6, r7
 800a1dc:	42be      	cmp	r6, r7
 800a1de:	d900      	bls.n	800a1e2 <__ssputs_r+0x86>
 800a1e0:	463e      	mov	r6, r7
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	6820      	ldr	r0, [r4, #0]
 800a1e6:	4641      	mov	r1, r8
 800a1e8:	f000 fb5a 	bl	800a8a0 <memmove>
 800a1ec:	68a3      	ldr	r3, [r4, #8]
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	1b9b      	subs	r3, r3, r6
 800a1f2:	4432      	add	r2, r6
 800a1f4:	60a3      	str	r3, [r4, #8]
 800a1f6:	6022      	str	r2, [r4, #0]
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	e7db      	b.n	800a1b4 <__ssputs_r+0x58>
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	f000 fb75 	bl	800a8ec <_realloc_r>
 800a202:	4606      	mov	r6, r0
 800a204:	2800      	cmp	r0, #0
 800a206:	d1e1      	bne.n	800a1cc <__ssputs_r+0x70>
 800a208:	6921      	ldr	r1, [r4, #16]
 800a20a:	4650      	mov	r0, sl
 800a20c:	f7ff fefc 	bl	800a008 <_free_r>
 800a210:	e7c7      	b.n	800a1a2 <__ssputs_r+0x46>
	...

0800a214 <_svfiprintf_r>:
 800a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a218:	4698      	mov	r8, r3
 800a21a:	898b      	ldrh	r3, [r1, #12]
 800a21c:	061b      	lsls	r3, r3, #24
 800a21e:	b09d      	sub	sp, #116	; 0x74
 800a220:	4607      	mov	r7, r0
 800a222:	460d      	mov	r5, r1
 800a224:	4614      	mov	r4, r2
 800a226:	d50e      	bpl.n	800a246 <_svfiprintf_r+0x32>
 800a228:	690b      	ldr	r3, [r1, #16]
 800a22a:	b963      	cbnz	r3, 800a246 <_svfiprintf_r+0x32>
 800a22c:	2140      	movs	r1, #64	; 0x40
 800a22e:	f7ff ff3b 	bl	800a0a8 <_malloc_r>
 800a232:	6028      	str	r0, [r5, #0]
 800a234:	6128      	str	r0, [r5, #16]
 800a236:	b920      	cbnz	r0, 800a242 <_svfiprintf_r+0x2e>
 800a238:	230c      	movs	r3, #12
 800a23a:	603b      	str	r3, [r7, #0]
 800a23c:	f04f 30ff 	mov.w	r0, #4294967295
 800a240:	e0d1      	b.n	800a3e6 <_svfiprintf_r+0x1d2>
 800a242:	2340      	movs	r3, #64	; 0x40
 800a244:	616b      	str	r3, [r5, #20]
 800a246:	2300      	movs	r3, #0
 800a248:	9309      	str	r3, [sp, #36]	; 0x24
 800a24a:	2320      	movs	r3, #32
 800a24c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a250:	f8cd 800c 	str.w	r8, [sp, #12]
 800a254:	2330      	movs	r3, #48	; 0x30
 800a256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a400 <_svfiprintf_r+0x1ec>
 800a25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a25e:	f04f 0901 	mov.w	r9, #1
 800a262:	4623      	mov	r3, r4
 800a264:	469a      	mov	sl, r3
 800a266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26a:	b10a      	cbz	r2, 800a270 <_svfiprintf_r+0x5c>
 800a26c:	2a25      	cmp	r2, #37	; 0x25
 800a26e:	d1f9      	bne.n	800a264 <_svfiprintf_r+0x50>
 800a270:	ebba 0b04 	subs.w	fp, sl, r4
 800a274:	d00b      	beq.n	800a28e <_svfiprintf_r+0x7a>
 800a276:	465b      	mov	r3, fp
 800a278:	4622      	mov	r2, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	4638      	mov	r0, r7
 800a27e:	f7ff ff6d 	bl	800a15c <__ssputs_r>
 800a282:	3001      	adds	r0, #1
 800a284:	f000 80aa 	beq.w	800a3dc <_svfiprintf_r+0x1c8>
 800a288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a28a:	445a      	add	r2, fp
 800a28c:	9209      	str	r2, [sp, #36]	; 0x24
 800a28e:	f89a 3000 	ldrb.w	r3, [sl]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80a2 	beq.w	800a3dc <_svfiprintf_r+0x1c8>
 800a298:	2300      	movs	r3, #0
 800a29a:	f04f 32ff 	mov.w	r2, #4294967295
 800a29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a2:	f10a 0a01 	add.w	sl, sl, #1
 800a2a6:	9304      	str	r3, [sp, #16]
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ae:	931a      	str	r3, [sp, #104]	; 0x68
 800a2b0:	4654      	mov	r4, sl
 800a2b2:	2205      	movs	r2, #5
 800a2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b8:	4851      	ldr	r0, [pc, #324]	; (800a400 <_svfiprintf_r+0x1ec>)
 800a2ba:	f7f5 ff91 	bl	80001e0 <memchr>
 800a2be:	9a04      	ldr	r2, [sp, #16]
 800a2c0:	b9d8      	cbnz	r0, 800a2fa <_svfiprintf_r+0xe6>
 800a2c2:	06d0      	lsls	r0, r2, #27
 800a2c4:	bf44      	itt	mi
 800a2c6:	2320      	movmi	r3, #32
 800a2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2cc:	0711      	lsls	r1, r2, #28
 800a2ce:	bf44      	itt	mi
 800a2d0:	232b      	movmi	r3, #43	; 0x2b
 800a2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2da:	2b2a      	cmp	r3, #42	; 0x2a
 800a2dc:	d015      	beq.n	800a30a <_svfiprintf_r+0xf6>
 800a2de:	9a07      	ldr	r2, [sp, #28]
 800a2e0:	4654      	mov	r4, sl
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f04f 0c0a 	mov.w	ip, #10
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ee:	3b30      	subs	r3, #48	; 0x30
 800a2f0:	2b09      	cmp	r3, #9
 800a2f2:	d94e      	bls.n	800a392 <_svfiprintf_r+0x17e>
 800a2f4:	b1b0      	cbz	r0, 800a324 <_svfiprintf_r+0x110>
 800a2f6:	9207      	str	r2, [sp, #28]
 800a2f8:	e014      	b.n	800a324 <_svfiprintf_r+0x110>
 800a2fa:	eba0 0308 	sub.w	r3, r0, r8
 800a2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	46a2      	mov	sl, r4
 800a308:	e7d2      	b.n	800a2b0 <_svfiprintf_r+0x9c>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	1d19      	adds	r1, r3, #4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	9103      	str	r1, [sp, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	bfbb      	ittet	lt
 800a316:	425b      	neglt	r3, r3
 800a318:	f042 0202 	orrlt.w	r2, r2, #2
 800a31c:	9307      	strge	r3, [sp, #28]
 800a31e:	9307      	strlt	r3, [sp, #28]
 800a320:	bfb8      	it	lt
 800a322:	9204      	strlt	r2, [sp, #16]
 800a324:	7823      	ldrb	r3, [r4, #0]
 800a326:	2b2e      	cmp	r3, #46	; 0x2e
 800a328:	d10c      	bne.n	800a344 <_svfiprintf_r+0x130>
 800a32a:	7863      	ldrb	r3, [r4, #1]
 800a32c:	2b2a      	cmp	r3, #42	; 0x2a
 800a32e:	d135      	bne.n	800a39c <_svfiprintf_r+0x188>
 800a330:	9b03      	ldr	r3, [sp, #12]
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	9203      	str	r2, [sp, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfb8      	it	lt
 800a33c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a340:	3402      	adds	r4, #2
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a410 <_svfiprintf_r+0x1fc>
 800a348:	7821      	ldrb	r1, [r4, #0]
 800a34a:	2203      	movs	r2, #3
 800a34c:	4650      	mov	r0, sl
 800a34e:	f7f5 ff47 	bl	80001e0 <memchr>
 800a352:	b140      	cbz	r0, 800a366 <_svfiprintf_r+0x152>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	eba0 000a 	sub.w	r0, r0, sl
 800a35a:	fa03 f000 	lsl.w	r0, r3, r0
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	4303      	orrs	r3, r0
 800a362:	3401      	adds	r4, #1
 800a364:	9304      	str	r3, [sp, #16]
 800a366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a36a:	4826      	ldr	r0, [pc, #152]	; (800a404 <_svfiprintf_r+0x1f0>)
 800a36c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a370:	2206      	movs	r2, #6
 800a372:	f7f5 ff35 	bl	80001e0 <memchr>
 800a376:	2800      	cmp	r0, #0
 800a378:	d038      	beq.n	800a3ec <_svfiprintf_r+0x1d8>
 800a37a:	4b23      	ldr	r3, [pc, #140]	; (800a408 <_svfiprintf_r+0x1f4>)
 800a37c:	bb1b      	cbnz	r3, 800a3c6 <_svfiprintf_r+0x1b2>
 800a37e:	9b03      	ldr	r3, [sp, #12]
 800a380:	3307      	adds	r3, #7
 800a382:	f023 0307 	bic.w	r3, r3, #7
 800a386:	3308      	adds	r3, #8
 800a388:	9303      	str	r3, [sp, #12]
 800a38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a38c:	4433      	add	r3, r6
 800a38e:	9309      	str	r3, [sp, #36]	; 0x24
 800a390:	e767      	b.n	800a262 <_svfiprintf_r+0x4e>
 800a392:	fb0c 3202 	mla	r2, ip, r2, r3
 800a396:	460c      	mov	r4, r1
 800a398:	2001      	movs	r0, #1
 800a39a:	e7a5      	b.n	800a2e8 <_svfiprintf_r+0xd4>
 800a39c:	2300      	movs	r3, #0
 800a39e:	3401      	adds	r4, #1
 800a3a0:	9305      	str	r3, [sp, #20]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	f04f 0c0a 	mov.w	ip, #10
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ae:	3a30      	subs	r2, #48	; 0x30
 800a3b0:	2a09      	cmp	r2, #9
 800a3b2:	d903      	bls.n	800a3bc <_svfiprintf_r+0x1a8>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d0c5      	beq.n	800a344 <_svfiprintf_r+0x130>
 800a3b8:	9105      	str	r1, [sp, #20]
 800a3ba:	e7c3      	b.n	800a344 <_svfiprintf_r+0x130>
 800a3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7f0      	b.n	800a3a8 <_svfiprintf_r+0x194>
 800a3c6:	ab03      	add	r3, sp, #12
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	462a      	mov	r2, r5
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <_svfiprintf_r+0x1f8>)
 800a3ce:	a904      	add	r1, sp, #16
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7fd fc5b 	bl	8007c8c <_printf_float>
 800a3d6:	1c42      	adds	r2, r0, #1
 800a3d8:	4606      	mov	r6, r0
 800a3da:	d1d6      	bne.n	800a38a <_svfiprintf_r+0x176>
 800a3dc:	89ab      	ldrh	r3, [r5, #12]
 800a3de:	065b      	lsls	r3, r3, #25
 800a3e0:	f53f af2c 	bmi.w	800a23c <_svfiprintf_r+0x28>
 800a3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3e6:	b01d      	add	sp, #116	; 0x74
 800a3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ec:	ab03      	add	r3, sp, #12
 800a3ee:	9300      	str	r3, [sp, #0]
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4b06      	ldr	r3, [pc, #24]	; (800a40c <_svfiprintf_r+0x1f8>)
 800a3f4:	a904      	add	r1, sp, #16
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	f7fd feec 	bl	80081d4 <_printf_i>
 800a3fc:	e7eb      	b.n	800a3d6 <_svfiprintf_r+0x1c2>
 800a3fe:	bf00      	nop
 800a400:	0800bb1c 	.word	0x0800bb1c
 800a404:	0800bb26 	.word	0x0800bb26
 800a408:	08007c8d 	.word	0x08007c8d
 800a40c:	0800a15d 	.word	0x0800a15d
 800a410:	0800bb22 	.word	0x0800bb22

0800a414 <__sfputc_r>:
 800a414:	6893      	ldr	r3, [r2, #8]
 800a416:	3b01      	subs	r3, #1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	b410      	push	{r4}
 800a41c:	6093      	str	r3, [r2, #8]
 800a41e:	da08      	bge.n	800a432 <__sfputc_r+0x1e>
 800a420:	6994      	ldr	r4, [r2, #24]
 800a422:	42a3      	cmp	r3, r4
 800a424:	db01      	blt.n	800a42a <__sfputc_r+0x16>
 800a426:	290a      	cmp	r1, #10
 800a428:	d103      	bne.n	800a432 <__sfputc_r+0x1e>
 800a42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a42e:	f7fe b8e9 	b.w	8008604 <__swbuf_r>
 800a432:	6813      	ldr	r3, [r2, #0]
 800a434:	1c58      	adds	r0, r3, #1
 800a436:	6010      	str	r0, [r2, #0]
 800a438:	7019      	strb	r1, [r3, #0]
 800a43a:	4608      	mov	r0, r1
 800a43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <__sfputs_r>:
 800a442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a444:	4606      	mov	r6, r0
 800a446:	460f      	mov	r7, r1
 800a448:	4614      	mov	r4, r2
 800a44a:	18d5      	adds	r5, r2, r3
 800a44c:	42ac      	cmp	r4, r5
 800a44e:	d101      	bne.n	800a454 <__sfputs_r+0x12>
 800a450:	2000      	movs	r0, #0
 800a452:	e007      	b.n	800a464 <__sfputs_r+0x22>
 800a454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a458:	463a      	mov	r2, r7
 800a45a:	4630      	mov	r0, r6
 800a45c:	f7ff ffda 	bl	800a414 <__sfputc_r>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d1f3      	bne.n	800a44c <__sfputs_r+0xa>
 800a464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a468 <_vfiprintf_r>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	460d      	mov	r5, r1
 800a46e:	b09d      	sub	sp, #116	; 0x74
 800a470:	4614      	mov	r4, r2
 800a472:	4698      	mov	r8, r3
 800a474:	4606      	mov	r6, r0
 800a476:	b118      	cbz	r0, 800a480 <_vfiprintf_r+0x18>
 800a478:	6983      	ldr	r3, [r0, #24]
 800a47a:	b90b      	cbnz	r3, 800a480 <_vfiprintf_r+0x18>
 800a47c:	f7ff f916 	bl	80096ac <__sinit>
 800a480:	4b89      	ldr	r3, [pc, #548]	; (800a6a8 <_vfiprintf_r+0x240>)
 800a482:	429d      	cmp	r5, r3
 800a484:	d11b      	bne.n	800a4be <_vfiprintf_r+0x56>
 800a486:	6875      	ldr	r5, [r6, #4]
 800a488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a48a:	07d9      	lsls	r1, r3, #31
 800a48c:	d405      	bmi.n	800a49a <_vfiprintf_r+0x32>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	059a      	lsls	r2, r3, #22
 800a492:	d402      	bmi.n	800a49a <_vfiprintf_r+0x32>
 800a494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a496:	f7ff f9ac 	bl	80097f2 <__retarget_lock_acquire_recursive>
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	071b      	lsls	r3, r3, #28
 800a49e:	d501      	bpl.n	800a4a4 <_vfiprintf_r+0x3c>
 800a4a0:	692b      	ldr	r3, [r5, #16]
 800a4a2:	b9eb      	cbnz	r3, 800a4e0 <_vfiprintf_r+0x78>
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	f7fe f8fe 	bl	80086a8 <__swsetup_r>
 800a4ac:	b1c0      	cbz	r0, 800a4e0 <_vfiprintf_r+0x78>
 800a4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b0:	07dc      	lsls	r4, r3, #31
 800a4b2:	d50e      	bpl.n	800a4d2 <_vfiprintf_r+0x6a>
 800a4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b8:	b01d      	add	sp, #116	; 0x74
 800a4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4be:	4b7b      	ldr	r3, [pc, #492]	; (800a6ac <_vfiprintf_r+0x244>)
 800a4c0:	429d      	cmp	r5, r3
 800a4c2:	d101      	bne.n	800a4c8 <_vfiprintf_r+0x60>
 800a4c4:	68b5      	ldr	r5, [r6, #8]
 800a4c6:	e7df      	b.n	800a488 <_vfiprintf_r+0x20>
 800a4c8:	4b79      	ldr	r3, [pc, #484]	; (800a6b0 <_vfiprintf_r+0x248>)
 800a4ca:	429d      	cmp	r5, r3
 800a4cc:	bf08      	it	eq
 800a4ce:	68f5      	ldreq	r5, [r6, #12]
 800a4d0:	e7da      	b.n	800a488 <_vfiprintf_r+0x20>
 800a4d2:	89ab      	ldrh	r3, [r5, #12]
 800a4d4:	0598      	lsls	r0, r3, #22
 800a4d6:	d4ed      	bmi.n	800a4b4 <_vfiprintf_r+0x4c>
 800a4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4da:	f7ff f98b 	bl	80097f4 <__retarget_lock_release_recursive>
 800a4de:	e7e9      	b.n	800a4b4 <_vfiprintf_r+0x4c>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4ee:	2330      	movs	r3, #48	; 0x30
 800a4f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6b4 <_vfiprintf_r+0x24c>
 800a4f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4f8:	f04f 0901 	mov.w	r9, #1
 800a4fc:	4623      	mov	r3, r4
 800a4fe:	469a      	mov	sl, r3
 800a500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a504:	b10a      	cbz	r2, 800a50a <_vfiprintf_r+0xa2>
 800a506:	2a25      	cmp	r2, #37	; 0x25
 800a508:	d1f9      	bne.n	800a4fe <_vfiprintf_r+0x96>
 800a50a:	ebba 0b04 	subs.w	fp, sl, r4
 800a50e:	d00b      	beq.n	800a528 <_vfiprintf_r+0xc0>
 800a510:	465b      	mov	r3, fp
 800a512:	4622      	mov	r2, r4
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ff93 	bl	800a442 <__sfputs_r>
 800a51c:	3001      	adds	r0, #1
 800a51e:	f000 80aa 	beq.w	800a676 <_vfiprintf_r+0x20e>
 800a522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a524:	445a      	add	r2, fp
 800a526:	9209      	str	r2, [sp, #36]	; 0x24
 800a528:	f89a 3000 	ldrb.w	r3, [sl]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	f000 80a2 	beq.w	800a676 <_vfiprintf_r+0x20e>
 800a532:	2300      	movs	r3, #0
 800a534:	f04f 32ff 	mov.w	r2, #4294967295
 800a538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a53c:	f10a 0a01 	add.w	sl, sl, #1
 800a540:	9304      	str	r3, [sp, #16]
 800a542:	9307      	str	r3, [sp, #28]
 800a544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a548:	931a      	str	r3, [sp, #104]	; 0x68
 800a54a:	4654      	mov	r4, sl
 800a54c:	2205      	movs	r2, #5
 800a54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a552:	4858      	ldr	r0, [pc, #352]	; (800a6b4 <_vfiprintf_r+0x24c>)
 800a554:	f7f5 fe44 	bl	80001e0 <memchr>
 800a558:	9a04      	ldr	r2, [sp, #16]
 800a55a:	b9d8      	cbnz	r0, 800a594 <_vfiprintf_r+0x12c>
 800a55c:	06d1      	lsls	r1, r2, #27
 800a55e:	bf44      	itt	mi
 800a560:	2320      	movmi	r3, #32
 800a562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a566:	0713      	lsls	r3, r2, #28
 800a568:	bf44      	itt	mi
 800a56a:	232b      	movmi	r3, #43	; 0x2b
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a570:	f89a 3000 	ldrb.w	r3, [sl]
 800a574:	2b2a      	cmp	r3, #42	; 0x2a
 800a576:	d015      	beq.n	800a5a4 <_vfiprintf_r+0x13c>
 800a578:	9a07      	ldr	r2, [sp, #28]
 800a57a:	4654      	mov	r4, sl
 800a57c:	2000      	movs	r0, #0
 800a57e:	f04f 0c0a 	mov.w	ip, #10
 800a582:	4621      	mov	r1, r4
 800a584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a588:	3b30      	subs	r3, #48	; 0x30
 800a58a:	2b09      	cmp	r3, #9
 800a58c:	d94e      	bls.n	800a62c <_vfiprintf_r+0x1c4>
 800a58e:	b1b0      	cbz	r0, 800a5be <_vfiprintf_r+0x156>
 800a590:	9207      	str	r2, [sp, #28]
 800a592:	e014      	b.n	800a5be <_vfiprintf_r+0x156>
 800a594:	eba0 0308 	sub.w	r3, r0, r8
 800a598:	fa09 f303 	lsl.w	r3, r9, r3
 800a59c:	4313      	orrs	r3, r2
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	46a2      	mov	sl, r4
 800a5a2:	e7d2      	b.n	800a54a <_vfiprintf_r+0xe2>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	1d19      	adds	r1, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	9103      	str	r1, [sp, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	bfbb      	ittet	lt
 800a5b0:	425b      	neglt	r3, r3
 800a5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800a5b6:	9307      	strge	r3, [sp, #28]
 800a5b8:	9307      	strlt	r3, [sp, #28]
 800a5ba:	bfb8      	it	lt
 800a5bc:	9204      	strlt	r2, [sp, #16]
 800a5be:	7823      	ldrb	r3, [r4, #0]
 800a5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a5c2:	d10c      	bne.n	800a5de <_vfiprintf_r+0x176>
 800a5c4:	7863      	ldrb	r3, [r4, #1]
 800a5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5c8:	d135      	bne.n	800a636 <_vfiprintf_r+0x1ce>
 800a5ca:	9b03      	ldr	r3, [sp, #12]
 800a5cc:	1d1a      	adds	r2, r3, #4
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	9203      	str	r2, [sp, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	bfb8      	it	lt
 800a5d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5da:	3402      	adds	r4, #2
 800a5dc:	9305      	str	r3, [sp, #20]
 800a5de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a6c4 <_vfiprintf_r+0x25c>
 800a5e2:	7821      	ldrb	r1, [r4, #0]
 800a5e4:	2203      	movs	r2, #3
 800a5e6:	4650      	mov	r0, sl
 800a5e8:	f7f5 fdfa 	bl	80001e0 <memchr>
 800a5ec:	b140      	cbz	r0, 800a600 <_vfiprintf_r+0x198>
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	eba0 000a 	sub.w	r0, r0, sl
 800a5f4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	4303      	orrs	r3, r0
 800a5fc:	3401      	adds	r4, #1
 800a5fe:	9304      	str	r3, [sp, #16]
 800a600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a604:	482c      	ldr	r0, [pc, #176]	; (800a6b8 <_vfiprintf_r+0x250>)
 800a606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a60a:	2206      	movs	r2, #6
 800a60c:	f7f5 fde8 	bl	80001e0 <memchr>
 800a610:	2800      	cmp	r0, #0
 800a612:	d03f      	beq.n	800a694 <_vfiprintf_r+0x22c>
 800a614:	4b29      	ldr	r3, [pc, #164]	; (800a6bc <_vfiprintf_r+0x254>)
 800a616:	bb1b      	cbnz	r3, 800a660 <_vfiprintf_r+0x1f8>
 800a618:	9b03      	ldr	r3, [sp, #12]
 800a61a:	3307      	adds	r3, #7
 800a61c:	f023 0307 	bic.w	r3, r3, #7
 800a620:	3308      	adds	r3, #8
 800a622:	9303      	str	r3, [sp, #12]
 800a624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a626:	443b      	add	r3, r7
 800a628:	9309      	str	r3, [sp, #36]	; 0x24
 800a62a:	e767      	b.n	800a4fc <_vfiprintf_r+0x94>
 800a62c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a630:	460c      	mov	r4, r1
 800a632:	2001      	movs	r0, #1
 800a634:	e7a5      	b.n	800a582 <_vfiprintf_r+0x11a>
 800a636:	2300      	movs	r3, #0
 800a638:	3401      	adds	r4, #1
 800a63a:	9305      	str	r3, [sp, #20]
 800a63c:	4619      	mov	r1, r3
 800a63e:	f04f 0c0a 	mov.w	ip, #10
 800a642:	4620      	mov	r0, r4
 800a644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a648:	3a30      	subs	r2, #48	; 0x30
 800a64a:	2a09      	cmp	r2, #9
 800a64c:	d903      	bls.n	800a656 <_vfiprintf_r+0x1ee>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0c5      	beq.n	800a5de <_vfiprintf_r+0x176>
 800a652:	9105      	str	r1, [sp, #20]
 800a654:	e7c3      	b.n	800a5de <_vfiprintf_r+0x176>
 800a656:	fb0c 2101 	mla	r1, ip, r1, r2
 800a65a:	4604      	mov	r4, r0
 800a65c:	2301      	movs	r3, #1
 800a65e:	e7f0      	b.n	800a642 <_vfiprintf_r+0x1da>
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	462a      	mov	r2, r5
 800a666:	4b16      	ldr	r3, [pc, #88]	; (800a6c0 <_vfiprintf_r+0x258>)
 800a668:	a904      	add	r1, sp, #16
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7fd fb0e 	bl	8007c8c <_printf_float>
 800a670:	4607      	mov	r7, r0
 800a672:	1c78      	adds	r0, r7, #1
 800a674:	d1d6      	bne.n	800a624 <_vfiprintf_r+0x1bc>
 800a676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a678:	07d9      	lsls	r1, r3, #31
 800a67a:	d405      	bmi.n	800a688 <_vfiprintf_r+0x220>
 800a67c:	89ab      	ldrh	r3, [r5, #12]
 800a67e:	059a      	lsls	r2, r3, #22
 800a680:	d402      	bmi.n	800a688 <_vfiprintf_r+0x220>
 800a682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a684:	f7ff f8b6 	bl	80097f4 <__retarget_lock_release_recursive>
 800a688:	89ab      	ldrh	r3, [r5, #12]
 800a68a:	065b      	lsls	r3, r3, #25
 800a68c:	f53f af12 	bmi.w	800a4b4 <_vfiprintf_r+0x4c>
 800a690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a692:	e711      	b.n	800a4b8 <_vfiprintf_r+0x50>
 800a694:	ab03      	add	r3, sp, #12
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	462a      	mov	r2, r5
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <_vfiprintf_r+0x258>)
 800a69c:	a904      	add	r1, sp, #16
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7fd fd98 	bl	80081d4 <_printf_i>
 800a6a4:	e7e4      	b.n	800a670 <_vfiprintf_r+0x208>
 800a6a6:	bf00      	nop
 800a6a8:	0800b97c 	.word	0x0800b97c
 800a6ac:	0800b99c 	.word	0x0800b99c
 800a6b0:	0800b95c 	.word	0x0800b95c
 800a6b4:	0800bb1c 	.word	0x0800bb1c
 800a6b8:	0800bb26 	.word	0x0800bb26
 800a6bc:	08007c8d 	.word	0x08007c8d
 800a6c0:	0800a443 	.word	0x0800a443
 800a6c4:	0800bb22 	.word	0x0800bb22

0800a6c8 <_sbrk_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d06      	ldr	r5, [pc, #24]	; (800a6e4 <_sbrk_r+0x1c>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	602b      	str	r3, [r5, #0]
 800a6d4:	f7f8 ffe2 	bl	800369c <_sbrk>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_sbrk_r+0x1a>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_sbrk_r+0x1a>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20000934 	.word	0x20000934

0800a6e8 <__sread>:
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f0:	f000 f922 	bl	800a938 <_read_r>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	bfab      	itete	ge
 800a6f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a6fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a6fc:	181b      	addge	r3, r3, r0
 800a6fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a702:	bfac      	ite	ge
 800a704:	6563      	strge	r3, [r4, #84]	; 0x54
 800a706:	81a3      	strhlt	r3, [r4, #12]
 800a708:	bd10      	pop	{r4, pc}

0800a70a <__swrite>:
 800a70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a70e:	461f      	mov	r7, r3
 800a710:	898b      	ldrh	r3, [r1, #12]
 800a712:	05db      	lsls	r3, r3, #23
 800a714:	4605      	mov	r5, r0
 800a716:	460c      	mov	r4, r1
 800a718:	4616      	mov	r6, r2
 800a71a:	d505      	bpl.n	800a728 <__swrite+0x1e>
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	2302      	movs	r3, #2
 800a722:	2200      	movs	r2, #0
 800a724:	f000 f898 	bl	800a858 <_lseek_r>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a72e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a732:	81a3      	strh	r3, [r4, #12]
 800a734:	4632      	mov	r2, r6
 800a736:	463b      	mov	r3, r7
 800a738:	4628      	mov	r0, r5
 800a73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a73e:	f000 b817 	b.w	800a770 <_write_r>

0800a742 <__sseek>:
 800a742:	b510      	push	{r4, lr}
 800a744:	460c      	mov	r4, r1
 800a746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74a:	f000 f885 	bl	800a858 <_lseek_r>
 800a74e:	1c43      	adds	r3, r0, #1
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	bf15      	itete	ne
 800a754:	6560      	strne	r0, [r4, #84]	; 0x54
 800a756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a75a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a75e:	81a3      	strheq	r3, [r4, #12]
 800a760:	bf18      	it	ne
 800a762:	81a3      	strhne	r3, [r4, #12]
 800a764:	bd10      	pop	{r4, pc}

0800a766 <__sclose>:
 800a766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76a:	f000 b831 	b.w	800a7d0 <_close_r>
	...

0800a770 <_write_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4d07      	ldr	r5, [pc, #28]	; (800a790 <_write_r+0x20>)
 800a774:	4604      	mov	r4, r0
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	602a      	str	r2, [r5, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7f8 ff3b 	bl	80035fa <_write>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_write_r+0x1e>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_write_r+0x1e>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000934 	.word	0x20000934

0800a794 <__assert_func>:
 800a794:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a796:	4614      	mov	r4, r2
 800a798:	461a      	mov	r2, r3
 800a79a:	4b09      	ldr	r3, [pc, #36]	; (800a7c0 <__assert_func+0x2c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4605      	mov	r5, r0
 800a7a0:	68d8      	ldr	r0, [r3, #12]
 800a7a2:	b14c      	cbz	r4, 800a7b8 <__assert_func+0x24>
 800a7a4:	4b07      	ldr	r3, [pc, #28]	; (800a7c4 <__assert_func+0x30>)
 800a7a6:	9100      	str	r1, [sp, #0]
 800a7a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7ac:	4906      	ldr	r1, [pc, #24]	; (800a7c8 <__assert_func+0x34>)
 800a7ae:	462b      	mov	r3, r5
 800a7b0:	f000 f81e 	bl	800a7f0 <fiprintf>
 800a7b4:	f7fd f991 	bl	8007ada <abort>
 800a7b8:	4b04      	ldr	r3, [pc, #16]	; (800a7cc <__assert_func+0x38>)
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	e7f3      	b.n	800a7a6 <__assert_func+0x12>
 800a7be:	bf00      	nop
 800a7c0:	20000018 	.word	0x20000018
 800a7c4:	0800bb2d 	.word	0x0800bb2d
 800a7c8:	0800bb3a 	.word	0x0800bb3a
 800a7cc:	0800bb68 	.word	0x0800bb68

0800a7d0 <_close_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d06      	ldr	r5, [pc, #24]	; (800a7ec <_close_r+0x1c>)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	602b      	str	r3, [r5, #0]
 800a7dc:	f7f8 ff29 	bl	8003632 <_close>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	d102      	bne.n	800a7ea <_close_r+0x1a>
 800a7e4:	682b      	ldr	r3, [r5, #0]
 800a7e6:	b103      	cbz	r3, 800a7ea <_close_r+0x1a>
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	20000934 	.word	0x20000934

0800a7f0 <fiprintf>:
 800a7f0:	b40e      	push	{r1, r2, r3}
 800a7f2:	b503      	push	{r0, r1, lr}
 800a7f4:	4601      	mov	r1, r0
 800a7f6:	ab03      	add	r3, sp, #12
 800a7f8:	4805      	ldr	r0, [pc, #20]	; (800a810 <fiprintf+0x20>)
 800a7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fe:	6800      	ldr	r0, [r0, #0]
 800a800:	9301      	str	r3, [sp, #4]
 800a802:	f7ff fe31 	bl	800a468 <_vfiprintf_r>
 800a806:	b002      	add	sp, #8
 800a808:	f85d eb04 	ldr.w	lr, [sp], #4
 800a80c:	b003      	add	sp, #12
 800a80e:	4770      	bx	lr
 800a810:	20000018 	.word	0x20000018

0800a814 <_fstat_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	4d07      	ldr	r5, [pc, #28]	; (800a834 <_fstat_r+0x20>)
 800a818:	2300      	movs	r3, #0
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	602b      	str	r3, [r5, #0]
 800a822:	f7f8 ff12 	bl	800364a <_fstat>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	d102      	bne.n	800a830 <_fstat_r+0x1c>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	b103      	cbz	r3, 800a830 <_fstat_r+0x1c>
 800a82e:	6023      	str	r3, [r4, #0]
 800a830:	bd38      	pop	{r3, r4, r5, pc}
 800a832:	bf00      	nop
 800a834:	20000934 	.word	0x20000934

0800a838 <_isatty_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	4d06      	ldr	r5, [pc, #24]	; (800a854 <_isatty_r+0x1c>)
 800a83c:	2300      	movs	r3, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7f8 ff11 	bl	800366a <_isatty>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_isatty_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_isatty_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20000934 	.word	0x20000934

0800a858 <_lseek_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4d07      	ldr	r5, [pc, #28]	; (800a878 <_lseek_r+0x20>)
 800a85c:	4604      	mov	r4, r0
 800a85e:	4608      	mov	r0, r1
 800a860:	4611      	mov	r1, r2
 800a862:	2200      	movs	r2, #0
 800a864:	602a      	str	r2, [r5, #0]
 800a866:	461a      	mov	r2, r3
 800a868:	f7f8 ff0a 	bl	8003680 <_lseek>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_lseek_r+0x1e>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_lseek_r+0x1e>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20000934 	.word	0x20000934

0800a87c <__ascii_mbtowc>:
 800a87c:	b082      	sub	sp, #8
 800a87e:	b901      	cbnz	r1, 800a882 <__ascii_mbtowc+0x6>
 800a880:	a901      	add	r1, sp, #4
 800a882:	b142      	cbz	r2, 800a896 <__ascii_mbtowc+0x1a>
 800a884:	b14b      	cbz	r3, 800a89a <__ascii_mbtowc+0x1e>
 800a886:	7813      	ldrb	r3, [r2, #0]
 800a888:	600b      	str	r3, [r1, #0]
 800a88a:	7812      	ldrb	r2, [r2, #0]
 800a88c:	1e10      	subs	r0, r2, #0
 800a88e:	bf18      	it	ne
 800a890:	2001      	movne	r0, #1
 800a892:	b002      	add	sp, #8
 800a894:	4770      	bx	lr
 800a896:	4610      	mov	r0, r2
 800a898:	e7fb      	b.n	800a892 <__ascii_mbtowc+0x16>
 800a89a:	f06f 0001 	mvn.w	r0, #1
 800a89e:	e7f8      	b.n	800a892 <__ascii_mbtowc+0x16>

0800a8a0 <memmove>:
 800a8a0:	4288      	cmp	r0, r1
 800a8a2:	b510      	push	{r4, lr}
 800a8a4:	eb01 0402 	add.w	r4, r1, r2
 800a8a8:	d902      	bls.n	800a8b0 <memmove+0x10>
 800a8aa:	4284      	cmp	r4, r0
 800a8ac:	4623      	mov	r3, r4
 800a8ae:	d807      	bhi.n	800a8c0 <memmove+0x20>
 800a8b0:	1e43      	subs	r3, r0, #1
 800a8b2:	42a1      	cmp	r1, r4
 800a8b4:	d008      	beq.n	800a8c8 <memmove+0x28>
 800a8b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8be:	e7f8      	b.n	800a8b2 <memmove+0x12>
 800a8c0:	4402      	add	r2, r0
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	428a      	cmp	r2, r1
 800a8c6:	d100      	bne.n	800a8ca <memmove+0x2a>
 800a8c8:	bd10      	pop	{r4, pc}
 800a8ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8d2:	e7f7      	b.n	800a8c4 <memmove+0x24>

0800a8d4 <__malloc_lock>:
 800a8d4:	4801      	ldr	r0, [pc, #4]	; (800a8dc <__malloc_lock+0x8>)
 800a8d6:	f7fe bf8c 	b.w	80097f2 <__retarget_lock_acquire_recursive>
 800a8da:	bf00      	nop
 800a8dc:	2000092c 	.word	0x2000092c

0800a8e0 <__malloc_unlock>:
 800a8e0:	4801      	ldr	r0, [pc, #4]	; (800a8e8 <__malloc_unlock+0x8>)
 800a8e2:	f7fe bf87 	b.w	80097f4 <__retarget_lock_release_recursive>
 800a8e6:	bf00      	nop
 800a8e8:	2000092c 	.word	0x2000092c

0800a8ec <_realloc_r>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	4607      	mov	r7, r0
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	460e      	mov	r6, r1
 800a8f4:	b921      	cbnz	r1, 800a900 <_realloc_r+0x14>
 800a8f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	f7ff bbd4 	b.w	800a0a8 <_malloc_r>
 800a900:	b922      	cbnz	r2, 800a90c <_realloc_r+0x20>
 800a902:	f7ff fb81 	bl	800a008 <_free_r>
 800a906:	4625      	mov	r5, r4
 800a908:	4628      	mov	r0, r5
 800a90a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a90c:	f000 f833 	bl	800a976 <_malloc_usable_size_r>
 800a910:	42a0      	cmp	r0, r4
 800a912:	d20f      	bcs.n	800a934 <_realloc_r+0x48>
 800a914:	4621      	mov	r1, r4
 800a916:	4638      	mov	r0, r7
 800a918:	f7ff fbc6 	bl	800a0a8 <_malloc_r>
 800a91c:	4605      	mov	r5, r0
 800a91e:	2800      	cmp	r0, #0
 800a920:	d0f2      	beq.n	800a908 <_realloc_r+0x1c>
 800a922:	4631      	mov	r1, r6
 800a924:	4622      	mov	r2, r4
 800a926:	f7fe ffd3 	bl	80098d0 <memcpy>
 800a92a:	4631      	mov	r1, r6
 800a92c:	4638      	mov	r0, r7
 800a92e:	f7ff fb6b 	bl	800a008 <_free_r>
 800a932:	e7e9      	b.n	800a908 <_realloc_r+0x1c>
 800a934:	4635      	mov	r5, r6
 800a936:	e7e7      	b.n	800a908 <_realloc_r+0x1c>

0800a938 <_read_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d07      	ldr	r5, [pc, #28]	; (800a958 <_read_r+0x20>)
 800a93c:	4604      	mov	r4, r0
 800a93e:	4608      	mov	r0, r1
 800a940:	4611      	mov	r1, r2
 800a942:	2200      	movs	r2, #0
 800a944:	602a      	str	r2, [r5, #0]
 800a946:	461a      	mov	r2, r3
 800a948:	f7f8 fe3a 	bl	80035c0 <_read>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_read_r+0x1e>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_read_r+0x1e>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	20000934 	.word	0x20000934

0800a95c <__ascii_wctomb>:
 800a95c:	b149      	cbz	r1, 800a972 <__ascii_wctomb+0x16>
 800a95e:	2aff      	cmp	r2, #255	; 0xff
 800a960:	bf85      	ittet	hi
 800a962:	238a      	movhi	r3, #138	; 0x8a
 800a964:	6003      	strhi	r3, [r0, #0]
 800a966:	700a      	strbls	r2, [r1, #0]
 800a968:	f04f 30ff 	movhi.w	r0, #4294967295
 800a96c:	bf98      	it	ls
 800a96e:	2001      	movls	r0, #1
 800a970:	4770      	bx	lr
 800a972:	4608      	mov	r0, r1
 800a974:	4770      	bx	lr

0800a976 <_malloc_usable_size_r>:
 800a976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a97a:	1f18      	subs	r0, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	bfbc      	itt	lt
 800a980:	580b      	ldrlt	r3, [r1, r0]
 800a982:	18c0      	addlt	r0, r0, r3
 800a984:	4770      	bx	lr
	...

0800a988 <_init>:
 800a988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98a:	bf00      	nop
 800a98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98e:	bc08      	pop	{r3}
 800a990:	469e      	mov	lr, r3
 800a992:	4770      	bx	lr

0800a994 <_fini>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	bf00      	nop
 800a998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99a:	bc08      	pop	{r3}
 800a99c:	469e      	mov	lr, r3
 800a99e:	4770      	bx	lr
